[{"text": "okay welcome back everybody um just", "start": 1.079, "duration": 4.921}, {"text": "somebody can confirm real quick that my", "start": 4.2, "duration": 4.28}, {"text": "audio is", "start": 6.0, "duration": 2.48}, {"text": "working yes it is okay great thanks", "start": 8.559, "duration": 6.521}, {"text": "Cindy all right so I know you've um", "start": 11.92, "duration": 5.119}, {"text": "already seen a lot of technical material", "start": 15.08, "duration": 4.0}, {"text": "today um I'm going to kind of wamp you", "start": 17.039, "duration": 4.0}, {"text": "with some more I'm going to be covering", "start": 19.08, "duration": 4.279}, {"text": "one of my favorite topics and that is", "start": 21.039, "duration": 5.64}, {"text": "performance um for performance tuning", "start": 23.359, "duration": 5.92}, {"text": "and single processor optimization so let", "start": 26.679, "duration": 6.0}, {"text": "me go ahead and share my", "start": 29.279, "duration": 3.4}, {"text": "slides okay so everybody should be", "start": 53.48, "duration": 5.44}, {"text": "seeing that in full screen", "start": 55.64, "duration": 5.759}, {"text": "now okay so I'm going to be covering", "start": 58.92, "duration": 5.8}, {"text": "performance tuning and single processor", "start": 61.399, "duration": 5.321}, {"text": "optimization um if you want to follow", "start": 64.72, "duration": 3.6}, {"text": "along in", "start": 66.72, "duration": 4.6}, {"text": "GitHub um this is the this is URL well", "start": 68.32, "duration": 4.76}, {"text": "that will take you there um so this is", "start": 71.32, "duration": 4.24}, {"text": "session", "start": 73.08, "duration": 2.48}, {"text": "4.3a and I just want to what happened to", "start": 75.799, "duration": 6.521}, {"text": "my slide oh yeah sorry that was a little", "start": 79.159, "duration": 6.081}, {"text": "out of order um I've had to make a few", "start": 82.32, "duration": 5.68}, {"text": "updates specifically for today so the", "start": 85.24, "duration": 4.919}, {"text": "exercises that we're going to be doing", "start": 88.0, "duration": 4.56}, {"text": "were originally developed for running on", "start": 90.159, "duration": 4.441}, {"text": "a full node and they used all of the", "start": 92.56, "duration": 4.32}, {"text": "memory and as I was benchmarking these", "start": 94.6, "duration": 3.76}, {"text": "I'm confirming everything was working", "start": 96.88, "duration": 3.239}, {"text": "this morning I realized that we're", "start": 98.36, "duration": 3.84}, {"text": "working on shared nodes and we're not", "start": 100.119, "duration": 3.921}, {"text": "going to have access to all the memory", "start": 102.2, "duration": 3.919}, {"text": "so what I had to do was reduce the", "start": 104.04, "duration": 4.52}, {"text": "problem size a little bit so for the", "start": 106.119, "duration": 5.441}, {"text": "Matrix addition example we're going um", "start": 108.56, "duration": 5.919}, {"text": "from a problem size of 30,000 squared to", "start": 111.56, "duration": 6.8}, {"text": "25,000 squar for the fusion Loop Fusion", "start": 114.479, "duration": 6.6}, {"text": "example we're going from 30,000 down to", "start": 118.36, "duration": 6.52}, {"text": "20,000 and for the time based sampling", "start": 121.079, "duration": 6.281}, {"text": "lost track of the number of zeros but we", "start": 124.88, "duration": 5.879}, {"text": "reduce the problem by roughly a fat", "start": 127.36, "duration": 4.4}, {"text": "factor of", "start": 130.759, "duration": 3.48}, {"text": "three now so that you don't have to", "start": 131.76, "duration": 5.759}, {"text": "manually change these um if you um", "start": 134.239, "duration": 8.561}, {"text": "execute this command copy dasr slome xdt", "start": 137.519, "duration": 8.921}, {"text": "xd107 SL performance and then copied", "start": 142.8, "duration": 5.6}, {"text": "into into your home directory that will", "start": 146.44, "duration": 5.04}, {"text": "give you access to all of the code the", "start": 148.4, "duration": 5.919}, {"text": "scripts that we're using today and at", "start": 151.48, "duration": 4.8}, {"text": "some point you'll also want to get a", "start": 154.319, "duration": 5.28}, {"text": "shared node just type S run- shared and", "start": 156.28, "duration": 5.12}, {"text": "that should give you pretty quick access", "start": 159.599, "duration": 4.681}, {"text": "to a shared compute node so like I said", "start": 161.4, "duration": 4.68}, {"text": "instead of using a whole node I believe", "start": 164.28, "duration": 4.16}, {"text": "each of you are going to be having", "start": 166.08, "duration": 4.36}, {"text": "access to a quarter of node quarter of", "start": 168.44, "duration": 5.12}, {"text": "the ches and a quarter of the memory but", "start": 170.44, "duration": 7.2}, {"text": "if you just do a copy from my training", "start": 173.56, "duration": 5.92}, {"text": "home directory you'll get access all the", "start": 177.64, "duration": 4.08}, {"text": "updates to date all the upto-date", "start": 179.48, "duration": 6.0}, {"text": "materials um I pasted this into the chat", "start": 181.72, "duration": 6.96}, {"text": "and it is also available in the main", "start": 185.48, "duration": 8.039}, {"text": "room um in the main room select", "start": 188.68, "duration": 10.119}, {"text": "channel so let me just back up so you", "start": 193.519, "duration": 6.961}, {"text": "know why why why do we care about", "start": 198.799, "duration": 5.681}, {"text": "writing efficient scaler and serial code", "start": 200.48, "duration": 6.0}, {"text": "so you know we think about it or at", "start": 204.48, "duration": 4.2}, {"text": "least when I think about it I see a few", "start": 206.48, "duration": 3.92}, {"text": "motivations", "start": 208.68, "duration": 4.72}, {"text": "so I think most of us we want to", "start": 210.4, "duration": 5.28}, {"text": "optimize our code so that we can reduce", "start": 213.4, "duration": 4.119}, {"text": "the time to solution we'd like things to", "start": 215.68, "duration": 3.72}, {"text": "run quickly in fact that that's why we", "start": 217.519, "duration": 3.64}, {"text": "do supercomputing we don't want to wait", "start": 219.4, "duration": 4.0}, {"text": "year months or years or tens of years", "start": 221.159, "duration": 5.36}, {"text": "for a for solution so if we can optimize", "start": 223.4, "duration": 5.52}, {"text": "a code we'll be able to get more science", "start": 226.519, "duration": 4.44}, {"text": "done in the same amount of time and we", "start": 228.92, "duration": 4.12}, {"text": "can shorten that cycle between job", "start": 230.959, "duration": 4.801}, {"text": "submission and and and results I like to", "start": 233.04, "duration": 4.399}, {"text": "think there are a few thresholds when we", "start": 235.76, "duration": 4.44}, {"text": "can go from you know what previously", "start": 237.439, "duration": 5.0}, {"text": "took overnight to do if we can now do", "start": 240.2, "duration": 4.759}, {"text": "that over the course of a day that means", "start": 242.439, "duration": 4.041}, {"text": "we can do some calculations in the", "start": 244.959, "duration": 3.2}, {"text": "morning look at the results in the", "start": 246.48, "duration": 6.119}, {"text": "evening um and La launch um launch new", "start": 248.159, "duration": 7.961}, {"text": "launch new jobs um similarly if you can", "start": 252.599, "duration": 6.121}, {"text": "reduce the run time for from hours to a", "start": 256.12, "duration": 4.799}, {"text": "few minutes say you know amount of time", "start": 258.72, "duration": 5.08}, {"text": "it takes to do a quick walk or or take a", "start": 260.919, "duration": 5.441}, {"text": "coffee break again that will that will", "start": 263.8, "duration": 3.92}, {"text": "accelerate your", "start": 266.36, "duration": 4.399}, {"text": "signs um second wel computer time", "start": 267.72, "duration": 5.319}, {"text": "especially on high-end resources like", "start": 270.759, "duration": 4.44}, {"text": "expans is limited in fact it's so", "start": 273.039, "duration": 4.16}, {"text": "limited that today we're using shared", "start": 275.199, "duration": 4.401}, {"text": "nodes rather than rather than dedicated", "start": 277.199, "duration": 5.321}, {"text": "nodes so you're going to be um competing", "start": 279.6, "duration": 5.76}, {"text": "with other users for for these resources", "start": 282.52, "duration": 4.64}, {"text": "I know that some of you may already have", "start": 285.36, "duration": 4.64}, {"text": "allocations through exceed um that was a", "start": 287.16, "duration": 5.4}, {"text": "competitive process you or your Pi had", "start": 290.0, "duration": 4.88}, {"text": "to write a proposal competing against", "start": 292.56, "duration": 4.199}, {"text": "everybody else who wanted time in these", "start": 294.88, "duration": 5.759}, {"text": "machines um if you go to the cloud yeah", "start": 296.759, "duration": 6.88}, {"text": "resources the cloud is elastic", "start": 300.639, "duration": 4.56}, {"text": "the", "start": 303.639, "duration": 4.081}, {"text": "um you know the resources as far as", "start": 305.199, "duration": 4.161}, {"text": "you're concerned are almost unlimited", "start": 307.72, "duration": 2.72}, {"text": "but you're going to be paying paying", "start": 309.36, "duration": 3.559}, {"text": "real money for it and then finally if", "start": 310.44, "duration": 5.92}, {"text": "you're um if you've been been following", "start": 312.919, "duration": 5.0}, {"text": "the news lately you realize that that", "start": 316.36, "duration": 4.16}, {"text": "climate change is becoming more and more", "start": 317.919, "duration": 7.0}, {"text": "of an issue and Computing uses a lot of", "start": 320.52, "duration": 7.2}, {"text": "energy and I you know in this bullet I", "start": 324.919, "duration": 4.921}, {"text": "was kind of fuzzy um because I've seen", "start": 327.72, "duration": 3.8}, {"text": "different numbers it's really hard to", "start": 329.84, "duration": 4.12}, {"text": "estimate this but generally there's an", "start": 331.52, "duration": 5.48}, {"text": "agreement that at least a few percent of", "start": 333.96, "duration": 5.519}, {"text": "us energy consumption is used to power", "start": 337.0, "duration": 4.52}, {"text": "computers and networking equipment so", "start": 339.479, "duration": 3.201}, {"text": "we'd like", "start": 341.52, "duration": 3.76}, {"text": "to you like we'd like to make our", "start": 342.68, "duration": 4.84}, {"text": "calculations as green as", "start": 345.28, "duration": 5.359}, {"text": "possible I covered the updates already", "start": 347.52, "duration": 4.6}, {"text": "so you might be thinking in terms of", "start": 350.639, "duration": 4.161}, {"text": "time to solution won't going parallel", "start": 352.12, "duration": 4.28}, {"text": "save me you know we're going to see a", "start": 354.8, "duration": 4.119}, {"text": "lot of talks this week about well you", "start": 356.4, "duration": 5.4}, {"text": "sell one already on high performance um", "start": 358.919, "duration": 5.041}, {"text": "high performance Computing with with", "start": 361.8, "duration": 4.679}, {"text": "python um you're going to see talks on", "start": 363.96, "duration": 5.0}, {"text": "openmp and Cuda and", "start": 366.479, "duration": 5.201}, {"text": "MPI so I'm going to say first of all", "start": 368.96, "duration": 5.2}, {"text": "most parallel applications have limited", "start": 371.68, "duration": 5.32}, {"text": "scalability and even if your application", "start": 374.16, "duration": 5.12}, {"text": "has perfect linear scalability there's", "start": 377.0, "duration": 4.08}, {"text": "always a more challenging problem that", "start": 379.28, "duration": 3.28}, {"text": "that you want to solve so if you can", "start": 381.08, "duration": 4.239}, {"text": "optimize that underlying serial code you", "start": 382.56, "duration": 4.6}, {"text": "can go to higher resolutions and look at", "start": 385.319, "duration": 4.761}, {"text": "larger systems incorporate more accurate", "start": 387.16, "duration": 5.319}, {"text": "physics run longer say if you're doing", "start": 390.08, "duration": 4.08}, {"text": "molecular Dynamics you can go out into", "start": 392.479, "duration": 4.521}, {"text": "the microsc range sometimes you could do", "start": 394.16, "duration": 5.159}, {"text": "more replicates bigger ensembles better", "start": 397.0, "duration": 4.28}, {"text": "statistics so essentially you can do", "start": 399.319, "duration": 3.72}, {"text": "you'll be able to do more", "start": 401.28, "duration": 5.12}, {"text": "science and of course as I mentioned re", "start": 403.039, "duration": 5.961}, {"text": "resources are are still limited and we", "start": 406.4, "duration": 7.4}, {"text": "do want to reduce our reduce our energy", "start": 409.0, "duration": 4.8}, {"text": "footprint so this was a um report that I", "start": 413.88, "duration": 7.56}, {"text": "found um but last year that this came", "start": 418.4, "duration": 7.32}, {"text": "out of lbl La Lawrence Berkeley labs um", "start": 421.44, "duration": 7.56}, {"text": "and they were predicting just a modest", "start": 425.72, "duration": 6.479}, {"text": "um growth from 2014 to", "start": 429.0, "duration": 6.0}, {"text": "2020 in terms of how much um how much", "start": 432.199, "duration": 5.241}, {"text": "power is used but even so even if this", "start": 435.0, "duration": 5.8}, {"text": "stays flat 70 billion kilowatt hours or", "start": 437.44, "duration": 7.039}, {"text": "73 billion kilowatt hours that that's a", "start": 440.8, "duration": 5.6}, {"text": "that's a lot of energy and we would like", "start": 444.479, "duration": 3.801}, {"text": "to try to keep that down and even if", "start": 446.4, "duration": 3.639}, {"text": "we're going to keep it flat we'd like to", "start": 448.28, "duration": 3.639}, {"text": "get more", "start": 450.039, "duration": 7.121}, {"text": "um what more science done per per", "start": 451.919, "duration": 5.241}, {"text": "what so before we get into some of the", "start": 458.84, "duration": 4.72}, {"text": "details we're going to go over the", "start": 461.72, "duration": 4.28}, {"text": "guidelines for software optimization so", "start": 463.56, "duration": 5.479}, {"text": "first of all you know I think of this as", "start": 466.0, "duration": 5.759}, {"text": "as the prime directive of performance", "start": 469.039, "duration": 5.321}, {"text": "tuning and that's don't break your code", "start": 471.759, "duration": 5.12}, {"text": "um I've done this already um it it's", "start": 474.36, "duration": 5.519}, {"text": "really embarrassing when you um", "start": 476.879, "duration": 4.32}, {"text": "but when when you do this and you don't", "start": 479.879, "duration": 3.561}, {"text": "realize it but make sure that you're", "start": 481.199, "duration": 3.921}, {"text": "still getting the correct results it's", "start": 483.44, "duration": 4.479}, {"text": "very easy to get the wrong results", "start": 485.12, "duration": 5.84}, {"text": "quickly but you need to you know", "start": 487.919, "duration": 4.761}, {"text": "constantly be testing your code as", "start": 490.96, "duration": 3.679}, {"text": "you're making these changes you know", "start": 492.68, "duration": 4.12}, {"text": "taking the results making sure that they", "start": 494.639, "duration": 4.28}, {"text": "are the same or that they're the same to", "start": 496.8, "duration": 5.48}, {"text": "within um you know float floating Point", "start": 498.919, "duration": 4.4}, {"text": "rounding", "start": 502.28, "duration": 3.96}, {"text": "error you also want to profile your code", "start": 503.319, "duration": 4.44}, {"text": "so that you know where to focus your", "start": 506.24, "duration": 3.079}, {"text": "effort and that's going to be the first", "start": 507.759, "duration": 2.88}, {"text": "topic we get", "start": 509.319, "duration": 4.441}, {"text": "into if it's a small application that", "start": 510.639, "duration": 5.161}, {"text": "you wrote yourself you probably know", "start": 513.76, "duration": 5.36}, {"text": "where to start but often software is Big", "start": 515.8, "duration": 4.96}, {"text": "um the one that comes immediately to", "start": 519.12, "duration": 5.92}, {"text": "mind is cesm it's the oh I forget what", "start": 520.76, "duration": 6.079}, {"text": "the acronym stands for but it's the", "start": 525.04, "duration": 6.08}, {"text": "widely used um Glo Global Climate code", "start": 526.839, "duration": 6.081}, {"text": "and I believe that it is now over a", "start": 531.12, "duration": 3.96}, {"text": "million lines of code so you can't just", "start": 532.92, "duration": 4.96}, {"text": "jump in there and start and and start", "start": 535.08, "duration": 5.64}, {"text": "tuning um you don't want to obfuscate", "start": 537.88, "duration": 5.24}, {"text": "your code unless you have a really", "start": 540.72, "duration": 4.4}, {"text": "really compelling re reason to do that", "start": 543.12, "duration": 4.399}, {"text": "and by obfuscate I mean change the logic", "start": 545.12, "duration": 4.64}, {"text": "in such a way that it's no longer", "start": 547.519, "duration": 4.121}, {"text": "obvious what you're doing now there are", "start": 549.76, "duration": 3.759}, {"text": "a few exceptions if you have a very", "start": 551.64, "duration": 4.04}, {"text": "heavily used application you might want", "start": 553.519, "duration": 3.841}, {"text": "to go in there and really hack that", "start": 555.68, "duration": 3.159}, {"text": "kernel that accounts for most of the", "start": 557.36, "duration": 5.68}, {"text": "runtime but make sure that it is um that", "start": 558.839, "duration": 6.0}, {"text": "that it's well documented which gets the", "start": 563.04, "duration": 4.0}, {"text": "next Point document all of your changes", "start": 564.839, "duration": 4.321}, {"text": "especially if the new code looks sign", "start": 567.04, "duration": 4.56}, {"text": "significantly different from the", "start": 569.16, "duration": 4.88}, {"text": "original um easiest way to get", "start": 571.6, "duration": 4.6}, {"text": "performance is to use optimized", "start": 574.04, "duration": 4.96}, {"text": "libraries whenever possible if you're", "start": 576.2, "duration": 5.24}, {"text": "writing your own code and it depends", "start": 579.0, "duration": 4.6}, {"text": "primarily", "start": 581.44, "duration": 5.079}, {"text": "on you know on a on a l you know a", "start": 583.6, "duration": 5.2}, {"text": "linear algebra routine or an igen value", "start": 586.519, "duration": 6.601}, {"text": "solver or you know these other common", "start": 588.8, "duration": 7.719}, {"text": "operations if you can use the optimized", "start": 593.12, "duration": 5.44}, {"text": "libraries just go ahead and do that", "start": 596.519, "duration": 3.721}, {"text": "that's going to save you save you a lot", "start": 598.56, "duration": 3.6}, {"text": "of work and I'm not going to say that", "start": 600.24, "duration": 4.36}, {"text": "nobody here says an expert in igen value", "start": 602.16, "duration": 5.08}, {"text": "solvers or linear algebra but that's", "start": 604.6, "duration": 5.239}, {"text": "probably not your focus I recall that", "start": 607.24, "duration": 4.56}, {"text": "most of you are coming from social", "start": 609.839, "duration": 3.961}, {"text": "sciences and computational chemistry and", "start": 611.8, "duration": 4.599}, {"text": "astrophysics your your domain scientists", "start": 613.8, "duration": 5.4}, {"text": "and the groups that work on these", "start": 616.399, "duration": 4.88}, {"text": "optimized libraries that is what they do", "start": 619.2, "duration": 3.56}, {"text": "some of them have been involved in this", "start": 621.279, "duration": 4.321}, {"text": "research for for for many decades and", "start": 622.76, "duration": 4.519}, {"text": "it's it's going to be hard to compete", "start": 625.6, "duration": 3.76}, {"text": "with them and then finally under", "start": 627.279, "duration": 3.401}, {"text": "understand the capabilities and the", "start": 629.36, "duration": 3.32}, {"text": "limitations of your compiler and we're", "start": 630.68, "duration": 4.0}, {"text": "going to see this as we go through a few", "start": 632.68, "duration": 3.8}, {"text": "of the", "start": 634.68, "duration": 4.04}, {"text": "examples then how much effort should you", "start": 636.48, "duration": 5.08}, {"text": "put into optimizing your code so this is", "start": 638.72, "duration": 5.32}, {"text": "going to depend on a number of factors", "start": 641.56, "duration": 5.399}, {"text": "is the code heavily or widely used so", "start": 644.04, "duration": 5.0}, {"text": "one of our instructors this week um Andy", "start": 646.959, "duration": 5.12}, {"text": "gets is what one of the key developers", "start": 649.04, "duration": 5.4}, {"text": "of the Amber molecular Dynamics code", "start": 652.079, "duration": 4.801}, {"text": "which is very very widely used so those", "start": 654.44, "duration": 5.44}, {"text": "folks should put a lot of effort in into", "start": 656.88, "duration": 5.32}, {"text": "squeaking out every last bit of", "start": 659.88, "duration": 4.48}, {"text": "performance similarly does the code you", "start": 662.2, "duration": 4.36}, {"text": "consume a significant amount of computer", "start": 664.36, "duration": 5.24}, {"text": "time next is is the time to solution", "start": 666.56, "duration": 6.44}, {"text": "important if this is a code that's say", "start": 669.6, "duration": 6.08}, {"text": "you know your lab's research code and it", "start": 673.0, "duration": 6.279}, {"text": "really doesn't matter that much um you", "start": 675.68, "duration": 5.2}, {"text": "know how how quickly you solve the", "start": 679.279, "duration": 3.721}, {"text": "problem yeah you might not want to spend", "start": 680.88, "duration": 4.16}, {"text": "too much time in optim optimization this", "start": 683.0, "duration": 5.0}, {"text": "can take a while um if optimizing your", "start": 685.04, "duration": 5.0}, {"text": "code though can help you solve new sets", "start": 688.0, "duration": 3.8}, {"text": "of problems I'm going to say absolutely", "start": 690.04, "duration": 4.239}, {"text": "go for it I did a collaboration with the", "start": 691.8, "duration": 5.839}, {"text": "San Diego Zoo a few years back where", "start": 694.279, "duration": 4.641}, {"text": "using some of the techniques we're going", "start": 697.639, "duration": 3.081}, {"text": "to be talking about today I was able to", "start": 698.92, "duration": 4.64}, {"text": "speed up The Code by a factor of more", "start": 700.72, "duration": 4.96}, {"text": "than a thousand and that completely", "start": 703.56, "duration": 4.56}, {"text": "Revolution revolutionize the kind of", "start": 705.68, "duration": 5.0}, {"text": "science they could do related to the", "start": 708.12, "duration": 4.08}, {"text": "previous slide where I talked about the", "start": 710.68, "duration": 4.48}, {"text": "linear algebra retains and igen value", "start": 712.2, "duration": 6.079}, {"text": "solvers as you optimize and profile your", "start": 715.16, "duration": 5.88}, {"text": "code if you get to the point where most", "start": 718.279, "duration": 5.201}, {"text": "of that Computing is occurring in", "start": 721.04, "duration": 4.84}, {"text": "routines outside of your control so", "start": 723.48, "duration": 4.0}, {"text": "let's say you've written nice clean", "start": 725.88, "duration": 3.84}, {"text": "optimized code you profile it you find", "start": 727.48, "duration": 5.2}, {"text": "out that you're spending 99% of the time", "start": 729.72, "duration": 6.559}, {"text": "in an external um math Library yeah", "start": 732.68, "duration": 5.959}, {"text": "you're done and then also think about", "start": 736.279, "duration": 4.8}, {"text": "the balance between time that you spend", "start": 738.639, "duration": 4.0}, {"text": "working on the codes and time that you", "start": 741.079, "duration": 4.481}, {"text": "spend doing your", "start": 742.639, "duration": 2.921}, {"text": "research all right so I'm going to say", "start": 745.639, "duration": 6.041}, {"text": "the first thing that you need to do what", "start": 749.04, "duration": 5.039}, {"text": "once once you've decided that you need", "start": 751.68, "duration": 5.2}, {"text": "to need to optimize your code is you you", "start": 754.079, "duration": 6.32}, {"text": "need to profile it um as I mentioned", "start": 756.88, "duration": 5.68}, {"text": "modern software can contain many", "start": 760.399, "duration": 4.12}, {"text": "thousands of lines of code sometimes", "start": 762.56, "duration": 5.519}, {"text": "millions of lines and you you really", "start": 764.519, "duration": 5.721}, {"text": "know really need to know where to focus", "start": 768.079, "duration": 5.721}, {"text": "your effort and often most of the time", "start": 770.24, "duration": 6.159}, {"text": "is spent in a small number of routines I", "start": 773.8, "duration": 4.279}, {"text": "find that this is this is actually", "start": 776.399, "duration": 4.281}, {"text": "pretty common I've optimized and tuned a", "start": 778.079, "duration": 5.56}, {"text": "lot of codes over the years", "start": 780.68, "duration": 7.12}, {"text": "and generally you'll find that that 80", "start": 783.639, "duration": 6.88}, {"text": "90% of the time is spent in just a", "start": 787.8, "duration": 7.92}, {"text": "handful of routines so my go-to tool", "start": 790.519, "duration": 7.521}, {"text": "when I start profiling code is something", "start": 795.72, "duration": 6.919}, {"text": "called GPR and this is in terms of you", "start": 798.04, "duration": 7.72}, {"text": "know technology timelines this is an", "start": 802.639, "duration": 5.56}, {"text": "incredibly old venerable tool it goes", "start": 805.76, "duration": 3.68}, {"text": "back to", "start": 808.199, "duration": 4.32}, {"text": "1982 but it is such an excellent easy to", "start": 809.44, "duration": 6.36}, {"text": "use tool that it it's still extremely", "start": 812.519, "duration": 6.281}, {"text": "popular has a couple of advantages first", "start": 815.8, "duration": 5.8}, {"text": "of all it has Universal support by all", "start": 818.8, "duration": 7.039}, {"text": "major C C++ and for Trend compilers to", "start": 821.6, "duration": 7.239}, {"text": "date I have not seen a compiler um that", "start": 825.839, "duration": 5.68}, {"text": "does not support support GPR and that", "start": 828.839, "duration": 7.961}, {"text": "includes um Intel Portland group um ganu", "start": 831.519, "duration": 8.401}, {"text": "the AMD optimizing compilers and and and", "start": 836.8, "duration": 6.56}, {"text": "so on it's very very easy to use there's", "start": 839.92, "duration": 6.839}, {"text": "a very um very shallow learning curve", "start": 843.36, "duration": 5.279}, {"text": "all you do is recompile the code with", "start": 846.759, "duration": 4.64}, {"text": "the- PG flag that's going to add some", "start": 848.639, "duration": 5.361}, {"text": "instrumentation to your code you run the", "start": 851.399, "duration": 5.56}, {"text": "code that's going to produce a Gon Do", "start": 854.0, "duration": 5.36}, {"text": "out file and then you just do the run", "start": 856.959, "duration": 5.401}, {"text": "the command GPR a.out or whatever the", "start": 859.36, "duration": 5.399}, {"text": "name of your name of your executable is", "start": 862.36, "duration": 5.24}, {"text": "and then gmon do out and it introduces", "start": 864.759, "duration": 5.281}, {"text": "virtually no over", "start": 867.6, "duration": 5.52}, {"text": "overhead so gprof though is not a", "start": 870.04, "duration": 5.039}, {"text": "tracing tool and it's not going to", "start": 873.12, "duration": 3.92}, {"text": "identify bottlenecks and parallel codes", "start": 875.079, "duration": 4.841}, {"text": "it will not tell you um you know when", "start": 877.04, "duration": 6.2}, {"text": "when one process is um sitting idle", "start": 879.92, "duration": 5.68}, {"text": "waiting to receive data from another one", "start": 883.24, "duration": 3.959}, {"text": "to do that you're going to need to use", "start": 885.6, "duration": 3.96}, {"text": "more sophisticated codes but if you want", "start": 887.199, "duration": 5.681}, {"text": "to understand the behavior of that", "start": 889.56, "duration": 5.56}, {"text": "underlying serial code in your parallel", "start": 892.88, "duration": 5.319}, {"text": "application I think GPR is absolutely", "start": 895.12, "duration": 5.56}, {"text": "fantastic", "start": 898.199, "duration": 2.481}, {"text": "okay so why should I profile I think", "start": 902.199, "duration": 5.281}, {"text": "I've kind of covered this already but we", "start": 904.759, "duration": 4.681}, {"text": "need to determine what portions of your", "start": 907.48, "duration": 4.4}, {"text": "code are using most of the time you know", "start": 909.44, "duration": 4.04}, {"text": "if you have an application with", "start": 911.88, "duration": 3.84}, {"text": "thousands to millions of lines code and", "start": 913.48, "duration": 4.599}, {"text": "you just start at the first um first", "start": 915.72, "duration": 4.16}, {"text": "routine and work your way through you're", "start": 918.079, "duration": 4.161}, {"text": "going to be wasting a lot of", "start": 919.88, "duration": 5.12}, {"text": "effort um and sometimes you want to go a", "start": 922.24, "duration": 4.32}, {"text": "little bit further and I don't think", "start": 925.0, "duration": 3.959}, {"text": "we'll have time to cover this today but", "start": 926.56, "duration": 4.719}, {"text": "I do have slides in the supplementary", "start": 928.959, "duration": 4.68}, {"text": "section um where we talk about something", "start": 931.279, "duration": 5.081}, {"text": "called upro which is going to go into", "start": 933.639, "duration": 6.161}, {"text": "much more detail than grpr it can give", "start": 936.36, "duration": 8.279}, {"text": "you access to things like oh ex me plane", "start": 939.8, "duration": 4.839}, {"text": "overhead okay um it will give you access", "start": 946.48, "duration": 6.88}, {"text": "to things like things like cash misses", "start": 949.88, "duration": 6.48}, {"text": "and um mispredicted branches so that's", "start": 953.36, "duration": 5.12}, {"text": "really going going much deeper something", "start": 956.36, "duration": 4.44}, {"text": "that that say the computer scientists", "start": 958.48, "duration": 4.52}, {"text": "would be a little more interested in but", "start": 960.8, "duration": 3.839}, {"text": "but worthwhile if you're really trying", "start": 963.0, "duration": 3.88}, {"text": "to figure out why a chunk of code is", "start": 964.639, "duration": 4.32}, {"text": "taking so much", "start": 966.88, "duration": 4.439}, {"text": "time so we're going to start off with", "start": 968.959, "duration": 3.8}, {"text": "with with", "start": 971.319, "duration": 4.601}, {"text": "GPR it gives you um two types of output", "start": 972.759, "duration": 6.32}, {"text": "gives you a call tree and a flat profile", "start": 975.92, "duration": 5.88}, {"text": "so the GPR flat profile is a simple", "start": 979.079, "duration": 5.32}, {"text": "listing of the functions and the sub", "start": 981.8, "duration": 5.0}, {"text": "routines you know functions if you're um", "start": 984.399, "duration": 4.601}, {"text": "what working in C sub routine if you're", "start": 986.8, "duration": 5.039}, {"text": "working in in fortrend ordered by their", "start": 989.0, "duration": 3.88}, {"text": "relative", "start": 991.839, "duration": 3.44}, {"text": "usage and as I mentioned earlier it's", "start": 992.88, "duration": 4.56}, {"text": "often only a small number of routines", "start": 995.279, "duration": 3.68}, {"text": "that account for the large majority of", "start": 997.44, "duration": 4.6}, {"text": "the runtime so GPR is incredibly useful", "start": 998.959, "duration": 6.081}, {"text": "for identifying hotspots in your code so", "start": 1002.04, "duration": 6.799}, {"text": "this is a um this is a profile from a", "start": 1005.04, "duration": 6.64}, {"text": "real application it was part of a", "start": 1008.839, "duration": 4.961}, {"text": "collaboration that I did with the J", "start": 1011.68, "duration": 5.12}, {"text": "Craig ventor Institute which is um just", "start": 1013.8, "duration": 5.2}, {"text": "on the corner of the UCSD camp and I", "start": 1016.8, "duration": 3.839}, {"text": "guess in the process of becoming part of", "start": 1019.0, "duration": 5.559}, {"text": "UCSD this was for a flow citometry", "start": 1020.639, "duration": 7.001}, {"text": "application um it's a technique used", "start": 1024.559, "duration": 7.961}, {"text": "frequently by um by um immunologists to", "start": 1027.64, "duration": 7.64}, {"text": "sort cells into different classes B", "start": 1032.52, "duration": 6.159}, {"text": "cells and T cells and you know various", "start": 1035.28, "duration": 6.039}, {"text": "um subpopulations of their cells and", "start": 1038.679, "duration": 3.961}, {"text": "give me one minute I just want to turn", "start": 1041.319, "duration": 6.081}, {"text": "off my email so it stops pestering", "start": 1042.64, "duration": 7.76}, {"text": "me", "start": 1047.4, "duration": 3.0}, {"text": "okay so back so when I um what when I", "start": 1061.32, "duration": 8.64}, {"text": "profiled this code I found that um that", "start": 1065.2, "duration": 7.8}, {"text": "that a routine called get number packed", "start": 1069.96, "duration": 5.92}, {"text": "data accounted for for the for the", "start": 1073.0, "duration": 5.08}, {"text": "largest for for the largest fraction the", "start": 1075.88, "duration": 3.039}, {"text": "you see", "start": 1078.08, "duration": 3.12}, {"text": "so if I go over to that First Column", "start": 1078.919, "duration": 4.201}, {"text": "you'll see that it's labeled percent", "start": 1081.2, "duration": 4.68}, {"text": "time we see that that first routine get", "start": 1083.12, "duration": 6.2}, {"text": "number pack data I counted for about 68%", "start": 1085.88, "duration": 6.44}, {"text": "of the runtime followed by the function", "start": 1089.32, "duration": 6.08}, {"text": "main which was 133% followed by quick", "start": 1092.32, "duration": 6.719}, {"text": "sort double which was 11% in the next", "start": 1095.4, "duration": 5.399}, {"text": "column we'll see what we call the", "start": 1099.039, "duration": 4.361}, {"text": "cumulative seconds so that's how much", "start": 1100.799, "duration": 4.961}, {"text": "time was spent by that routine and all", "start": 1103.4, "duration": 4.32}, {"text": "of the routines above it of course that", "start": 1105.76, "duration": 3.88}, {"text": "is going to that that's going to grow as", "start": 1107.72, "duration": 6.0}, {"text": "we move our way down down down the table", "start": 1109.64, "duration": 6.88}, {"text": "the next column after that is the what's", "start": 1113.72, "duration": 4.76}, {"text": "called self seconds and that's the", "start": 1116.52, "duration": 4.92}, {"text": "amount of time actually spent in that", "start": 1118.48, "duration": 6.28}, {"text": "routine as opposed to the time spent in", "start": 1121.44, "duration": 5.96}, {"text": "routines that are called by that routine", "start": 1124.76, "duration": 4.84}, {"text": "next you'll see the number of calls in", "start": 1127.4, "duration": 3.96}, {"text": "this case get number pack data was", "start": 1129.6, "duration": 2.88}, {"text": "called", "start": 1131.36, "duration": 5.96}, {"text": "399 587 times the", "start": 1132.48, "duration": 9.28}, {"text": "um M milliseconds per call and the um", "start": 1137.32, "duration": 6.12}, {"text": "total milliseconds per", "start": 1141.76, "duration": 4.039}, {"text": "call and you'll see that there's nothing", "start": 1143.44, "duration": 5.96}, {"text": "listed for main since that is um not", "start": 1145.799, "duration": 5.801}, {"text": "called by any other routines and it's", "start": 1149.4, "duration": 5.32}, {"text": "just um executed", "start": 1151.6, "duration": 3.12}, {"text": "once GPR also gives you a call graph and", "start": 1154.919, "duration": 7.0}, {"text": "this gives you additional levels of", "start": 1159.559, "duration": 5.0}, {"text": "detail such as the exclusive time spent", "start": 1161.919, "duration": 4.961}, {"text": "in function and the time spent in all of", "start": 1164.559, "duration": 5.36}, {"text": "the children so fun that are called and", "start": 1166.88, "duration": 5.279}, {"text": "statistics on calls from the parent I", "start": 1169.919, "duration": 5.721}, {"text": "find that I don't have to go to the um", "start": 1172.159, "duration": 4.601}, {"text": "that I don't have to go to the call", "start": 1175.64, "duration": 4.64}, {"text": "graph as often as I go to the um go to", "start": 1176.76, "duration": 5.64}, {"text": "the flat profile but there is some", "start": 1180.28, "duration": 4.84}, {"text": "useful information in there um", "start": 1182.4, "duration": 6.32}, {"text": "particularly if you see that functions", "start": 1185.12, "duration": 6.679}, {"text": "or routines are being called from", "start": 1188.72, "duration": 5.52}, {"text": "multiple places that might give you", "start": 1191.799, "duration": 6.481}, {"text": "opportunities to say um avoid addition", "start": 1194.24, "duration": 6.6}, {"text": "avoid unnecessary calls so going back to", "start": 1198.28, "duration": 6.84}, {"text": "my original code um for the call graph", "start": 1200.84, "duration": 7.12}, {"text": "profile we start at the top with Maine", "start": 1205.12, "duration": 5.4}, {"text": "and you'll see that Maine and all of its", "start": 1207.96, "duration": 6.079}, {"text": "children accounts for 96.9% of the", "start": 1210.52, "duration": 6.32}, {"text": "runtime now usually the these numbers", "start": 1214.039, "duration": 5.441}, {"text": "won't quite add up to 100% there's a", "start": 1216.84, "duration": 4.04}, {"text": "little bit of overhead there's some", "start": 1219.48, "duration": 3.439}, {"text": "sampling that's involved um but it", "start": 1220.88, "duration": 4.84}, {"text": "should be it should be very close to", "start": 1222.919, "duration": 5.441}, {"text": "very close to 100 you'll notice that", "start": 1225.72, "duration": 6.16}, {"text": "under main there are number routines", "start": 1228.36, "duration": 7.84}, {"text": "that are listed and they are um that", "start": 1231.88, "duration": 6.88}, {"text": "they they are indented so that indicates", "start": 1236.2, "duration": 5.04}, {"text": "that these routines are called by Maine", "start": 1238.76, "duration": 4.72}, {"text": "and Maine particular calls get number", "start": 1241.24, "duration": 5.24}, {"text": "pack data is hump quick sort radic sort", "start": 1243.48, "duration": 6.76}, {"text": "flock and id2 centercore", "start": 1246.48, "duration": 7.079}, {"text": "all those retains are also labeled by", "start": 1250.24, "duration": 4.799}, {"text": "the", "start": 1253.559, "duration": 5.641}, {"text": "um by by by the amount of cumulative", "start": 1255.039, "duration": 7.64}, {"text": "um how would put it but by by their um", "start": 1259.2, "duration": 6.32}, {"text": "inclusive runtime so themselves and the", "start": 1262.679, "duration": 5.321}, {"text": "and the functions they call you'll", "start": 1265.52, "duration": 4.84}, {"text": "notice under the call called column that", "start": 1268.0, "duration": 4.88}, {"text": "there are two numbers um the first", "start": 1270.36, "duration": 6.96}, {"text": "number is the so I get straight I", "start": 1272.88, "duration": 6.0}, {"text": "believe that the first number is the", "start": 1277.32, "duration": 4.64}, {"text": "number of times that that routine is", "start": 1278.88, "duration": 5.399}, {"text": "called by the Callum routine that we're", "start": 1281.96, "duration": 3.12}, {"text": "looking", "start": 1284.279, "duration": 4.161}, {"text": "at and then second number is the total", "start": 1285.08, "duration": 5.28}, {"text": "number of calls in this case it's pretty", "start": 1288.44, "duration": 3.599}, {"text": "simple we'll see for example that get", "start": 1290.36, "duration": 5.199}, {"text": "number pack data is called", "start": 1292.039, "duration": 6.76}, {"text": "3995 87 times and that all of those", "start": 1295.559, "duration": 6.801}, {"text": "calls are made from made from Main um if", "start": 1298.799, "duration": 5.561}, {"text": "we go down a little bit further let's", "start": 1302.36, "duration": 3.439}, {"text": "take a look at the bottom of the table", "start": 1304.36, "duration": 4.799}, {"text": "is hump you'll see that main appears", "start": 1305.799, "duration": 5.601}, {"text": "above it and it's indented that", "start": 1309.159, "duration": 4.481}, {"text": "indicates that it is a routine that is", "start": 1311.4, "duration": 5.759}, {"text": "calling is hump and then below is hump", "start": 1313.64, "duration": 5.84}, {"text": "we'll see the three routines get nearest", "start": 1317.159, "duration": 4.52}, {"text": "events pack rays and pack points that", "start": 1319.48, "duration": 5.559}, {"text": "are actually called by is", "start": 1321.679, "duration": 3.36}, {"text": "hump once you start optimizing your code", "start": 1325.64, "duration": 5.72}, {"text": "make sure that you go back and you", "start": 1329.48, "duration": 4.559}, {"text": "rofile so this is a case where we were", "start": 1331.36, "duration": 8.12}, {"text": "able to um optimize get number pack data", "start": 1334.039, "duration": 10.0}, {"text": "so well that it's now um no longer it's", "start": 1339.48, "duration": 7.559}, {"text": "no now no longer The Hot Spot um it's", "start": 1344.039, "duration": 6.64}, {"text": "reduced down to only using 20% 26% of", "start": 1347.039, "duration": 6.201}, {"text": "the time and now Maine has has risen to", "start": 1350.679, "duration": 5.0}, {"text": "the top so in this case now that we're", "start": 1353.24, "duration": 4.559}, {"text": "done optimizing get number pack data", "start": 1355.679, "duration": 3.88}, {"text": "we'll probably want to go back and", "start": 1357.799, "duration": 4.681}, {"text": "optimize Main and by doing this by going", "start": 1359.559, "duration": 5.521}, {"text": "through several cycles of profiling and", "start": 1362.48, "duration": 5.12}, {"text": "optimizing profiling and optimizing I", "start": 1365.08, "duration": 3.719}, {"text": "believe we're able to get this code", "start": 1367.6, "duration": 4.92}, {"text": "running about 20 to 30 times faster and", "start": 1368.799, "duration": 6.201}, {"text": "that's not including any speed up that", "start": 1372.52, "duration": 5.0}, {"text": "we get from going parallel so that's", "start": 1375.0, "duration": 4.4}, {"text": "just the speed up of the underlying", "start": 1377.52, "duration": 4.48}, {"text": "serial", "start": 1379.4, "duration": 2.6}, {"text": "application so now we are going to do a", "start": 1382.32, "duration": 6.4}, {"text": "Hands-On exercise let me stop sharing so", "start": 1385.32, "duration": 6.16}, {"text": "I could bring up my", "start": 1388.72, "duration": 2.76}, {"text": "terminal so we're going to go back um to", "start": 1392.44, "duration": 5.719}, {"text": "taking a look at the slides again so you", "start": 1395.84, "duration": 5.12}, {"text": "want to go into the profiling SL", "start": 1398.159, "duration": 4.921}, {"text": "timebase sampling", "start": 1400.96, "duration": 5.599}, {"text": "directory so from here I'm going to", "start": 1403.08, "duration": 6.8}, {"text": "going to go into", "start": 1406.559, "duration": 3.321}, {"text": "performance and then into", "start": 1412.559, "duration": 4.681}, {"text": "profiling and into timebase", "start": 1418.919, "duration": 6.76}, {"text": "sampling and you're going to see code in", "start": 1423.48, "duration": 6.559}, {"text": "that directory um very simple example we", "start": 1425.679, "duration": 6.6}, {"text": "have a main program this is written in", "start": 1430.039, "duration": 4.681}, {"text": "Fortran but I think even if you're not a", "start": 1432.279, "duration": 4.561}, {"text": "Fortran programmer it will be simple", "start": 1434.72, "duration": 5.8}, {"text": "enough um that that you could follow", "start": 1436.84, "duration": 7.24}, {"text": "along we have a main program it calls", "start": 1440.52, "duration": 6.44}, {"text": "two sub routines and it will make two", "start": 1444.08, "duration": 6.24}, {"text": "calls to setin one and one call to sub", "start": 1446.96, "duration": 6.88}, {"text": "setin 2 and then these seines will make", "start": 1450.32, "duration": 8.599}, {"text": "end calls to function F1 and function", "start": 1453.84, "duration": 8.079}, {"text": "F2 and we're going to build this um", "start": 1458.919, "duration": 5.401}, {"text": "we're going to compile with the um Intel", "start": 1461.919, "duration": 6.12}, {"text": "for Trend compiler with the PG Flags so", "start": 1464.32, "duration": 7.8}, {"text": "that we get the instrumentation for", "start": 1468.039, "duration": 6.321}, {"text": "um for for for", "start": 1472.12, "duration": 5.039}, {"text": "GPR we're going to um set our", "start": 1474.36, "duration": 6.319}, {"text": "architecture DMR equals core avx2 this", "start": 1477.159, "duration": 5.481}, {"text": "is one of the things that you need to do", "start": 1480.679, "duration": 4.761}, {"text": "with the Intel compiler in order to get", "start": 1482.64, "duration": 6.32}, {"text": "the um avx2 instructions and then we're", "start": 1485.44, "duration": 6.56}, {"text": "going to compile it two ways both with", "start": 1488.96, "duration": 5.319}, {"text": "um with the default inlining and with", "start": 1492.0, "duration": 5.84}, {"text": "inlining turned off so if I look in the", "start": 1494.279, "duration": 5.4}, {"text": "the commands", "start": 1497.84, "duration": 4.839}, {"text": "GPR", "start": 1499.679, "duration": 3.0}, {"text": "file um you'll see that we have", "start": 1510.2, "duration": 4.12}, {"text": "everything that we need in order to do", "start": 1512.36, "duration": 2.799}, {"text": "this", "start": 1514.32, "duration": 3.959}, {"text": "example um and Cindy does the font size", "start": 1515.159, "duration": 4.721}, {"text": "look good or should I increase that a", "start": 1518.279, "duration": 2.76}, {"text": "little bit", "start": 1519.88, "duration": 3.919}, {"text": "more just a little bit more", "start": 1521.039, "duration": 5.64}, {"text": "just all", "start": 1523.799, "duration": 4.641}, {"text": "right", "start": 1526.679, "duration": 4.921}, {"text": "no let me go one", "start": 1528.44, "duration": 3.16}, {"text": "more thank you you're", "start": 1535.039, "duration": 4.201}, {"text": "welcome okay so the first thing we're", "start": 1541.48, "duration": 4.559}, {"text": "going to do is in the script we're going", "start": 1543.76, "duration": 4.519}, {"text": "to load the Intel", "start": 1546.039, "duration": 5.681}, {"text": "compiler and then we're going to um", "start": 1548.279, "duration": 5.441}, {"text": "execute where we're going to compile the", "start": 1551.72, "duration": 7.439}, {"text": "code you using- O3 and all of the um", "start": 1553.72, "duration": 7.8}, {"text": "all the things that come along with it", "start": 1559.159, "duration": 4.0}, {"text": "then we're going to we're going to time", "start": 1561.52, "duration": 5.2}, {"text": "the code and then we are going to after", "start": 1563.159, "duration": 5.88}, {"text": "we execute it we're going to run the GPR", "start": 1566.72, "duration": 4.079}, {"text": "command and we're going to take the", "start": 1569.039, "duration": 4.161}, {"text": "output and we're going to dump it into a", "start": 1570.799, "duration": 5.88}, {"text": "file that I'm naming profile intro", "start": 1573.2, "duration": 6.16}, {"text": "inline and then we're going to recompile", "start": 1576.679, "duration": 5.521}, {"text": "again and this time we're", "start": 1579.36, "duration": 5.08}, {"text": "explicitly going to turn off going to", "start": 1582.2, "duration": 3.44}, {"text": "turn off", "start": 1584.44, "duration": 3.839}, {"text": "inlining and we will time again", "start": 1585.64, "duration": 6.24}, {"text": "again and then we'll run gprof on the", "start": 1588.279, "duration": 6.681}, {"text": "version of the code we go with no", "start": 1591.88, "duration": 5.08}, {"text": "inlining I'll explain what inlining is", "start": 1594.96, "duration": 4.28}, {"text": "in just a couple minutes and dump that", "start": 1596.96, "duration": 7.24}, {"text": "into a profile intro no inline so let's", "start": 1599.24, "duration": 8.24}, {"text": "have everybody go ahead um Prett", "start": 1604.2, "duration": 5.479}, {"text": "straightforward just execute that", "start": 1607.48, "duration": 4.76}, {"text": "commands file so I could since it's", "start": 1609.679, "duration": 6.921}, {"text": "already executable just do slash", "start": 1612.24, "duration": 6.36}, {"text": "commands", "start": 1616.6, "duration": 4.6}, {"text": "GPR and that should that should only", "start": 1618.6, "duration": 4.4}, {"text": "take a minute or so to run so go ahead", "start": 1621.2, "duration": 4.04}, {"text": "and do that and let me know if you have", "start": 1623.0, "duration": 4.44}, {"text": "any", "start": 1625.24, "duration": 2.2}, {"text": "problems", "start": 1646.52, "duration": 3.0}, {"text": "and after you're done running that um", "start": 1659.799, "duration": 4.24}, {"text": "assuming that you're that you're doing", "start": 1662.559, "duration": 3.0}, {"text": "the exercises just go ahead and give me", "start": 1664.039, "duration": 5.201}, {"text": "a thumbs up to to let me know that it", "start": 1665.559, "duration": 3.681}, {"text": "worked", "start": 1676.519, "duration": 3.04}, {"text": "all right good I'm seeing a lot of", "start": 1678.44, "duration": 3.079}, {"text": "thumbs up that means the reservation was", "start": 1679.559, "duration": 4.36}, {"text": "working and I didn't screw anything up", "start": 1681.519, "duration": 6.241}, {"text": "with permissions oh I am seeing", "start": 1683.919, "duration": 6.721}, {"text": "a okay all right good that changed to a", "start": 1687.76, "duration": 5.639}, {"text": "thumbs up", "start": 1690.64, "duration": 2.759}, {"text": "excellent all right um Narron I see that", "start": 1698.32, "duration": 8.12}, {"text": "you have a um that you have a red", "start": 1702.36, "duration": 8.48}, {"text": "X name did you run into a problem no no", "start": 1706.44, "duration": 6.0}, {"text": "good all right", "start": 1710.84, "duration": 3.6}, {"text": "excellent all right so we are going to", "start": 1712.44, "duration": 5.32}, {"text": "go ahead look at the slides", "start": 1714.44, "duration": 3.32}, {"text": "again and what I love about this example", "start": 1718.44, "duration": 5.719}, {"text": "is that yeah and if you're interested", "start": 1721.96, "duration": 4.599}, {"text": "that this is what the code looks like um", "start": 1724.159, "duration": 5.201}, {"text": "this program is named intro it allocates", "start": 1726.559, "duration": 4.081}, {"text": "a few", "start": 1729.36, "duration": 4.559}, {"text": "arrays um here if you're not familiar", "start": 1730.64, "duration": 6.36}, {"text": "with for Tren the equivalent and C would", "start": 1733.919, "duration": 4.321}, {"text": "be would be be", "start": 1737.0, "duration": 4.279}, {"text": "Malik um we call sub", "start": 1738.24, "duration": 6.319}, {"text": "routine sub routines one and two um the", "start": 1741.279, "duration": 5.24}, {"text": "two calls the sub one have a different", "start": 1744.559, "duration": 3.801}, {"text": "order of the arguments then we", "start": 1746.519, "duration": 3.561}, {"text": "deallocate at the", "start": 1748.36, "duration": 4.439}, {"text": "end and then our sub", "start": 1750.08, "duration": 6.199}, {"text": "routines will take these arrays and it", "start": 1752.799, "duration": 5.6}, {"text": "will do a loop over the elements where", "start": 1756.279, "duration": 5.52}, {"text": "it calls function one and function two", "start": 1758.399, "duration": 5.88}, {"text": "and then SE two just does something a", "start": 1761.799, "duration": 5.201}, {"text": "little bit different but the real work", "start": 1764.279, "duration": 6.24}, {"text": "is done here in sorry in the functions", "start": 1767.0, "duration": 6.519}, {"text": "F1 and F2 this code doesn't really do", "start": 1770.519, "duration": 6.361}, {"text": "anything except take time um it's just a", "start": 1773.519, "duration": 8.321}, {"text": "mix of um square root and division", "start": 1776.88, "duration": 4.96}, {"text": "operations", "start": 1782.08, "duration": 5.28}, {"text": "so when we profile that code and", "start": 1784.399, "duration": 6.441}, {"text": "everybody should take a look at", "start": 1787.36, "duration": 5.159}, {"text": "the", "start": 1790.84, "duration": 8.48}, {"text": "um at the profile intro inline file", "start": 1792.519, "duration": 6.801}, {"text": "you will you will see the", "start": 1805.039, "duration": 5.441}, {"text": "um you'll you'll see the", "start": 1807.679, "duration": 5.6}, {"text": "output and not a lot of information in", "start": 1810.48, "duration": 5.919}, {"text": "here it just tells us that the program", "start": 1813.279, "duration": 6.64}, {"text": "Maine took 5 Seconds to run and 100% of", "start": 1816.399, "duration": 6.201}, {"text": "the time was spent in Maine which is a", "start": 1819.919, "duration": 6.0}, {"text": "little surprising because Maine does not", "start": 1822.6, "duration": 5.919}, {"text": "do very much all it does is allocate a", "start": 1825.919, "duration": 5.521}, {"text": "few arrays call a few sub routines so", "start": 1828.519, "duration": 7.481}, {"text": "what happened was um basically we we saw", "start": 1831.44, "duration": 8.959}, {"text": "no usage for sub one sub2 F1 and F2 and", "start": 1836.0, "duration": 6.279}, {"text": "if the timings that you're seeing in the", "start": 1840.399, "duration": 3.721}, {"text": "slides are different than what you're", "start": 1842.279, "duration": 3.481}, {"text": "actually getting keep in mind that we're", "start": 1844.12, "duration": 4.12}, {"text": "running a smaller problem during the", "start": 1845.76, "duration": 5.24}, {"text": "workshop just so that it will fit into", "start": 1848.24, "duration": 5.799}, {"text": "your portion of the shared", "start": 1851.0, "duration": 6.96}, {"text": "node so the first lesson here in", "start": 1854.039, "duration": 7.36}, {"text": "addition to learning about gprof is that", "start": 1857.96, "duration": 6.8}, {"text": "an optimizing compiler is going to make", "start": 1861.399, "duration": 5.441}, {"text": "transformations to your code that render", "start": 1864.76, "duration": 4.759}, {"text": "it unrecognizable so you probably got a", "start": 1866.84, "duration": 4.12}, {"text": "hint since I've been talking about", "start": 1869.519, "duration": 3.561}, {"text": "inlining and turning off", "start": 1870.96, "duration": 4.719}, {"text": "inlining that what the compiler did in", "start": 1873.08, "duration": 5.92}, {"text": "this case is it took the body of the", "start": 1875.679, "duration": 6.401}, {"text": "code say that function one and function", "start": 1879.0, "duration": 7.679}, {"text": "two and instead of make having um a loop", "start": 1882.08, "duration": 6.8}, {"text": "over call of that it took that body of", "start": 1886.679, "duration": 4.521}, {"text": "the code and it moved it directly into", "start": 1888.88, "duration": 5.84}, {"text": "the sub routines sub one and sub two in", "start": 1891.2, "duration": 6.079}, {"text": "addition sub one and sub two since they", "start": 1894.72, "duration": 5.16}, {"text": "were so simple were also inlined into", "start": 1897.279, "duration": 4.681}, {"text": "the main program so what I'm going to", "start": 1899.88, "duration": 6.08}, {"text": "end up with even before the code is say", "start": 1901.96, "duration": 5.76}, {"text": "compiled there's going to be a", "start": 1905.96, "duration": 3.959}, {"text": "rearrangement internally of the source", "start": 1907.72, "duration": 4.88}, {"text": "code so that this looks like one long", "start": 1909.919, "duration": 4.6}, {"text": "routine with everything inlined and", "start": 1912.6, "duration": 5.4}, {"text": "there is um as far as G is concerned", "start": 1914.519, "duration": 6.961}, {"text": "there is no longer an F1 and an F2 or a", "start": 1918.0, "duration": 6.399}, {"text": "sub one and a sub", "start": 1921.48, "duration": 2.919}, {"text": "two um so if if you ran that script", "start": 1925.44, "duration": 8.64}, {"text": "um you would also see that we have a", "start": 1931.039, "duration": 5.801}, {"text": "have an output file called um profile", "start": 1934.08, "duration": 5.719}, {"text": "intro no in line and I'll", "start": 1936.84, "duration": 7.24}, {"text": "go back here and open up that", "start": 1939.799, "duration": 4.281}, {"text": "one and here things look a little bit", "start": 1946.08, "duration": 5.76}, {"text": "more like what we expected um you could", "start": 1949.639, "duration": 4.841}, {"text": "follow along on either", "start": 1951.84, "duration": 6.24}, {"text": "the E either the slides or", "start": 1954.48, "duration": 6.76}, {"text": "um you know in your in your um output", "start": 1958.08, "duration": 7.76}, {"text": "file in this case we'll see that that F1", "start": 1961.24, "duration": 7.36}, {"text": "now accounted for about for almost 40%", "start": 1965.84, "duration": 6.48}, {"text": "of the runtime F2 for about 26 per", "start": 1968.6, "duration": 5.679}, {"text": "percent and again it's going to vary um", "start": 1972.32, "duration": 4.12}, {"text": "between you running the example with", "start": 1974.279, "duration": 5.24}, {"text": "this smaller problem size versus um the", "start": 1976.44, "duration": 6.68}, {"text": "original problem size but followed by F2", "start": 1979.519, "duration": 6.921}, {"text": "followed by um sub one and sub two and a", "start": 1983.12, "duration": 6.2}, {"text": "little bit of time in main so in this", "start": 1986.44, "duration": 6.68}, {"text": "case we explicitly turned off inlining", "start": 1989.32, "duration": 6.839}, {"text": "using the dash inline level equal zero", "start": 1993.12, "duration": 4.919}, {"text": "flight and now results are looking more", "start": 1996.159, "duration": 4.041}, {"text": "like what we expected and then as we go", "start": 1998.039, "duration": 4.64}, {"text": "down to the call graph we'll see that", "start": 2000.2, "duration": 5.8}, {"text": "main calls sub one and sub 2 which in", "start": 2002.679, "duration": 6.921}, {"text": "turn call F1 and F2 and want to point", "start": 2006.0, "duration": 4.519}, {"text": "out", "start": 2009.6, "duration": 3.64}, {"text": "here that down in the call", "start": 2010.519, "duration": 7.201}, {"text": "tree we could see that um of the in this", "start": 2013.24, "duration": 6.36}, {"text": "case of the of the three billion times", "start": 2017.72, "duration": 6.439}, {"text": "that F1 was called sub one called it 200", "start": 2019.6, "duration": 9.319}, {"text": "sorry called it two billion of those", "start": 2024.159, "duration": 4.76}, {"text": "times um another Quirk here is that the", "start": 2030.36, "duration": 5.919}, {"text": "time reported for the entire program", "start": 2034.36, "duration": 4.0}, {"text": "using the Lin next time utility you", "start": 2036.279, "duration": 4.681}, {"text": "might have noticed does not match what", "start": 2038.36, "duration": 5.199}, {"text": "we see in the gprof output so although", "start": 2040.96, "duration": 5.04}, {"text": "gprof did a reasonably good job", "start": 2043.559, "duration": 4.52}, {"text": "reporting on where where the time was", "start": 2046.0, "duration": 4.72}, {"text": "spent for truly accurate timings there's", "start": 2048.079, "duration": 5.08}, {"text": "no substitute for measuring directly and", "start": 2050.72, "duration": 4.52}, {"text": "by that I mean using the Linux time", "start": 2053.159, "duration": 4.161}, {"text": "command me", "start": 2055.24, "duration": 5.159}, {"text": "just go back", "start": 2057.32, "duration": 7.319}, {"text": "into commands GPR so that is um just", "start": 2060.399, "duration": 8.0}, {"text": "putting that um Linux time command", "start": 2064.639, "duration": 7.121}, {"text": "before your executable name um or", "start": 2068.399, "duration": 5.601}, {"text": "inserting instruments into your into", "start": 2071.76, "duration": 3.76}, {"text": "your code basically timers where you're", "start": 2074.0, "duration": 4.28}, {"text": "keeping track of the time before and", "start": 2075.52, "duration": 5.76}, {"text": "after blocks", "start": 2078.28, "duration": 3.0}, {"text": "code I should add that GPR really", "start": 2081.919, "duration": 5.121}, {"text": "doesn't add much overhead again these", "start": 2084.599, "duration": 6.24}, {"text": "are the timings that I got with um with", "start": 2087.04, "duration": 5.52}, {"text": "with with the with the larger problem", "start": 2090.839, "duration": 3.641}, {"text": "but it should hold for for the smaller", "start": 2092.56, "duration": 5.08}, {"text": "problem we're working with today", "start": 2094.48, "duration": 7.76}, {"text": "um this table here shows the run times", "start": 2097.64, "duration": 6.12}, {"text": "um with and", "start": 2102.24, "duration": 5.24}, {"text": "without um J GPR profiling and with", "start": 2103.76, "duration": 6.76}, {"text": "inlining enabled or inlining disabled", "start": 2107.48, "duration": 6.359}, {"text": "and we see that in both cases that the", "start": 2110.52, "duration": 6.44}, {"text": "um whether it's with or without inlining", "start": 2113.839, "duration": 6.76}, {"text": "that using GPR has very very little", "start": 2116.96, "duration": 5.32}, {"text": "impact on", "start": 2120.599, "duration": 4.401}, {"text": "the on the runtime and in fact what", "start": 2122.28, "duration": 4.559}, {"text": "you're seeing there in the end line just", "start": 2125.0, "duration": 4.72}, {"text": "in lining disabled column is probably a", "start": 2126.839, "duration": 5.201}, {"text": "little bit of an exaggeration just", "start": 2129.72, "duration": 4.32}, {"text": "because of the nature of this call that", "start": 2132.04, "duration": 3.6}, {"text": "sorry the nature of this code that we're", "start": 2134.04, "duration": 4.48}, {"text": "making these three billion calls to a", "start": 2135.64, "duration": 5.52}, {"text": "routine that takes very very little time", "start": 2138.52, "duration": 4.8}, {"text": "but even in that extreme case we see", "start": 2141.16, "duration": 5.8}, {"text": "that GPR adds very little", "start": 2143.32, "duration": 3.64}, {"text": "overhead all right so we're not going to", "start": 2147.68, "duration": 4.399}, {"text": "do this now I'm going to say this is", "start": 2149.76, "duration": 5.559}, {"text": "this could be your homework", "start": 2152.079, "duration": 6.641}, {"text": "problem is is I'm going to say go in", "start": 2155.319, "duration": 6.401}, {"text": "modify those functions F1 and F2 and", "start": 2158.72, "duration": 6.8}, {"text": "intro. F to use S and cosine and log", "start": 2161.72, "duration": 6.04}, {"text": "functions um it's probably going to take", "start": 2165.52, "duration": 5.44}, {"text": "longer to run um these trig functions", "start": 2167.76, "duration": 5.44}, {"text": "log functions are computationally", "start": 2170.96, "duration": 5.0}, {"text": "expensive and you may see some unusual", "start": 2173.2, "duration": 5.8}, {"text": "things in the grpr output um functions", "start": 2175.96, "duration": 5.68}, {"text": "that are um labeled or tagged with", "start": 2179.0, "duration": 5.16}, {"text": "svml so I won't tell you what that is", "start": 2181.64, "duration": 5.52}, {"text": "but maybe do a do a Google search", "start": 2184.16, "duration": 5.84}, {"text": "another thing that you can do is take", "start": 2187.16, "duration": 6.24}, {"text": "intro. F and break that into multiple", "start": 2190.0, "duration": 6.0}, {"text": "files and rerun", "start": 2193.4, "duration": 5.12}, {"text": "GPR and you know figure out what does", "start": 2196.0, "duration": 4.599}, {"text": "that tell you about the compiler's", "start": 2198.52, "duration": 4.599}, {"text": "inlining capabilities so you could take", "start": 2200.599, "duration": 4.841}, {"text": "intro. F and you could break a say into", "start": 2203.119, "duration": 6.041}, {"text": "two files um a main. f and a library. f", "start": 2205.44, "duration": 7.04}, {"text": "which contains sub one sub2 F1 and F2 or", "start": 2209.16, "duration": 6.28}, {"text": "you could break it into three files", "start": 2212.48, "duration": 6.56}, {"text": "main. f say subs. F that has subon one", "start": 2215.44, "duration": 7.12}, {"text": "and two and funks F F1 and F2 and you", "start": 2219.04, "duration": 6.72}, {"text": "can also explore other compilers the", "start": 2222.56, "duration": 8.0}, {"text": "aocc flang or the GCC G4 Trend compiler", "start": 2225.76, "duration": 6.24}, {"text": "like I said I'm going to leave that as", "start": 2230.56, "duration": 2.84}, {"text": "homework since we have a lot of things", "start": 2232.0, "duration": 3.04}, {"text": "to do but I think it will give you some", "start": 2233.4, "duration": 5.04}, {"text": "additional insights into um into what", "start": 2235.04, "duration": 6.319}, {"text": "the compiler can do um I'll give you the", "start": 2238.44, "duration": 5.84}, {"text": "punch line as you break this up into", "start": 2241.359, "duration": 6.161}, {"text": "multiple files the compiler will not be", "start": 2244.28, "duration": 5.4}, {"text": "able to do the inlining um that's a", "start": 2247.52, "duration": 3.92}, {"text": "little more complicated that's something", "start": 2249.68, "duration": 4.8}, {"text": "called interprocedural", "start": 2251.44, "duration": 3.04}, {"text": "optimization it's kind of hard for the", "start": 2254.68, "duration": 5.48}, {"text": "compiler to look across across multiple", "start": 2256.839, "duration": 6.28}, {"text": "files for the for these inlining um", "start": 2260.16, "duration": 5.439}, {"text": "opportunities but it is an active area", "start": 2263.119, "duration": 4.361}, {"text": "of research and I've seen some compilers", "start": 2265.599, "duration": 5.121}, {"text": "in the past that have tried to implement", "start": 2267.48, "duration": 6.48}, {"text": "that so it's been 40 years since GPR", "start": 2270.72, "duration": 4.84}, {"text": "came out you might be wondering is there", "start": 2273.96, "duration": 5.2}, {"text": "anything new we have a tool installed on", "start": 2275.56, "duration": 7.12}, {"text": "on expense it's called AMD uprof or", "start": 2279.16, "duration": 6.24}, {"text": "MPR that can give you a lot more detail", "start": 2282.68, "duration": 5.6}, {"text": "than GPR including low-level information", "start": 2285.4, "duration": 5.84}, {"text": "on cash misses Branch Miss predictions", "start": 2288.28, "duration": 5.64}, {"text": "Etc um I say we'll talk about this later", "start": 2291.24, "duration": 4.64}, {"text": "time permitting we probably won't get", "start": 2293.92, "duration": 4.199}, {"text": "that today but the", "start": 2295.88, "duration": 5.4}, {"text": "directories um the profiling directory", "start": 2298.119, "duration": 6.841}, {"text": "does have um upro examples in there and", "start": 2301.28, "duration": 5.6}, {"text": "I have some slides at the end of this", "start": 2304.96, "duration": 3.52}, {"text": "presentation so this has really been", "start": 2306.88, "duration": 5.0}, {"text": "shortened down from a you know roughly", "start": 2308.48, "duration": 6.48}, {"text": "half day talk to fit into a 2our or so", "start": 2311.88, "duration": 5.32}, {"text": "time", "start": 2314.96, "duration": 2.24}, {"text": " okay so we're going to talk about", "start": 2319.4, "duration": 5.76}, {"text": "actual um strategies that we can use for", "start": 2321.96, "duration": 5.52}, {"text": "for for toning your code we're going to", "start": 2325.16, "duration": 3.679}, {"text": "give a little bit of background on the", "start": 2327.48, "duration": 3.639}, {"text": "memory hierarchy and effective use of", "start": 2328.839, "duration": 4.881}, {"text": "cache we'll talk about Loop level", "start": 2331.119, "duration": 4.401}, {"text": "optimizations something and I'm sure", "start": 2333.72, "duration": 3.52}, {"text": "there's a more technical name for this", "start": 2335.52, "duration": 3.76}, {"text": "but I call it optimizing for the common", "start": 2337.24, "duration": 4.32}, {"text": "case force reductions and", "start": 2339.28, "duration": 4.92}, {"text": "interprocedural", "start": 2341.56, "duration": 2.64}, {"text": "optimizations so before we get into into", "start": 2346.52, "duration": 4.2}, {"text": "any specific techniques we're going to", "start": 2349.16, "duration": 2.919}, {"text": "talk a little bit about the memory", "start": 2350.72, "duration": 3.44}, {"text": "hierarchy and the difference between", "start": 2352.079, "duration": 5.161}, {"text": "memory bound codes and compute bound", "start": 2354.16, "duration": 6.08}, {"text": "codes so in a memory bound code it's", "start": 2357.24, "duration": 4.92}, {"text": "going to be the rate at which data can", "start": 2360.24, "duration": 4.24}, {"text": "be delivered to the CPU that's going to", "start": 2362.16, "duration": 5.32}, {"text": "be the limiting factor when we have a", "start": 2364.48, "duration": 5.359}, {"text": "memory bound code our goal is going to", "start": 2367.48, "duration": 6.04}, {"text": "be is going to be to apply cach level", "start": 2369.839, "duration": 6.0}, {"text": "optimizations so that the CPU is not", "start": 2373.52, "duration": 3.64}, {"text": "stored for", "start": 2375.839, "duration": 5.121}, {"text": "data for compute bound codes in that", "start": 2377.16, "duration": 5.679}, {"text": "case the performance of the processor", "start": 2380.96, "duration": 3.879}, {"text": "the clock speed the number of math", "start": 2382.839, "duration": 4.0}, {"text": "operations you could do per cycle is", "start": 2384.839, "duration": 4.641}, {"text": "going to be the limiting factor so in", "start": 2386.839, "duration": 4.401}, {"text": "these compute bound codes data can be", "start": 2389.48, "duration": 4.56}, {"text": "delivered fast enough but the processor", "start": 2391.24, "duration": 4.879}, {"text": "can't keep up and our goal is going to", "start": 2394.04, "duration": 4.24}, {"text": "be for a compute bound code to reduce", "start": 2396.119, "duration": 4.441}, {"text": "the amount of computation done on a", "start": 2398.28, "duration": 4.96}, {"text": "given piece of data what we're going to", "start": 2400.56, "duration": 5.519}, {"text": "find though is in real applications", "start": 2403.24, "duration": 4.96}, {"text": "we're often dealing with a combination", "start": 2406.079, "duration": 4.681}, {"text": "of compute and memory bound kernels so", "start": 2408.2, "duration": 4.32}, {"text": "I'm just going to back up a little bit", "start": 2410.76, "duration": 3.76}, {"text": "here and we're going to look at", "start": 2412.52, "duration": 5.16}, {"text": "the um look look at the code we had been", "start": 2414.52, "duration": 5.24}, {"text": "working at I'm going to say this is a", "start": 2417.68, "duration": 6.28}, {"text": "classic example of a compute bound code", "start": 2419.76, "duration": 7.24}, {"text": "so for each for each bit of data we're", "start": 2423.96, "duration": 5.24}, {"text": "doing a lot of work for example when we", "start": 2427.0, "duration": 4.4}, {"text": "call function one it's going to be a", "start": 2429.2, "duration": 4.119}, {"text": "square root of a square root of a number", "start": 2431.4, "duration": 4.8}, {"text": "divided by another square root plus um", "start": 2433.319, "duration": 5.161}, {"text": "but plus the division of two numbers", "start": 2436.2, "duration": 4.56}, {"text": "once we replace some of these square", "start": 2438.48, "duration": 5.92}, {"text": "roots with the signs and cosiness and", "start": 2440.76, "duration": 6.2}, {"text": "um and and logarithms it's going to", "start": 2444.4, "duration": 6.4}, {"text": "become even um even more expensive and", "start": 2446.96, "duration": 5.72}, {"text": "we're going to be doing a lot of work", "start": 2450.8, "duration": 4.519}, {"text": "for each of the for for each piece of", "start": 2452.68, "duration": 5.08}, {"text": "data um we're going to be the next", "start": 2455.319, "duration": 3.76}, {"text": "example though we're actually going to", "start": 2457.76, "duration": 3.599}, {"text": "run is going to be the opposite extreme", "start": 2459.079, "duration": 4.641}, {"text": "and that's memory bound where we're", "start": 2461.359, "duration": 4.641}, {"text": "reading in data and doing very very", "start": 2463.72, "duration": 4.8}, {"text": "little work on it and this is where the", "start": 2466.0, "duration": 4.16}, {"text": "cach level optimizations are going to", "start": 2468.52, "duration": 2.839}, {"text": "come", "start": 2470.16, "duration": 5.64}, {"text": "in so some of you may have seen um may", "start": 2471.359, "duration": 7.041}, {"text": "have seen figures like this it's the", "start": 2475.8, "duration": 4.039}, {"text": "computer memory", "start": 2478.4, "duration": 4.84}, {"text": "hierarchy um often drawn as a pyramid as", "start": 2479.839, "duration": 7.321}, {"text": "we go as we go to the top of the pyramid", "start": 2483.24, "duration": 8.4}, {"text": "the um that the memory or the storage is", "start": 2487.16, "duration": 6.959}, {"text": "faster but it's much more expensive and", "start": 2491.64, "duration": 4.719}, {"text": "at that very top we have what are called", "start": 2494.119, "duration": 5.921}, {"text": "registers these are on the CPU they hold", "start": 2496.359, "duration": 6.081}, {"text": "pieces of data that are immediately", "start": 2500.04, "duration": 5.039}, {"text": "accessible in the next clock cycle by", "start": 2502.44, "duration": 5.639}, {"text": "the by the CPU and once we get data into", "start": 2505.079, "duration": 5.28}, {"text": "the register we'd like to reuse it as", "start": 2508.079, "duration": 5.201}, {"text": "much as possible registers are very very", "start": 2510.359, "duration": 5.24}, {"text": "limited I've lost track of this but I", "start": 2513.28, "duration": 4.52}, {"text": "believe that registers", "start": 2515.599, "duration": 6.281}, {"text": "are oh I think under a 100 registers per", "start": 2517.8, "duration": 6.16}, {"text": "per C per CPU", "start": 2521.88, "duration": 4.68}, {"text": "core so very little is going to fit into", "start": 2523.96, "duration": 4.96}, {"text": "register the next level in the hierarchy", "start": 2526.56, "duration": 3.799}, {"text": "is the L1", "start": 2528.92, "duration": 4.28}, {"text": "cache and L1 cache is small this is", "start": 2530.359, "duration": 5.281}, {"text": "going to vary by the processor but it's", "start": 2533.2, "duration": 4.639}, {"text": "typically on the order of about 10", "start": 2535.64, "duration": 5.76}, {"text": "kilobytes which is Tiny But data that's", "start": 2537.839, "duration": 6.041}, {"text": "in the L1 cache could be accessed very", "start": 2541.4, "duration": 5.159}, {"text": "quickly so register data and register is", "start": 2543.88, "duration": 5.28}, {"text": "available on the next clock cycle L1", "start": 2546.559, "duration": 5.8}, {"text": "cache is on the order of nanc so a few", "start": 2549.16, "duration": 5.64}, {"text": "clock Cycles then below that we have the", "start": 2552.359, "duration": 6.441}, {"text": "L2 cache which is larger typically um a", "start": 2554.8, "duration": 6.84}, {"text": "few hundred kilobytes little bit further", "start": 2558.8, "duration": 6.519}, {"text": "away um it might take NCS", "start": 2561.64, "duration": 7.959}, {"text": "or you know get given a 3 gigahertz", "start": 2565.319, "duration": 7.081}, {"text": "clock speed you know 10 NCS would be", "start": 2569.599, "duration": 6.601}, {"text": "about 30 clock Cycles so having an L L2", "start": 2572.4, "duration": 6.84}, {"text": "cach isn't bad um but it's definitely", "start": 2576.2, "duration": 5.48}, {"text": "worse um than than having the data n one", "start": 2579.24, "duration": 4.2}, {"text": "cache and then you go further out and we", "start": 2581.68, "duration": 6.159}, {"text": "have an lk3 cache which is um typically", "start": 2583.44, "duration": 6.72}, {"text": "tens of megabytes and a little bit", "start": 2587.839, "duration": 6.76}, {"text": "further away still L1 L2 and L3 these", "start": 2590.16, "duration": 7.32}, {"text": "are all um part of the part of the", "start": 2594.599, "duration": 4.681}, {"text": "processor Hardware they're right there", "start": 2597.48, "duration": 5.16}, {"text": "on the die it accounts for a lot of that", "start": 2599.28, "duration": 5.2}, {"text": "um for for a lot of the transistors on", "start": 2602.64, "duration": 4.32}, {"text": "that die now you might be wondering why", "start": 2604.48, "duration": 4.92}, {"text": "don't we just build more L1 and L2 and", "start": 2606.96, "duration": 4.879}, {"text": "L3 caches and these have been growing", "start": 2609.4, "duration": 4.36}, {"text": "over the years but it's very very", "start": 2611.839, "duration": 3.801}, {"text": "expensive it's part of the fabrication", "start": 2613.76, "duration": 5.48}, {"text": "process and you can only get so much um", "start": 2615.64, "duration": 6.28}, {"text": "so much cash on that die then beyond", "start": 2619.24, "duration": 5.72}, {"text": "that we go out to Dam so this is what", "start": 2621.92, "duration": 5.48}, {"text": "you think of is main memory this is", "start": 2624.96, "duration": 4.28}, {"text": "going to be in the order of tens to", "start": 2627.4, "duration": 3.8}, {"text": "hundreds of gigabytes if you're working", "start": 2629.24, "duration": 4.2}, {"text": "on expense and you had an entire node to", "start": 2631.2, "duration": 5.52}, {"text": "yourself you would have access to 2 56", "start": 2633.44, "duration": 6.08}, {"text": "GB since we're sharing I", "start": 2636.72, "duration": 6.359}, {"text": "believe um our reservation gives you", "start": 2639.52, "duration": 6.24}, {"text": "access to a quarter of a node so you'll", "start": 2643.079, "duration": 6.161}, {"text": "be able to access 64 gigabytes and then", "start": 2645.76, "duration": 5.559}, {"text": "finally at the bottom of the hierarchy", "start": 2649.24, "duration": 4.64}, {"text": "is external storage devices and that", "start": 2651.319, "duration": 5.841}, {"text": "could be solid state drives in our case", "start": 2653.88, "duration": 5.679}, {"text": "we have um one on each of the each of", "start": 2657.16, "duration": 5.28}, {"text": "the compute nodes very fast compared to", "start": 2659.559, "duration": 5.52}, {"text": "the hard disks so access time is on an", "start": 2662.44, "duration": 5.2}, {"text": "order of 100 m microseconds compared to", "start": 2665.079, "duration": 4.401}, {"text": "milliseconds going all the way out to", "start": 2667.64, "duration": 4.919}, {"text": "hard drive but still very slow compared", "start": 2669.48, "duration": 5.359}, {"text": "to", "start": 2672.559, "duration": 5.201}, {"text": "um spots higher higher in the data", "start": 2674.839, "duration": 5.641}, {"text": "hierarchy so essentially we go at the", "start": 2677.76, "duration": 5.799}, {"text": "top from Fast small and very expensive", "start": 2680.48, "duration": 6.359}, {"text": "to slower larger and", "start": 2683.559, "duration": 7.76}, {"text": "cheaper and in order to um in order to", "start": 2686.839, "duration": 6.121}, {"text": "get good performance out of a code", "start": 2691.319, "duration": 4.24}, {"text": "particularly memory bound codes we need", "start": 2692.96, "duration": 7.399}, {"text": "to take advantage of two cach Essentials", "start": 2695.559, "duration": 6.881}, {"text": "now if you're a computer scientist and", "start": 2700.359, "duration": 4.2}, {"text": "you take your Hardware class you are", "start": 2702.44, "duration": 4.48}, {"text": "going to go very very very deep into", "start": 2704.559, "duration": 6.081}, {"text": "cach you'll learn about um you know cash", "start": 2706.92, "duration": 6.36}, {"text": "archite architectures and replacement", "start": 2710.64, "duration": 5.32}, {"text": "strategies and so on but for application", "start": 2713.28, "duration": 4.64}, {"text": "developers you really just need to know", "start": 2715.96, "duration": 4.24}, {"text": "these two things there's temporal", "start": 2717.92, "duration": 4.72}, {"text": "locality which we try to exploit and", "start": 2720.2, "duration": 4.48}, {"text": "that means that data that was recently", "start": 2722.64, "duration": 4.32}, {"text": "accessed is lik to be used again in the", "start": 2724.68, "duration": 4.439}, {"text": "near future so in order to take", "start": 2726.96, "duration": 4.44}, {"text": "advantage of temporal locality once we", "start": 2729.119, "duration": 5.041}, {"text": "load data into cach it's going to remain", "start": 2731.4, "duration": 4.919}, {"text": "there until it has to be pushed out to", "start": 2734.16, "duration": 5.64}, {"text": "make room for new data so if we go back", "start": 2736.319, "duration": 7.881}, {"text": "to um our our hierarchy you let's say", "start": 2739.8, "duration": 6.4}, {"text": "that we are", "start": 2744.2, "duration": 5.96}, {"text": "processing um you know 10 10 gigabytes", "start": 2746.2, "duration": 5.56}, {"text": "of data that that fits in the main", "start": 2750.16, "duration": 4.0}, {"text": "memory 10 gigabytes is obviously much", "start": 2751.76, "duration": 6.359}, {"text": "much larger than the L1 L2 or L3 caches", "start": 2754.16, "duration": 6.399}, {"text": "we need to move it into cash before it", "start": 2758.119, "duration": 5.24}, {"text": "could be used by the CPU but since it's", "start": 2760.559, "duration": 5.0}, {"text": "so much larger that 10 gabt is so much", "start": 2763.359, "duration": 4.441}, {"text": "larger than any of those cach levels", "start": 2765.559, "duration": 3.681}, {"text": "whatever was in there earlier is", "start": 2767.8, "duration": 2.72}, {"text": "eventually going to have to be pushed", "start": 2769.24, "duration": 4.44}, {"text": "down but again if we get put something", "start": 2770.52, "duration": 7.039}, {"text": "into Cash we'd like to use it as much as", "start": 2773.68, "duration": 6.6}, {"text": "possible now spatial", "start": 2777.559, "duration": 4.921}, {"text": "locality the idea behind this is that if", "start": 2780.28, "duration": 4.88}, {"text": "a piece of data is accessed it's likely", "start": 2782.48, "duration": 4.639}, {"text": "that neighboring data elements in memory", "start": 2785.16, "duration": 4.959}, {"text": "will also need will also be needed so to", "start": 2787.119, "duration": 5.321}, {"text": "take advantage of spatial locality cach", "start": 2790.119, "duration": 5.081}, {"text": "is organized into lines I say here", "start": 2792.44, "duration": 5.52}, {"text": "typically 64 bytes in fact every", "start": 2795.2, "duration": 5.84}, {"text": "processor I've ever seen has cach lines", "start": 2797.96, "duration": 5.399}, {"text": "of 64 byes although I'm sure that there", "start": 2801.04, "duration": 5.48}, {"text": "are special purpose processors maybe in", "start": 2803.359, "duration": 4.841}, {"text": "processors using embed in Computing that", "start": 2806.52, "duration": 4.96}, {"text": "are a little bit different but for HPC", "start": 2808.2, "duration": 5.48}, {"text": "systems you are going to see 64 byte", "start": 2811.48, "duration": 5.2}, {"text": "cach lines and we don't love Lo just", "start": 2813.68, "duration": 5.08}, {"text": "that piece of data we need we load the", "start": 2816.68, "duration": 5.159}, {"text": "entire cach line so our goal on cach L", "start": 2818.76, "duration": 4.92}, {"text": "optimization is very simple we are going", "start": 2821.839, "duration": 4.161}, {"text": "to exploit these principles of temporal", "start": 2823.68, "duration": 4.52}, {"text": "and spatial locality to minimize data", "start": 2826.0, "duration": 3.68}, {"text": "access", "start": 2828.2, "duration": 5.84}, {"text": "times and before we go on do we have any", "start": 2829.68, "duration": 4.36}, {"text": "questionss no questions in the chat um", "start": 2836.0, "duration": 8.4}, {"text": "okay great thank you all right", "start": 2839.2, "duration": 5.2}, {"text": "so", "start": 2844.72, "duration": 3.839}, {"text": "but moving on so we're going to start", "start": 2846.48, "duration": 4.839}, {"text": "with with one-dimensional arrays um this", "start": 2848.559, "duration": 4.961}, {"text": "is a little example little snippet of C", "start": 2851.319, "duration": 4.601}, {"text": "code so a one-dimensional array is", "start": 2853.52, "duration": 6.079}, {"text": "stored as a block of contiguous data in", "start": 2855.92, "duration": 7.24}, {"text": "memory so let's say that we um to", "start": 2859.599, "duration": 8.72}, {"text": "decided to allocate an array of 1004 by", "start": 2863.16, "duration": 9.52}, {"text": "integers so we um you we we", "start": 2868.319, "duration": 7.721}, {"text": "use we use the malet command we we C C", "start": 2872.68, "duration": 6.36}, {"text": "it to ctin integer pointer we allocate", "start": 2876.04, "duration": 6.319}, {"text": "100 of these integers so in memory what", "start": 2879.04, "duration": 5.72}, {"text": "we don't know what the absolute location", "start": 2882.359, "duration": 4.48}, {"text": "is in memory but we know the relative", "start": 2884.76, "duration": 4.72}, {"text": "location of these pieces of data so", "start": 2886.839, "duration": 5.601}, {"text": "starting with an offset of zero we have", "start": 2889.48, "duration": 5.68}, {"text": "our first element X of zero and then", "start": 2892.44, "duration": 6.119}, {"text": "offset by four bytes in memory is X of", "start": 2895.16, "duration": 8.52}, {"text": "one and then X of 2 x of 3 and so on so", "start": 2898.559, "duration": 8.28}, {"text": "when we're working with 1D arrays", "start": 2903.68, "duration": 5.12}, {"text": "um cache optimization is very very", "start": 2906.839, "duration": 3.641}, {"text": "straightforward and you're probably", "start": 2908.8, "duration": 4.519}, {"text": "going to write optimal code even without", "start": 2910.48, "duration": 5.56}, {"text": "trying when possible just access the", "start": 2913.319, "duration": 5.28}, {"text": "elements in order so I show a simple", "start": 2916.04, "duration": 4.519}, {"text": "Loop here where I'm taking each of those", "start": 2918.599, "duration": 4.841}, {"text": "elements of of the array X and I'm", "start": 2920.559, "duration": 4.881}, {"text": "incrementing them by 100 so I have my", "start": 2923.44, "duration": 6.6}, {"text": "for loop I equals z i less than n i++ so", "start": 2925.44, "duration": 6.919}, {"text": "element by element I am updating the", "start": 2930.04, "duration": 7.559}, {"text": "values of the values of X Y", "start": 2932.359, "duration": 5.24}, {"text": "so what's going on with with regards to", "start": 2939.799, "duration": 7.0}, {"text": "cash so again assuming 64 byte cash", "start": 2943.119, "duration": 6.321}, {"text": "lines and four byte integers we're going", "start": 2946.799, "duration": 4.121}, {"text": "to start off our cash is going to be", "start": 2949.44, "duration": 2.84}, {"text": "empty we're not going to have any of", "start": 2950.92, "duration": 3.32}, {"text": "this data in cash I'm going to take", "start": 2952.28, "duration": 5.519}, {"text": "elements x0 through X15 and I'm going to", "start": 2954.24, "duration": 6.8}, {"text": "load them to cash though so those 16 4", "start": 2957.799, "duration": 5.481}, {"text": "byte elements are going to fill a cach", "start": 2961.04, "duration": 4.68}, {"text": "line and now I'm going to increment", "start": 2963.28, "duration": 4.799}, {"text": "element zero element one element two", "start": 2965.72, "duration": 6.28}, {"text": "through element 15 then I get to element", "start": 2968.079, "duration": 6.52}, {"text": "16 it's not available so now I'm going", "start": 2972.0, "duration": 5.599}, {"text": "to load another cach line I'll load X of", "start": 2974.599, "duration": 5.841}, {"text": "16 through X of 31 into cache and then", "start": 2977.599, "duration": 4.641}, {"text": "I'll increment those", "start": 2980.44, "duration": 5.8}, {"text": "elements now in reality um and and this", "start": 2982.24, "duration": 7.4}, {"text": "is um what one of the um really Advanced", "start": 2986.24, "duration": 6.44}, {"text": "features of of modern processors is that", "start": 2989.64, "duration": 5.04}, {"text": "they can recognize the pattern of data", "start": 2992.68, "duration": 4.679}, {"text": "access and and prefetch the cach line", "start": 2994.68, "duration": 5.32}, {"text": "next cach line before it's needed so in", "start": 2997.359, "duration": 4.841}, {"text": "this case while I'm working on elements", "start": 3000.0, "duration": 4.76}, {"text": "0 through 15 I've gone through a few", "start": 3002.2, "duration": 5.08}, {"text": "iterations of that Loop there's logic", "start": 3004.76, "duration": 5.559}, {"text": "within the processor that says hey I", "start": 3007.28, "duration": 4.559}, {"text": "kind of figured out what we're doing we", "start": 3010.319, "duration": 4.48}, {"text": "are accessing these elements in order so", "start": 3011.839, "duration": 5.201}, {"text": "I'm going to if I could if the memory", "start": 3014.799, "duration": 4.921}, {"text": "bandwidth allows I'm going to get that", "start": 3017.04, "duration": 6.559}, {"text": "next cach line ready in this case the", "start": 3019.72, "duration": 5.879}, {"text": "processor is probably going to be is", "start": 3023.599, "duration": 3.24}, {"text": "probably going to be starved for data", "start": 3025.599, "duration": 3.601}, {"text": "because we're doing so little work on", "start": 3026.839, "duration": 5.321}, {"text": "each on on each word but if we were", "start": 3029.2, "duration": 6.44}, {"text": "doing a more complex operation on each", "start": 3032.16, "duration": 6.6}, {"text": "of these on each of these elements say", "start": 3035.64, "duration": 5.24}, {"text": "instead of incrementing by 100 but", "start": 3038.76, "duration": 4.359}, {"text": "calculating SS and cosiness and", "start": 3040.88, "duration": 4.6}, {"text": "logarithms and powers in that case we", "start": 3043.119, "duration": 4.44}, {"text": "would be CPU limited and it would be", "start": 3045.48, "duration": 4.68}, {"text": "nice to have that data in Cache ready", "start": 3047.559, "duration": 4.881}, {"text": "for when we need", "start": 3050.16, "duration": 4.8}, {"text": "it now one of the questions that often", "start": 3052.44, "duration": 4.76}, {"text": "comes up this point in the in the talk", "start": 3054.96, "duration": 5.68}, {"text": "is do I have control over cash so for", "start": 3057.2, "duration": 7.68}, {"text": "example can I say um", "start": 3060.64, "duration": 7.4}, {"text": "sorry okay can I say I want to load a", "start": 3064.88, "duration": 6.32}, {"text": "particular um location memory into cache", "start": 3068.04, "duration": 5.799}, {"text": "so you don't um modern processors", "start": 3071.2, "duration": 4.879}, {"text": "directly Implement Advanced cash", "start": 3073.839, "duration": 4.401}, {"text": "replacement strategies they do Branch", "start": 3076.079, "duration": 3.681}, {"text": "prediction they do the", "start": 3078.24, "duration": 3.76}, {"text": "prefetch um you don't have control over", "start": 3079.76, "duration": 4.76}, {"text": "that again maybe in some embedded", "start": 3082.0, "duration": 4.68}, {"text": "computing appc ations you know where", "start": 3084.52, "duration": 3.559}, {"text": "you're actually designing the hardware", "start": 3086.68, "duration": 4.2}, {"text": "and you're working at the at a very very", "start": 3088.079, "duration": 6.161}, {"text": "low level you might be able to but on", "start": 3090.88, "duration": 6.52}, {"text": "HPC systems using you know standard", "start": 3094.24, "duration": 4.879}, {"text": "languages you're not going to have that", "start": 3097.4, "duration": 4.399}, {"text": "level of control so the best you can do", "start": 3099.119, "duration": 5.44}, {"text": "is to follow standard practices to", "start": 3101.799, "duration": 4.481}, {"text": "exploit the temporal and spatial", "start": 3104.559, "duration": 4.641}, {"text": "locality and in some instances choose", "start": 3106.28, "duration": 7.319}, {"text": "optimal parameters based on your cache", "start": 3109.2, "duration": 6.359}, {"text": "sizes so now we're going to switch to", "start": 3113.599, "duration": 3.681}, {"text": "something a little more complicated and", "start": 3115.559, "duration": 4.681}, {"text": "that is multi-dimensional arrays so", "start": 3117.28, "duration": 4.72}, {"text": "pretty much every every modern language", "start": 3120.24, "duration": 3.839}, {"text": "gives you a way to to write a", "start": 3122.0, "duration": 4.4}, {"text": "multi-dimensional array this is really", "start": 3124.079, "duration": 5.441}, {"text": "handy if you're doing um say", "start": 3126.4, "duration": 5.48}, {"text": "computational flow Dynamics or Magneto", "start": 3129.52, "duration": 4.52}, {"text": "hydrodynamics climate or weather", "start": 3131.88, "duration": 3.919}, {"text": "something where you're solving a problem", "start": 3134.04, "duration": 5.68}, {"text": "on a grid it's much easier to think in", "start": 3135.799, "duration": 6.481}, {"text": "terms of a multi of a multi-dimensional", "start": 3139.72, "duration": 4.879}, {"text": "array but from the computer's point of", "start": 3142.28, "duration": 4.64}, {"text": "view there is no such thing as a 2d", "start": 3144.599, "duration": 5.72}, {"text": "array it's what we call syntactic sugar", "start": 3146.92, "duration": 5.399}, {"text": "and it's provided as a convenience to", "start": 3150.319, "duration": 5.0}, {"text": "the programmer so under the hood those", "start": 3152.319, "duration": 5.321}, {"text": "multi-dimensional rays are just stored", "start": 3155.319, "duration": 6.321}, {"text": "as linear blocks of data and this is one", "start": 3157.64, "duration": 6.88}, {"text": "of the biggest sticking points when it", "start": 3161.64, "duration": 4.439}, {"text": "when it comes to", "start": 3164.52, "duration": 4.88}, {"text": "Performance is unfortunately there are", "start": 3166.079, "duration": 4.24}, {"text": "two", "start": 3169.4, "duration": 3.8}, {"text": "conventions and neither of them I think", "start": 3170.319, "duration": 6.0}, {"text": "is ever going to change in our lifetime", "start": 3173.2, "duration": 5.68}, {"text": "you could think of this as as driving", "start": 3176.319, "duration": 4.841}, {"text": "you know in the the US and Canada and", "start": 3178.88, "duration": 5.12}, {"text": "most of the European Mainland we drive", "start": 3181.16, "duration": 5.199}, {"text": "on the right side of the road in the UK", "start": 3184.0, "duration": 4.16}, {"text": "and India and Australia and the former", "start": 3186.359, "duration": 3.24}, {"text": "commonwealth countries and I believe", "start": 3188.16, "duration": 4.24}, {"text": "Japan they drive on the leftand side", "start": 3189.599, "duration": 5.281}, {"text": "we're we're pretty much stuck with that", "start": 3192.4, "duration": 4.919}, {"text": "um it's it's unlikely that any country", "start": 3194.88, "duration": 4.36}, {"text": "is going to change their mind and say", "start": 3197.319, "duration": 3.321}, {"text": "you know come come over to the other", "start": 3199.24, "duration": 4.04}, {"text": "side and that's the same situation with", "start": 3200.64, "duration": 5.439}, {"text": "programming languages they fall into two", "start": 3203.28, "duration": 3.68}, {"text": "big", "start": 3206.079, "duration": 3.641}, {"text": "categories column major order and row", "start": 3206.96, "duration": 5.96}, {"text": "major order so column major order is", "start": 3209.72, "duration": 4.879}, {"text": "what you're going to see with for Trend", "start": 3212.92, "duration": 4.32}, {"text": "R and mat lab so if I have this", "start": 3214.599, "duration": 5.401}, {"text": "multi-dimensional array the first or the", "start": 3217.24, "duration": 6.359}, {"text": "leftmost index is going to vary the", "start": 3220.0, "duration": 5.16}, {"text": "fastest", "start": 3223.599, "duration": 4.921}, {"text": "um so if I have this if I have this 2D", "start": 3225.16, "duration": 6.0}, {"text": "array I'm going to be going down the", "start": 3228.52, "duration": 5.079}, {"text": "columns so it's going to be and when", "start": 3231.16, "duration": 5.6}, {"text": "this is laid out and as a 1D um", "start": 3233.599, "duration": 6.52}, {"text": "structure in memory it's going to be 147", "start": 3236.76, "duration": 5.839}, {"text": "258", "start": 3240.119, "duration": 4.72}, {"text": "369 row major", "start": 3242.599, "duration": 5.041}, {"text": "order uses the opposite convention here", "start": 3244.839, "duration": 5.081}, {"text": "the last or the rightmost index vares", "start": 3247.64, "duration": 4.159}, {"text": "the fastest and you'll see this in", "start": 3249.92, "duration": 5.72}, {"text": "Python Mathematica and C your C++ and", "start": 3251.799, "duration": 6.641}, {"text": "any of the C- like languages so again", "start": 3255.64, "duration": 6.36}, {"text": "taking that same 3x3 array in this this", "start": 3258.44, "duration": 5.72}, {"text": "case we're going to be going across the", "start": 3262.0, "duration": 6.799}, {"text": "rows so it'll be 1 2 3 4 5 6 7 8 9", "start": 3264.16, "duration": 7.8}, {"text": "that's how it will be stored as that 1D", "start": 3268.799, "duration": 8.161}, {"text": "structure in data so what this means is", "start": 3271.96, "duration": 7.28}, {"text": "I have to be careful how I write my", "start": 3276.96, "duration": 4.76}, {"text": "Loops in particular my Loop nesting when", "start": 3279.24, "duration": 4.359}, {"text": "I work with these multi-dimensional", "start": 3281.72, "duration": 5.079}, {"text": "arrays so on the top I'm showing", "start": 3283.599, "duration": 5.76}, {"text": "properly written for Trend code where we", "start": 3286.799, "duration": 5.961}, {"text": "are adding two arrays element by element", "start": 3289.359, "duration": 6.24}, {"text": "so you'll notice we have the outermost", "start": 3292.76, "duration": 7.24}, {"text": "Loop is is over J the innermost Loop is", "start": 3295.599, "duration": 7.561}, {"text": "over I and then we're calculating Z J", "start": 3300.0, "duration": 5.96}, {"text": "equals a XI J plus yig", "start": 3303.16, "duration": 6.159}, {"text": "J If This Were C", "start": 3305.96, "duration": 7.48}, {"text": "code um If This Were C code I would need", "start": 3309.319, "duration": 7.561}, {"text": "to flip those flip those loops around so", "start": 3313.44, "duration": 6.119}, {"text": "my outermost Loop is going to be over I", "start": 3316.88, "duration": 3.959}, {"text": "I've got the 4", "start": 3319.559, "duration": 4.681}, {"text": "I the inner loop is going to be 4J and", "start": 3320.839, "duration": 8.081}, {"text": "now I have my Z = xig +", "start": 3324.24, "duration": 4.68}, {"text": "yig all right so in the in the next", "start": 3331.359, "duration": 5.2}, {"text": "example we're going to be compiling cr4", "start": 3334.2, "duration": 6.24}, {"text": "Trend codes using the Intel compilers um", "start": 3336.559, "duration": 6.361}, {"text": "and the AMD compilers so the Intel is", "start": 3340.44, "duration": 5.919}, {"text": "going to be the ICC and ifor AMD aocc", "start": 3342.92, "duration": 6.04}, {"text": "compilers are going to be clang and", "start": 3346.359, "duration": 5.161}, {"text": "flang and we're mainly concerned with", "start": 3348.96, "duration": 5.0}, {"text": "the compiler flags that control the", "start": 3351.52, "duration": 4.92}, {"text": "overall optimization a level and the", "start": 3353.96, "duration": 3.68}, {"text": "target", "start": 3356.44, "duration": 4.119}, {"text": "architecture so the table on the left", "start": 3357.64, "duration": 6.88}, {"text": "shows um the the different optimization", "start": 3360.559, "duration": 7.48}, {"text": "levels if we do not specify an", "start": 3364.52, "duration": 6.64}, {"text": "optimization level the result can", "start": 3368.039, "duration": 5.28}, {"text": "vary and we'll we'll we'll see an", "start": 3371.16, "duration": 3.76}, {"text": "example of that once we get to the", "start": 3373.319, "duration": 7.28}, {"text": "Matrix addition um case Das o0 means", "start": 3374.92, "duration": 8.36}, {"text": "that we want absolutely no optimization", "start": 3380.599, "duration": 3.881}, {"text": "this is going to give you terrible", "start": 3383.28, "duration": 3.319}, {"text": "performance there might be times when", "start": 3384.48, "duration": 4.639}, {"text": "you want to compile with d o0 as you're", "start": 3386.599, "duration": 4.081}, {"text": "developing your code or trying to figure", "start": 3389.119, "duration": 3.361}, {"text": "out what the compiler is doing but you", "start": 3390.68, "duration": 6.6}, {"text": "would never do this for a um for for a", "start": 3392.48, "duration": 7.8}, {"text": "production run -01 gives you some", "start": 3397.28, "duration": 5.759}, {"text": "limited optimization again it's less", "start": 3400.28, "duration": 5.799}, {"text": "than what you will typically want -02 is", "start": 3403.039, "duration": 5.161}, {"text": "what we call moderate optimization it", "start": 3406.079, "duration": 5.561}, {"text": "will do a lot of the restructuring your", "start": 3408.2, "duration": 7.919}, {"text": "code as long as it does not potentially", "start": 3411.64, "duration": 6.959}, {"text": "change any of the floating Point results", "start": 3416.119, "duration": 4.841}, {"text": "and then -03 which is aggressive which", "start": 3418.599, "duration": 4.401}, {"text": "is what you're normally going to use", "start": 3420.96, "duration": 5.2}, {"text": "allows the compiler to reorder math", "start": 3423.0, "duration": 5.52}, {"text": "operations now if you're familiar with", "start": 3426.16, "duration": 5.8}, {"text": "floating Point arithmetic you may know", "start": 3428.52, "duration": 6.12}, {"text": "that what we call the the algebraic", "start": 3431.96, "duration": 5.28}, {"text": "identities are not necessarily floating", "start": 3434.64, "duration": 4.719}, {"text": "Point identities floating Point numbers", "start": 3437.24, "duration": 5.96}, {"text": "can only be represented represented to a", "start": 3439.359, "duration": 5.841}, {"text": "finite number of places there's going to", "start": 3443.2, "duration": 4.28}, {"text": "be a little bit of roundoff every time", "start": 3445.2, "duration": 4.8}, {"text": "and that's going to depend on say say", "start": 3447.48, "duration": 4.359}, {"text": "the order of the additions and", "start": 3450.0, "duration": 3.88}, {"text": "multiplications generally you want to", "start": 3451.839, "duration": 4.801}, {"text": "you you'll want to use -3 but you'll", "start": 3453.88, "duration": 5.239}, {"text": "always want to use at least", "start": 3456.64, "duration": 4.679}, {"text": "-2 another thing we need to do when we", "start": 3459.119, "duration": 4.361}, {"text": "compile the codes is we need to make", "start": 3461.319, "duration": 4.76}, {"text": "sure that we are getting access to the", "start": 3463.48, "duration": 5.52}, {"text": "most advanced instruction set so there's", "start": 3466.079, "duration": 5.321}, {"text": "things called AVX and avx2 and I believe", "start": 3469.0, "duration": 4.52}, {"text": "you heard about these the other day", "start": 3471.4, "duration": 5.76}, {"text": "which allow you to do do eight or 16", "start": 3473.52, "duration": 6.96}, {"text": "math operations per cycle per core but", "start": 3477.16, "duration": 5.8}, {"text": "you only take advantage of those", "start": 3480.48, "duration": 5.639}, {"text": "Advanced instructions if you specify the", "start": 3482.96, "duration": 6.72}, {"text": "target so for the for the AMD compilers", "start": 3486.119, "duration": 7.44}, {"text": "we'll need to have dasm Arch equals znv", "start": 3489.68, "duration": 7.439}, {"text": "R2 um that's for the for the zen2", "start": 3493.559, "duration": 5.961}, {"text": "architecture for Intel we're going to", "start": 3497.119, "duration": 6.601}, {"text": "need DM Arch equals core d", "start": 3499.52, "duration": 7.2}, {"text": "avx2", "start": 3503.72, "duration": 3.0}, {"text": "so now we're going to go to our next", "start": 3506.96, "duration": 6.76}, {"text": "Hands-On example let me go ahead", "start": 3509.2, "duration": 4.52}, {"text": "and go back to my terminal", "start": 3513.799, "duration": 4.161}, {"text": "again so in this case we are going to", "start": 3518.72, "duration": 8.399}, {"text": "go we're going to go into", "start": 3523.0, "duration": 4.119}, {"text": "performance we're going to go into", "start": 3527.799, "duration": 4.121}, {"text": "Performance", "start": 3529.44, "duration": 2.48}, {"text": "Tuning and we're going to go into Matrix", "start": 3533.72, "duration": 5.119}, {"text": "Edition and you'll see there are two", "start": 3540.64, "duration": 6.0}, {"text": "scripts in here um labeled commands", "start": 3542.68, "duration": 8.48}, {"text": "uncore 2D addore AMD oror Intel and", "start": 3546.64, "duration": 8.32}, {"text": "we'll take a look at one of", "start": 3551.16, "duration": 3.8}, {"text": "those so for the AMD version we start", "start": 3562.76, "duration": 6.0}, {"text": "off we're going to do a module load aocc", "start": 3565.92, "duration": 4.72}, {"text": "so that we get the AMD", "start": 3568.76, "duration": 4.68}, {"text": "compilers we're going to be compiling a", "start": 3570.64, "duration": 6.479}, {"text": "for Tren um PP for Trend code using the", "start": 3573.44, "duration": 6.919}, {"text": "flang compiler we're going to set the", "start": 3577.119, "duration": 6.44}, {"text": "set the architecture to the ZN", "start": 3580.359, "duration": 7.881}, {"text": "V2 and then when it comes to the um", "start": 3583.559, "duration": 7.48}, {"text": "optimization level I'm going to try this", "start": 3588.24, "duration": 8.119}, {"text": "with the default with 0 0102 and 03 and", "start": 3591.039, "duration": 6.921}, {"text": "each of these times I'm going to keep", "start": 3596.359, "duration": 3.841}, {"text": "track of my", "start": 3597.96, "duration": 4.52}, {"text": "executable um so I'm going to have you", "start": 3600.2, "duration": 5.28}, {"text": "know depending on the optimization level", "start": 3602.48, "duration": 4.839}, {"text": "I'm going to have underscore DF for", "start": 3605.48, "duration": 6.68}, {"text": "default underscore 0 01 02 and3 you'll", "start": 3607.319, "duration": 8.201}, {"text": "also notice that in the name I have", "start": 3612.16, "duration": 8.04}, {"text": "underscore good or I have underscore bad", "start": 3615.52, "duration": 10.2}, {"text": "and by that I mean in the D", "start": 3620.2, "duration": 9.96}, {"text": "good file we have the loops nested in", "start": 3625.72, "duration": 8.119}, {"text": "the proper order in the dmad bed file we", "start": 3630.16, "duration": 5.679}, {"text": "have the loops in the opposite order so", "start": 3633.839, "duration": 6.0}, {"text": "let me just go into one of those so", "start": 3635.839, "duration": 6.161}, {"text": "let's take a look at at dmad", "start": 3639.839, "duration": 4.401}, {"text": "good so up here we're just just", "start": 3642.0, "duration": 4.24}, {"text": "allocating a few", "start": 3644.24, "duration": 4.599}, {"text": "arrays um where we're initializing in", "start": 3646.24, "duration": 5.0}, {"text": "the arrays and now and actually here you", "start": 3648.839, "duration": 5.76}, {"text": "see an example of um using timers and in", "start": 3651.24, "duration": 6.24}, {"text": "fortrend I can call the system clock", "start": 3654.599, "duration": 5.161}, {"text": "routine I call it", "start": 3657.48, "duration": 6.079}, {"text": "before clock one after and clock two and", "start": 3659.76, "duration": 6.039}, {"text": "then I calculate the elapse time and", "start": 3663.559, "duration": 3.881}, {"text": "there's a", "start": 3665.799, "duration": 4.32}, {"text": "function think that down yeah and", "start": 3667.44, "duration": 6.32}, {"text": "there's a function down here to do the", "start": 3670.119, "duration": 3.641}, {"text": "math and then the", "start": 3673.839, "duration": 8.321}, {"text": "um so and the actual work is right here", "start": 3677.2, "duration": 8.08}, {"text": "it's going to be these five", "start": 3682.16, "duration": 6.399}, {"text": "lines where I am adding those arrays", "start": 3685.28, "duration": 7.12}, {"text": "element by element now if I go into the", "start": 3688.559, "duration": 9.04}, {"text": "into the other file um into dad", "start": 3692.4, "duration": 5.199}, {"text": "bad you see the code looks um", "start": 3699.799, "duration": 5.841}, {"text": "sorry see the code looks the same except", "start": 3707.16, "duration": 7.199}, {"text": "I have loops nested in the net nested in", "start": 3711.64, "duration": 4.88}, {"text": "the the wrong", "start": 3714.359, "duration": 5.72}, {"text": "order so what we're going to do is", "start": 3716.52, "duration": 8.839}, {"text": "pretty simple um you can you can simply", "start": 3720.079, "duration": 5.28}, {"text": "execute you can simply execute the", "start": 3726.72, "duration": 7.04}, {"text": "commands Tod addore AMD script and then", "start": 3729.119, "duration": 8.081}, {"text": "execute the the Intel script and do this", "start": 3733.76, "duration": 6.24}, {"text": "um ignore in the slide where I say", "start": 3737.2, "duration": 5.28}, {"text": "30,000 I actually reduce the problem", "start": 3740.0, "duration": 5.0}, {"text": "size to a 25,000 squar so that it will", "start": 3742.48, "duration": 4.839}, {"text": "fit onto your portion of the node and", "start": 3745.0, "duration": 3.88}, {"text": "we're going to keep track of the run", "start": 3747.319, "duration": 5.04}, {"text": "times so run these write down the run", "start": 3748.88, "duration": 5.919}, {"text": "times try not to look ahead at the next", "start": 3752.359, "duration": 4.76}, {"text": "couple of slides and then let's see if", "start": 3754.799, "duration": 5.52}, {"text": "we can make sense of make sense of the", "start": 3757.119, "duration": 6.081}, {"text": "results so I'm going to run this and all", "start": 3760.319, "duration": 5.921}, {"text": "of you can go ahead and do the same and", "start": 3763.2, "duration": 5.28}, {"text": "give me a give me a thumbs up when", "start": 3766.24, "duration": 3.76}, {"text": "you're", "start": 3768.48, "duration": 3.92}, {"text": "done and I'll recommend you know in", "start": 3770.0, "duration": 5.319}, {"text": "those commands files don't just you know", "start": 3772.4, "duration": 4.919}, {"text": "for for convenience you you can just run", "start": 3775.319, "duration": 6.321}, {"text": "it you know commands Tod _ AMD or Intel", "start": 3777.319, "duration": 6.121}, {"text": "but do take a look in there and make", "start": 3781.64, "duration": 3.52}, {"text": "sure you understand everything I'm doing", "start": 3783.44, "duration": 4.599}, {"text": "with the compiler", "start": 3785.16, "duration": 6.0}, {"text": "options all right since I'm not hearing", "start": 3788.039, "duration": 6.121}, {"text": "anything we will we will move on so we", "start": 3791.16, "duration": 5.08}, {"text": "just we just run the", "start": 3794.16, "duration": 4.28}, {"text": "example and you know the point of this", "start": 3796.24, "duration": 4.48}, {"text": "is is data access order really that", "start": 3798.44, "duration": 4.08}, {"text": "important do we do we really need to", "start": 3800.72, "duration": 5.399}, {"text": "care that much about level", "start": 3802.52, "duration": 7.079}, {"text": "optimization and I think lesson here is", "start": 3806.119, "duration": 5.92}, {"text": "going to is going to be absolutely so", "start": 3809.599, "duration": 5.361}, {"text": "this is a classic memory bound code", "start": 3812.039, "duration": 5.121}, {"text": "we're reading the data we're doing very", "start": 3814.96, "duration": 4.92}, {"text": "very little work on on each buddy data", "start": 3817.16, "duration": 5.48}, {"text": "we're just taking to taking one value", "start": 3819.88, "duration": 5.12}, {"text": "from each Matrix adding them and then", "start": 3822.64, "duration": 4.84}, {"text": "storing them into storing them into", "start": 3825.0, "duration": 3.599}, {"text": "another", "start": 3827.48, "duration": 3.319}, {"text": "Matrix now the numbers that I'm showing", "start": 3828.599, "duration": 3.921}, {"text": "in the slide are going to be a little", "start": 3830.799, "duration": 4.0}, {"text": "bit different than what you got um this", "start": 3832.52, "duration": 5.24}, {"text": "was for matrices of 30,000 by 30,000", "start": 3834.799, "duration": 4.841}, {"text": "which was great when I had access to", "start": 3837.76, "duration": 3.72}, {"text": "full node and we scaled the problem back", "start": 3839.64, "duration": 4.76}, {"text": "a little bit um but the general results", "start": 3841.48, "duration": 5.119}, {"text": "are going to be the same so what I'm", "start": 3844.4, "duration": 5.199}, {"text": "showing here in these two tables on the", "start": 3846.599, "duration": 5.401}, {"text": "left was", "start": 3849.599, "duration": 5.281}, {"text": "compiling the the code with the proper", "start": 3852.0, "duration": 5.64}, {"text": "and the improper Loop nesting using the", "start": 3854.88, "duration": 5.239}, {"text": "aocc compiler and on the right same", "start": 3857.64, "duration": 3.52}, {"text": "thing with", "start": 3860.119, "duration": 3.561}, {"text": "Intel um and we have five different", "start": 3861.16, "duration": 6.919}, {"text": "cases we have the default -", "start": 3863.68, "duration": 6.8}, {"text": "0-1-2", "start": 3868.079, "duration": 6.0}, {"text": "and-3 and when we compare the proper and", "start": 3870.48, "duration": 6.359}, {"text": "the improper Loop nesting results for", "start": 3874.079, "duration": 6.96}, {"text": "the AMD compiler we see that if we have", "start": 3876.839, "duration": 7.44}, {"text": "the proper Loop nesting that the code", "start": 3881.039, "duration": 7.0}, {"text": "runs a lot faster and that is regardless", "start": 3884.279, "duration": 8.881}, {"text": "of the um it's regardless of the", "start": 3888.039, "duration": 7.361}, {"text": "um", "start": 3893.16, "duration": 3.84}, {"text": "the the optimization level that we", "start": 3895.4, "duration": 4.12}, {"text": "choose for example if we look at theault", "start": 3897.0, "duration": 5.92}, {"text": "or the - o0 we see that with proper Loop", "start": 3899.52, "duration": 5.2}, {"text": "Nest scene it takes about 3 and a half", "start": 3902.92, "duration": 5.6}, {"text": "seconds versus 9 seconds with -01 we're", "start": 3904.72, "duration": 8.319}, {"text": "down to 1.68 versus five for -02 1.14", "start": 3908.52, "duration": 6.64}, {"text": "versus almost 5", "start": 3913.039, "duration": 5.08}, {"text": "Seconds now if we look at the and", "start": 3915.16, "duration": 4.639}, {"text": "another thing that you'll notice is that", "start": 3918.119, "duration": 5.081}, {"text": "the default the the um run times that we", "start": 3919.799, "duration": 6.201}, {"text": "get for the default specifying no", "start": 3923.2, "duration": 5.56}, {"text": "optimization level they're the same as", "start": 3926.0, "duration": 6.16}, {"text": "when we get to - o0 so that's really", "start": 3928.76, "duration": 6.64}, {"text": "important with the AMD compiler by", "start": 3932.16, "duration": 4.639}, {"text": "default we get no", "start": 3935.4, "duration": 4.0}, {"text": "optimization if you look over here at", "start": 3936.799, "duration": 4.28}, {"text": "the Intel", "start": 3939.4, "duration": 4.32}, {"text": "compiler something really", "start": 3941.079, "duration": 5.801}, {"text": "interesting when we use the default we", "start": 3943.72, "duration": 5.16}, {"text": "get um we", "start": 3946.88, "duration": 5.36}, {"text": "get um run run times that are the same", "start": 3948.88, "duration": 7.0}, {"text": "as the O2 or the O3 level in addition at", "start": 3952.24, "duration": 6.4}, {"text": "these higher levels of optimization O2", "start": 3955.88, "duration": 6.399}, {"text": "and 03 it doesn't seem to care whether", "start": 3958.64, "duration": 6.36}, {"text": "or not we have proper Loop nesting so", "start": 3962.279, "duration": 5.76}, {"text": "we're going to see what is going on so I", "start": 3965.0, "duration": 6.119}, {"text": "mentioned this already run times improve", "start": 3968.039, "duration": 5.481}, {"text": "for the AMD compiler as we enable higher", "start": 3971.119, "duration": 5.0}, {"text": "levels of optimization the default", "start": 3973.52, "duration": 5.24}, {"text": "appears to be the same as disabling all", "start": 3976.119, "duration": 4.68}, {"text": "optimizations and the improper Loop", "start": 3978.76, "duration": 3.96}, {"text": "nesting is always", "start": 3980.799, "duration": 6.04}, {"text": "slower so you know never never rely on", "start": 3982.72, "duration": 7.2}, {"text": "the compilers um the default", "start": 3986.839, "duration": 6.041}, {"text": "optimization now the Intel compiler is", "start": 3989.92, "duration": 5.24}, {"text": "more interesting here we see first of", "start": 3992.88, "duration": 6.679}, {"text": "all that default appears to be the same", "start": 3995.16, "duration": 7.119}, {"text": "as-02 um but don't count on this this is", "start": 3999.559, "duration": 5.641}, {"text": "not a standard this is just what Intel", "start": 4002.279, "duration": 5.201}, {"text": "does in", "start": 4005.2, "duration": 6.44}, {"text": "addition look at the the -02 -03 and the", "start": 4007.48, "duration": 5.24}, {"text": "default", "start": 4011.64, "duration": 5.199}, {"text": "lines the um for the runtime for for the", "start": 4012.72, "duration": 6.04}, {"text": "properly written and the improperly", "start": 4016.839, "duration": 4.641}, {"text": "written code is the same in this case", "start": 4018.76, "duration": 5.88}, {"text": "the Intel compiler was smart enough to", "start": 4021.48, "duration": 5.119}, {"text": "recognize that Loops are improperly", "start": 4024.64, "duration": 4.679}, {"text": "nested and it automatically reordered", "start": 4026.599, "duration": 4.401}, {"text": "those Loops in order to get better", "start": 4029.319, "duration": 4.161}, {"text": "performance now if you really dive in if", "start": 4031.0, "duration": 6.279}, {"text": "you would use I believe the- s flag um s", "start": 4033.48, "duration": 5.639}, {"text": "and Steven", "start": 4037.279, "duration": 6.481}, {"text": "to generate the um the assembly output", "start": 4039.119, "duration": 6.72}, {"text": "and you're if you can read assembly you", "start": 4043.76, "duration": 5.519}, {"text": "would see that those Loops are actually", "start": 4045.839, "duration": 6.361}, {"text": "rened so you know the lessons here is", "start": 4049.279, "duration": 5.721}, {"text": "you know making optimal use to Cache is", "start": 4052.2, "duration": 4.44}, {"text": "really really important when you have", "start": 4055.0, "duration": 4.279}, {"text": "memory bound codes and sometimes the", "start": 4056.64, "duration": 5.12}, {"text": "compiler will help you like the Intel", "start": 4059.279, "duration": 5.161}, {"text": "compiler and sometimes it won't so I", "start": 4061.76, "duration": 5.44}, {"text": "show here you know when we compile a -02", "start": 4064.44, "duration": 6.24}, {"text": "or 03 on the AMD side you're out of luck", "start": 4067.2, "duration": 6.079}, {"text": "if you wrote those loops with the wrong", "start": 4070.68, "duration": 5.8}, {"text": "nesting you are stuck on the right side", "start": 4073.279, "duration": 6.481}, {"text": "the Intel compiler the compiler saved", "start": 4076.48, "duration": 5.0}, {"text": "you from your from from your bad", "start": 4079.76, "duration": 3.319}, {"text": "programming", "start": 4081.48, "duration": 5.16}, {"text": "habits but I would um I would say don't", "start": 4083.079, "duration": 6.601}, {"text": "don't count on the compiler saving you", "start": 4086.64, "duration": 5.8}, {"text": "um sometimes it will sometimes it", "start": 4089.68, "duration": 5.08}, {"text": "won't okay so which compiler should I", "start": 4092.44, "duration": 4.799}, {"text": "use you know since intel was able to fix", "start": 4094.76, "duration": 4.76}, {"text": "my bad programming shouldn't I just use", "start": 4097.239, "duration": 4.641}, {"text": "it instead of the AMD compiler so I'm", "start": 4099.52, "duration": 4.719}, {"text": "going to say not necessarily this was an", "start": 4101.88, "duration": 5.52}, {"text": "extremely simple code and the compiler", "start": 4104.239, "duration": 5.761}, {"text": "could analyze and fix it but even with", "start": 4107.4, "duration": 5.08}, {"text": "the Intel compiler there's no guarantee", "start": 4110.0, "duration": 4.679}, {"text": "as the complexity of the code increases", "start": 4112.48, "duration": 3.96}, {"text": "that it will be able to recognize your", "start": 4114.679, "duration": 4.721}, {"text": "bad programming habits and then modern", "start": 4116.44, "duration": 4.96}, {"text": "compilers do a lot of clever things to", "start": 4119.4, "duration": 4.6}, {"text": "make codes run faster they rearrange", "start": 4121.4, "duration": 4.64}, {"text": "instructions they do Loop unrolling", "start": 4124.0, "duration": 4.12}, {"text": "we'll talk about that a little bit later", "start": 4126.04, "duration": 4.199}, {"text": "but the vendors optimize the compilers", "start": 4128.12, "duration": 5.0}, {"text": "for their own Hardware so we find that", "start": 4130.239, "duration": 6.241}, {"text": "for well written code aocc is often a", "start": 4133.12, "duration": 5.599}, {"text": "little bit better when running on AMD", "start": 4136.48, "duration": 4.44}, {"text": "Hardware but you might find the opposite", "start": 4138.719, "duration": 4.44}, {"text": "if you're running on an Intel system and", "start": 4140.92, "duration": 4.239}, {"text": "there are quite a few out there in that", "start": 4143.159, "duration": 4.321}, {"text": "case again try all the compilers but you", "start": 4145.159, "duration": 5.0}, {"text": "may find that an Intel compiler running", "start": 4147.48, "duration": 4.92}, {"text": "on Intel Hardware is going to do a", "start": 4150.159, "duration": 3.961}, {"text": "little bit", "start": 4152.4, "duration": 3.759}, {"text": "better all right with that we've been", "start": 4154.12, "duration": 4.239}, {"text": "going for for quite a while now I'm", "start": 4156.159, "duration": 4.321}, {"text": "going to suggest that we take a short", "start": 4158.359, "duration": 5.44}, {"text": "break and that we come back right at the", "start": 4160.48, "duration": 5.239}, {"text": "bottom of the hour so it's", "start": 4163.799, "duration": 4.761}, {"text": "1:22 and I will hopefully see everybody", "start": 4165.719, "duration": 6.321}, {"text": "back at 1:30 so I am going to get", "start": 4168.56, "duration": 6.159}, {"text": "started again so let's go ahead and", "start": 4172.04, "duration": 5.4}, {"text": "share my", "start": 4174.719, "duration": 2.721}, {"text": "screen right so we're done with our", "start": 4179.759, "duration": 5.161}, {"text": "short break and let me go into full", "start": 4182.0, "duration": 5.4}, {"text": "screen mode", "start": 4184.92, "duration": 5.96}, {"text": "again all right so we talked about one", "start": 4187.4, "duration": 5.759}, {"text": "um yeah one one simple but very", "start": 4190.88, "duration": 4.2}, {"text": "important case case and that was getting", "start": 4193.159, "duration": 4.281}, {"text": "your um get getting your Loops nested", "start": 4195.08, "duration": 5.04}, {"text": "properly but we're going to go through a", "start": 4197.44, "duration": 4.48}, {"text": "few of what they call Loop level", "start": 4200.12, "duration": 5.68}, {"text": "optimizations Loop fusion and fision and", "start": 4201.92, "duration": 5.88}, {"text": "something called Loop invariant code", "start": 4205.8, "duration": 5.08}, {"text": "motion um Loop peeling and unrolling and", "start": 4207.8, "duration": 6.12}, {"text": "blocking and breaking out of Loops early", "start": 4210.88, "duration": 6.68}, {"text": "and for lack of a um better term I'm", "start": 4213.92, "duration": 6.36}, {"text": "sure that the computer scientists have a", "start": 4217.56, "duration": 4.08}, {"text": "proper name for this something that I", "start": 4220.28, "duration": 5.36}, {"text": "just call short Loop optimization", "start": 4221.64, "duration": 4.0}, {"text": "so starting with probably probably the", "start": 4227.44, "duration": 5.0}, {"text": "simplest um got kind of transformation", "start": 4230.159, "duration": 4.04}, {"text": "you can do to your Loops this is", "start": 4232.44, "duration": 4.12}, {"text": "something called Loop Fusion if we take", "start": 4234.199, "duration": 4.48}, {"text": "two or more loops with the same range of", "start": 4236.56, "duration": 4.44}, {"text": "iterations we can combine them into a", "start": 4238.679, "duration": 5.321}, {"text": "single Loop so in this case on the left", "start": 4241.0, "duration": 5.52}, {"text": "hand side we have a loop", "start": 4244.0, "duration": 5.6}, {"text": "where we we iterate over the elements of", "start": 4246.52, "duration": 5.639}, {"text": "these arrays they all the same size and", "start": 4249.6, "duration": 6.639}, {"text": "we take elements by element x sub I * y", "start": 4252.159, "duration": 6.721}, {"text": "sub I and we add a sub I and we store", "start": 4256.239, "duration": 4.92}, {"text": "that in Z and then that's followed by", "start": 4258.88, "duration": 5.48}, {"text": "another loop where we work on those same", "start": 4261.159, "duration": 7.241}, {"text": "elements um x x y and a except here we", "start": 4264.36, "duration": 5.64}, {"text": "do something a little bit different here", "start": 4268.4, "duration": 5.16}, {"text": "we take x x subi and we add it to y subi", "start": 4270.0, "duration": 4.76}, {"text": "* a", "start": 4273.56, "duration": 4.84}, {"text": "subi loop Fusion is where I take those", "start": 4274.76, "duration": 6.12}, {"text": "two loops and I combine them into a", "start": 4278.4, "duration": 4.36}, {"text": "single Loop and you can see what some of", "start": 4280.88, "duration": 3.88}, {"text": "the advantages are going be here first", "start": 4282.76, "duration": 4.6}, {"text": "of all we don't have that overhead", "start": 4284.76, "duration": 5.28}, {"text": "associated with the loop but more", "start": 4287.36, "duration": 4.76}, {"text": "important this is going to allow for", "start": 4290.04, "duration": 5.76}, {"text": "better data reuse so given that Zu subi", "start": 4292.12, "duration": 6.8}, {"text": "and W subi both need to use the same", "start": 4295.8, "duration": 6.72}, {"text": "elements of x y and a once we have them", "start": 4298.92, "duration": 5.319}, {"text": "already in the top of the top of the", "start": 4302.52, "duration": 4.6}, {"text": "memory hierarchy in fact right there um", "start": 4304.239, "duration": 5.801}, {"text": "in register we might as well use them", "start": 4307.12, "duration": 5.16}, {"text": "again so if we can take those two loops", "start": 4310.04, "duration": 4.88}, {"text": "and we can fuse them now once we've", "start": 4312.28, "duration": 7.0}, {"text": "loaded x y and a in into the registers", "start": 4314.92, "duration": 6.319}, {"text": "we can use them twice we could use it to", "start": 4319.28, "duration": 4.2}, {"text": "calculate Z and we could use it to", "start": 4321.239, "duration": 3.561}, {"text": "calculate", "start": 4323.48, "duration": 4.0}, {"text": "W so with that we're going to jump right", "start": 4324.8, "duration": 5.72}, {"text": "back in to another another Hands-On", "start": 4327.48, "duration": 7.199}, {"text": "exercise so the fused loops and the unus", "start": 4330.52, "duration": 6.639}, {"text": "fused Loops are going to combine um are", "start": 4334.679, "duration": 4.52}, {"text": "sorry going to do element by element", "start": 4337.159, "duration": 3.641}, {"text": "multiply add", "start": 4339.199, "duration": 4.44}, {"text": "operations on these three arrays just", "start": 4340.8, "duration": 4.96}, {"text": "like I've shown either in a single Loop", "start": 4343.639, "duration": 4.401}, {"text": "or in two separate Loops so we're going", "start": 4345.76, "duration": 4.399}, {"text": "to inspect the code make sure that you", "start": 4348.04, "duration": 4.24}, {"text": "understand logic you're going to compile", "start": 4350.159, "duration": 5.241}, {"text": "these with the for Tren and the aocc", "start": 4352.28, "duration": 4.72}, {"text": "compilers with the different", "start": 4355.4, "duration": 4.319}, {"text": "optimization levels like we did before", "start": 4357.0, "duration": 5.04}, {"text": "um ignore the next line where we say", "start": 4359.719, "duration": 3.801}, {"text": "that we're going to run this with a rank", "start": 4362.04, "duration": 3.679}, {"text": "of 30,000 um we're going to be doing", "start": 4363.52, "duration": 6.52}, {"text": "this with a matrix rank of 20,000 so", "start": 4365.719, "duration": 6.721}, {"text": "that it fits into the memory allocated", "start": 4370.04, "duration": 4.24}, {"text": "to", "start": 4372.44, "duration": 3.64}, {"text": "did to your job and we're going to keep", "start": 4374.28, "duration": 3.399}, {"text": "track of the runtimes reported by the", "start": 4376.08, "duration": 4.119}, {"text": "codes so let me do this I'm going to", "start": 4377.679, "duration": 6.801}, {"text": "stop sharing we're going to go to the um", "start": 4380.199, "duration": 6.201}, {"text": "got go to full sorry I'm going to go to", "start": 4384.48, "duration": 5.679}, {"text": "my entire desktop", "start": 4386.4, "duration": 3.759}, {"text": "again oops sorry oh wrong button", "start": 4393.84, "duration": 5.12}, {"text": "um", "start": 4397.28, "duration": 4.84}, {"text": "share almost left the meeting okay so", "start": 4398.96, "duration": 5.88}, {"text": "you should be um Can somebody confirm", "start": 4402.12, "duration": 4.36}, {"text": "that you're staying my whole desktop", "start": 4404.84, "duration": 5.44}, {"text": "again yes we do okay thank you Cindy so", "start": 4406.48, "duration": 6.8}, {"text": "I'm going to go back to the", "start": 4410.28, "duration": 3.0}, {"text": "top and I'm going to go into", "start": 4413.6, "duration": 6.76}, {"text": "performance and performance", "start": 4417.08, "duration": 7.84}, {"text": "tuning and we're going to go into", "start": 4420.36, "duration": 4.56}, {"text": "Fusion right so we'll take a look at the", "start": 4425.36, "duration": 6.68}, {"text": "um take a look at the code", "start": 4428.76, "duration": 3.28}, {"text": "first", "start": 4432.36, "duration": 3.0}, {"text": "so again that this is for Trend code I", "start": 4438.639, "duration": 3.6}, {"text": "know that more of you are probably", "start": 4440.639, "duration": 4.281}, {"text": "familiar with with C but again it's a", "start": 4442.239, "duration": 4.321}, {"text": "very simple code and I think you'll be", "start": 4444.92, "duration": 4.2}, {"text": "able to able to follow along here's what", "start": 4446.56, "duration": 6.679}, {"text": "I'm calling the sorry the guts of the", "start": 4449.12, "duration": 7.079}, {"text": "code where I've got my two Loops just", "start": 4453.239, "duration": 6.121}, {"text": "like I showed previously in the slides", "start": 4456.199, "duration": 7.641}, {"text": "um where I'm using combining XY and a in", "start": 4459.36, "duration": 8.04}, {"text": "various ways and saving that in Z and", "start": 4463.84, "duration": 6.12}, {"text": "W and", "start": 4467.4, "duration": 5.12}, {"text": "then for the Fus", "start": 4469.96, "duration": 6.199}, {"text": "Loops a little bit", "start": 4472.52, "duration": 8.639}, {"text": "simpler I just took the body of those um", "start": 4476.159, "duration": 7.801}, {"text": "of those two loops and I combined them", "start": 4481.159, "duration": 5.0}, {"text": "now I want to point out something that", "start": 4483.96, "duration": 5.44}, {"text": "may seem a little mysterious in the cone", "start": 4486.159, "duration": 5.721}, {"text": "so I I do these calculations I", "start": 4489.4, "duration": 6.96}, {"text": "initialize x y and a and I do various um", "start": 4491.88, "duration": 7.44}, {"text": "combinations of floating Point multiply", "start": 4496.36, "duration": 6.48}, {"text": "ads to save the results in Z and", "start": 4499.32, "duration": 6.44}, {"text": "W I've got this little bit of code at", "start": 4502.84, "duration": 6.96}, {"text": "the bottom here where I test to see if Z", "start": 4505.76, "duration": 6.08}, {"text": "of one if the very first element is", "start": 4509.8, "duration": 5.32}, {"text": "equal to is equal to minus", "start": 4511.84, "duration": 5.92}, {"text": "one and then if it is equal to minus one", "start": 4515.12, "duration": 4.88}, {"text": "I'm going to write out the results now", "start": 4517.76, "duration": 4.24}, {"text": "the way I", "start": 4520.0, "duration": 4.159}, {"text": "initialize the the way I initialize", "start": 4522.0, "duration": 4.48}, {"text": "those arrays there's no way that I'm", "start": 4524.159, "duration": 3.281}, {"text": "going to get", "start": 4526.48, "duration": 3.759}, {"text": "minus1 now the reason I did this and I", "start": 4527.44, "duration": 4.4}, {"text": "haven't tested recently with these", "start": 4530.239, "duration": 4.4}, {"text": "compilers is that some compilers will", "start": 4531.84, "duration": 5.6}, {"text": "recognize that if you do calculations", "start": 4534.639, "duration": 5.481}, {"text": "and never use the results it will just", "start": 4537.44, "duration": 5.52}, {"text": "optimize away the entire code and you'll", "start": 4540.12, "duration": 5.28}, {"text": "get a runtime that's um very very close", "start": 4542.96, "duration": 3.64}, {"text": "to", "start": 4545.4, "duration": 3.799}, {"text": "zero um you can go ahead I have", "start": 4546.6, "duration": 5.4}, {"text": "everything that you need in these", "start": 4549.199, "duration": 5.52}, {"text": "commands um files so let's take a look", "start": 4552.0, "duration": 5.32}, {"text": "at one of", "start": 4554.719, "duration": 2.601}, {"text": "those look look at the look at the Intel", "start": 4559.4, "duration": 5.36}, {"text": "again I'm going sorry at the AMD again", "start": 4562.28, "duration": 4.72}, {"text": "I'm G", "start": 4564.76, "duration": 2.24}, {"text": "to there I'm going to to load the load", "start": 4567.56, "duration": 6.159}, {"text": "the AMD compilers I'm going to compile", "start": 4570.8, "duration": 4.68}, {"text": "just like I did before this is going to", "start": 4573.719, "duration": 4.321}, {"text": "look a lot like the script that we had", "start": 4575.48, "duration": 5.759}, {"text": "for the um for the Matrix multiply", "start": 4578.04, "duration": 7.32}, {"text": "example again using the flying compiler", "start": 4581.239, "duration": 6.201}, {"text": "specifying the architecture and then", "start": 4585.36, "duration": 6.6}, {"text": "either default or um various levels of", "start": 4587.44, "duration": 6.52}, {"text": "optimization I'm going to give each of", "start": 4591.96, "duration": 3.679}, {"text": "those sorry I'm going to give each of", "start": 4593.96, "duration": 4.8}, {"text": "those binaries a different name and I'm", "start": 4595.639, "duration": 4.921}, {"text": "going to do this both for the fuse and", "start": 4598.76, "duration": 4.479}, {"text": "the unfused loops so I'm going to say go", "start": 4600.56, "duration": 4.48}, {"text": "ahead", "start": 4603.239, "duration": 5.361}, {"text": "um run run those two examples keep track", "start": 4605.04, "duration": 5.84}, {"text": "of the run times maybe poke around a", "start": 4608.6, "duration": 4.16}, {"text": "little bit in the code to make sure that", "start": 4610.88, "duration": 4.4}, {"text": "you that you understand what's going on", "start": 4612.76, "duration": 4.84}, {"text": "and then we will regroup in just a", "start": 4615.28, "duration": 3.959}, {"text": "couple of", "start": 4617.6, "duration": 4.639}, {"text": "minutes and I'll get M running and after", "start": 4619.239, "duration": 6.081}, {"text": "that I'll take a look at the", "start": 4622.239, "duration": 3.081}, {"text": "chat", "start": 4642.0, "duration": 3.0}, {"text": "oh oh okay I'm looking here at the at", "start": 4663.76, "duration": 5.32}, {"text": "the message for from Amendment um make", "start": 4666.76, "duration": 4.12}, {"text": "sure that you're doing this and I think", "start": 4669.08, "duration": 4.119}, {"text": "you figured this well maybe not make", "start": 4670.88, "duration": 6.08}, {"text": "sure that you're doing this on a compute", "start": 4673.199, "duration": 6.601}, {"text": "node so I mentioned earlier that we need", "start": 4676.96, "duration": 5.44}, {"text": "to do the S run. shared command if you", "start": 4679.8, "duration": 4.04}, {"text": "don't do that you're going to be working", "start": 4682.4, "duration": 4.319}, {"text": "on the login node where your resources", "start": 4683.84, "duration": 6.08}, {"text": "are going to be very very", "start": 4686.719, "duration": 6.281}, {"text": "limited so and I'll put that into the", "start": 4689.92, "duration": 4.84}, {"text": "into the slack and I'll also put into", "start": 4693.0, "duration": 3.88}, {"text": "the", "start": 4694.76, "duration": 2.12}, {"text": "chat", "start": 4701.92, "duration": 3.0}, {"text": "and I think that should be enough time", "start": 4726.08, "duration": 4.88}, {"text": "for everybody", "start": 4728.159, "duration": 2.801}, {"text": "to for everybody run examples um give me", "start": 4731.32, "duration": 9.16}, {"text": "a I say give me a thumbs down if you're", "start": 4736.159, "duration": 6.601}, {"text": "not", "start": 4740.48, "duration": 2.28}, {"text": "done okay I am not seeing any thumbs", "start": 4750.56, "duration": 6.56}, {"text": "down so we will we will move", "start": 4753.56, "duration": 3.56}, {"text": "on right so well we're now looking at", "start": 4759.199, "duration": 5.841}, {"text": "the no let me go back", "start": 4762.239, "duration": 7.0}, {"text": "to full screen for my", "start": 4765.04, "duration": 4.199}, {"text": "presentation so again your your results", "start": 4773.4, "duration": 3.96}, {"text": "are going to be very are going to vary", "start": 4775.679, "duration": 3.881}, {"text": "because you were", "start": 4777.36, "duration": 4.72}, {"text": "um we were working on a on a smaller", "start": 4779.56, "duration": 7.24}, {"text": "problem but overall the um you know the", "start": 4782.08, "duration": 6.44}, {"text": "general finding should look like what I", "start": 4786.8, "duration": 3.6}, {"text": "have here again just like I did for the", "start": 4788.52, "duration": 5.04}, {"text": "Matrix multiply problem my sorry Matrix", "start": 4790.4, "duration": 5.64}, {"text": "multiply problem on left hand side I", "start": 4793.56, "duration": 6.24}, {"text": "have a table for the um AMD flying", "start": 4796.04, "duration": 7.72}, {"text": "compiler on the right for the Intel um I", "start": 4799.8, "duration": 6.439}, {"text": "I for", "start": 4803.76, "duration": 2.479}, {"text": "compiler um same as before the um for", "start": 4806.84, "duration": 6.08}, {"text": "for the AMD compilers default", "start": 4810.639, "duration": 5.281}, {"text": "optimization is equivalent to- o0 but", "start": 4812.92, "duration": 5.96}, {"text": "you'll see that when I actually when", "start": 4815.92, "duration": 5.52}, {"text": "when I manually fuse those Loops that", "start": 4818.88, "duration": 3.92}, {"text": "I'm getting a little bit better", "start": 4821.44, "duration": 3.4}, {"text": "performance so when I'm using a re", "start": 4822.8, "duration": 4.439}, {"text": "reasonable optimization level say of 02", "start": 4824.84, "duration": 5.76}, {"text": "or 03 ran in my case for for this larger", "start": 4827.239, "duration": 6.161}, {"text": "problem about 2.8 seconds instead of", "start": 4830.6, "duration": 6.36}, {"text": "3.6 so you know a modest change but what", "start": 4833.4, "duration": 5.52}, {"text": "is that that saves you you know knocks", "start": 4836.96, "duration": 5.32}, {"text": "about 25% off your runtime we see the", "start": 4838.92, "duration": 5.16}, {"text": "same kind of behavior with a for Trend", "start": 4842.28, "duration": 5.84}, {"text": "compiler again default is um is", "start": 4844.08, "duration": 6.04}, {"text": "equivalent to", "start": 4848.12, "duration": 5.039}, {"text": "d-02 and in this case you know we we", "start": 4850.12, "duration": 6.119}, {"text": "always see that um manually fusing those", "start": 4853.159, "duration": 5.961}, {"text": "Loops resulted in a little bit better", "start": 4856.239, "duration": 6.201}, {"text": "performance um and in this case the the", "start": 4859.12, "duration": 6.44}, {"text": "AMD compiler did slightly better than", "start": 4862.44, "duration": 5.52}, {"text": "the than the Intel compiler but again", "start": 4865.56, "duration": 5.599}, {"text": "that's going to vary from you know from", "start": 4867.96, "duration": 6.679}, {"text": "code to code and also across AMD versus", "start": 4871.159, "duration": 5.721}, {"text": "Intel", "start": 4874.639, "duration": 4.921}, {"text": "Hardware right so sorry let me go back", "start": 4876.88, "duration": 4.759}, {"text": "into full screen", "start": 4879.56, "duration": 5.079}, {"text": "again", "start": 4881.639, "duration": 3.0}, {"text": "all right there's another technique that", "start": 4888.44, "duration": 3.48}, {"text": "we could do very similar to you to Loop", "start": 4889.719, "duration": 5.321}, {"text": "fusion and this is called Loop fision", "start": 4891.92, "duration": 5.319}, {"text": "and this is where we take um where we", "start": 4895.04, "duration": 5.0}, {"text": "take a loop and we split it and", "start": 4897.239, "duration": 4.561}, {"text": "sometimes this can improve the", "start": 4900.04, "duration": 4.96}, {"text": "performance so we already know we", "start": 4901.8, "duration": 6.2}, {"text": "already know from trying this both ways", "start": 4905.0, "duration": 5.6}, {"text": "that for this piece of code that having", "start": 4908.0, "duration": 5.88}, {"text": "fused Loops is better but but sometimes", "start": 4910.6, "duration": 6.24}, {"text": "if you have very very complex loops with", "start": 4913.88, "duration": 5.0}, {"text": "too many different data streams in this", "start": 4916.84, "duration": 4.24}, {"text": "case I mean arrays that we're working on", "start": 4918.88, "duration": 4.04}, {"text": "splitting Loop can can improve", "start": 4921.08, "duration": 4.32}, {"text": "performance and it's often difficult to", "start": 4922.92, "duration": 4.68}, {"text": "decide if the loop should be fused or", "start": 4925.4, "duration": 7.16}, {"text": "split the compiler will try to um will", "start": 4927.6, "duration": 7.079}, {"text": "try to analyze your code and make a best", "start": 4932.56, "duration": 5.119}, {"text": "guess but if in doubt and if this is a", "start": 4934.679, "duration": 5.361}, {"text": "portion of code that's really really", "start": 4937.679, "duration": 4.241}, {"text": "critical it accounts for a significant", "start": 4940.04, "duration": 3.92}, {"text": "amount of the Run time I would try both", "start": 4941.92, "duration": 4.799}, {"text": "and see um see which is faster in", "start": 4943.96, "duration": 4.4}, {"text": "general though if it's going to be", "start": 4946.719, "duration": 3.96}, {"text": "simple Loops like we're working with now", "start": 4948.36, "duration": 5.4}, {"text": "they should be manually", "start": 4950.679, "duration": 5.801}, {"text": "fused okay one of my favorite", "start": 4953.76, "duration": 4.84}, {"text": "optimizations is something called Loop", "start": 4956.48, "duration": 4.92}, {"text": "invariant code motion and this is where", "start": 4958.6, "duration": 5.44}, {"text": "you take a calculation that's going on", "start": 4961.4, "duration": 4.799}, {"text": "inside a loop and instead you", "start": 4964.04, "duration": 5.119}, {"text": "pre-calculate the result pre-calculate", "start": 4966.199, "duration": 5.801}, {"text": "the result outside of the loop and use", "start": 4969.159, "duration": 4.921}, {"text": "that so here's a case you know really", "start": 4972.0, "duration": 4.56}, {"text": "really obvious let's say I have this", "start": 4974.08, "duration": 6.44}, {"text": "Loop over um over elements of array x x", "start": 4976.56, "duration": 8.2}, {"text": "and z and for each element Z sub I I", "start": 4980.52, "duration": 7.56}, {"text": "want X of I plus the square root of C", "start": 4984.76, "duration": 5.72}, {"text": "where C is some constant and you can see", "start": 4988.08, "duration": 5.28}, {"text": "that this is square Ro of C is an", "start": 4990.48, "duration": 6.48}, {"text": "invariant um it's it's the same for", "start": 4993.36, "duration": 6.04}, {"text": "every iteration of the loop so we can", "start": 4996.96, "duration": 4.199}, {"text": "just pull that", "start": 4999.4, "duration": 4.759}, {"text": "outside um I could create a new variable", "start": 5001.159, "duration": 6.361}, {"text": "square root C equals square root of c", "start": 5004.159, "duration": 5.681}, {"text": "and I could then use that in place of", "start": 5007.52, "duration": 5.04}, {"text": "the square root function now a", "start": 5009.84, "duration": 6.12}, {"text": "compiler most compilers for a piece of", "start": 5012.56, "duration": 6.0}, {"text": "code this simple are going to be able to", "start": 5015.96, "duration": 5.12}, {"text": "recognize this but I still recommend", "start": 5018.56, "duration": 4.32}, {"text": "that you do it yourself because there is", "start": 5021.08, "duration": 4.0}, {"text": "no downside and you don't want to count", "start": 5022.88, "duration": 5.24}, {"text": "on the compiler to fix your fix your bad", "start": 5025.08, "duration": 5.52}, {"text": "programing", "start": 5028.12, "duration": 2.48}, {"text": "habits but some times um when we're", "start": 5030.92, "duration": 4.719}, {"text": "working with nested Loops these", "start": 5033.679, "duration": 4.281}, {"text": "invariants are going to be less obvious", "start": 5035.639, "duration": 5.721}, {"text": "and may even be vector's results so this", "start": 5037.96, "duration": 6.08}, {"text": "is actually taken from a from a real", "start": 5041.36, "duration": 7.08}, {"text": "life code modified to um for for the", "start": 5044.04, "duration": 6.639}, {"text": "presentation this was the collaboration", "start": 5048.44, "duration": 3.96}, {"text": "I described earlier with the San Diego", "start": 5050.679, "duration": 5.441}, {"text": "Zoo and the US US Geological Survey so", "start": 5052.4, "duration": 6.36}, {"text": "we have triply nested loops and we're", "start": 5056.12, "duration": 6.32}, {"text": "doing a calculation that depends on", "start": 5058.76, "duration": 6.12}, {"text": "three different positions the X the Y", "start": 5062.44, "duration": 5.12}, {"text": "and Z so you'll see within Loop we do", "start": 5064.88, "duration": 6.6}, {"text": "calculations on x sub i y subj and z", "start": 5067.56, "duration": 7.8}, {"text": "subk so we're taking data we're making", "start": 5071.48, "duration": 7.0}, {"text": "contributions to a 3D grid and that is", "start": 5075.36, "duration": 6.72}, {"text": "the array res in this case res of i j k", "start": 5078.48, "duration": 6.28}, {"text": "and it has that dependency on X Y and", "start": 5082.08, "duration": 6.639}, {"text": "Z so if we look at this we will", "start": 5084.76, "duration": 10.6}, {"text": "notice first of all um the scalar X2 Y2", "start": 5088.719, "duration": 9.761}, {"text": "does not depend on the index K so that", "start": 5095.36, "duration": 5.08}, {"text": "means in that innermost loop we're", "start": 5098.48, "duration": 4.159}, {"text": "calculating that over and over but we", "start": 5100.44, "duration": 5.64}, {"text": "don't need to similarly the square root", "start": 5102.639, "duration": 6.201}, {"text": "of B * X2 Y2 does not depend on the", "start": 5106.08, "duration": 5.0}, {"text": "index", "start": 5108.84, "duration": 6.6}, {"text": "K so what we can do is we can take that", "start": 5111.08, "duration": 7.8}, {"text": "calculation X2 and move it to the", "start": 5115.44, "duration": 5.759}, {"text": "outermost Loop nesy because it's not", "start": 5118.88, "duration": 5.6}, {"text": "going to depend on j or k and then we", "start": 5121.199, "duration": 6.44}, {"text": "can take the calculation of X2 Y2 and", "start": 5124.48, "duration": 7.0}, {"text": "then the square root of B * X2 Y2 and we", "start": 5127.639, "duration": 7.721}, {"text": "can move that into the um up one Lev", "start": 5131.48, "duration": 6.88}, {"text": "Loop Nest scene and now by the time we", "start": 5135.36, "duration": 6.12}, {"text": "get into that innermost Loop instead of", "start": 5138.36, "duration": 4.56}, {"text": "doing all of these additional", "start": 5141.48, "duration": 4.04}, {"text": "calculations all I have to do is", "start": 5142.92, "duration": 4.799}, {"text": "calculate um the", "start": 5145.52, "duration": 5.36}, {"text": "exponent minus a * z^ 2 and then", "start": 5147.719, "duration": 5.721}, {"text": "multiply it by this multiplied by this", "start": 5150.88, "duration": 4.64}, {"text": "um term that I had calculat which is", "start": 5153.44, "duration": 5.199}, {"text": "going to be the same for every iteration", "start": 5155.52, "duration": 5.36}, {"text": "of the innermost", "start": 5158.639, "duration": 5.201}, {"text": "Loop but we can we can take this a step", "start": 5160.88, "duration": 7.52}, {"text": "further we'll notice that Z2 or z^2 does", "start": 5163.84, "duration": 7.92}, {"text": "not depend on the indices I or", "start": 5168.4, "duration": 7.319}, {"text": "J and of course um the exponent of minus", "start": 5171.76, "duration": 9.28}, {"text": "a * Z2 does not depend on I or J either", "start": 5175.719, "duration": 7.561}, {"text": "so what we can do", "start": 5181.04, "duration": 5.88}, {"text": "is a little bit more complex in Loop inv", "start": 5183.28, "duration": 7.16}, {"text": "variant code Motion in this case we can", "start": 5186.92, "duration": 5.84}, {"text": "pre-calculate a vector that I'm going to", "start": 5190.44, "duration": 4.239}, {"text": "call Z", "start": 5192.76, "duration": 4.56}, {"text": "term pre-calculate that move that", "start": 5194.679, "duration": 5.921}, {"text": "outside of this triply nested Loop and", "start": 5197.32, "duration": 8.6}, {"text": "then in the very um inner loop nesting I", "start": 5200.6, "duration": 8.44}, {"text": "can just call that term Z term of K then", "start": 5205.92, "duration": 6.6}, {"text": "multiply it by the square root of X2 Y2", "start": 5209.04, "duration": 6.04}, {"text": "and by doing this we are going to make", "start": 5212.52, "duration": 6.04}, {"text": "our code a lot lot faster so in fact", "start": 5215.08, "duration": 6.8}, {"text": "pre-calculating um pre-calculating this", "start": 5218.56, "duration": 6.72}, {"text": "it redu reduces the number of", "start": 5221.88, "duration": 6.759}, {"text": "exponential evaluations from NS to sorry", "start": 5225.28, "duration": 9.0}, {"text": "to NZ from NX X NY * NZ so we have", "start": 5228.639, "duration": 8.321}, {"text": "reduced the amount of work um", "start": 5234.28, "duration": 4.919}, {"text": "calculating those exponentials by a", "start": 5236.96, "duration": 4.88}, {"text": "factor of the horizontal grid Dimensions", "start": 5239.199, "duration": 4.96}, {"text": "n x * NY and this is something that was", "start": 5241.84, "duration": 4.319}, {"text": "actually implementing the code and", "start": 5244.159, "duration": 4.641}, {"text": "resulted in a tremendous speed up since", "start": 5246.159, "duration": 6.601}, {"text": "exponentials are very expensive to", "start": 5248.8, "duration": 3.96}, {"text": "calculate um another technique um is", "start": 5253.239, "duration": 5.161}, {"text": "something called Loop peeling and this", "start": 5256.239, "duration": 5.801}, {"text": "is where we recognize one or more", "start": 5258.4, "duration": 7.12}, {"text": "iterations within a loop or are special", "start": 5262.04, "duration": 6.56}, {"text": "and we can handle them as a", "start": 5265.52, "duration": 5.679}, {"text": "oneoff instead of instead of say doing a", "start": 5268.6, "duration": 4.36}, {"text": "doing a test and ins side the loop", "start": 5271.199, "duration": 4.081}, {"text": "excuse", "start": 5272.96, "duration": 2.32}, {"text": "me sorry for that", "start": 5278.56, "duration": 6.8}, {"text": "um and sometimes Loop peeling can then", "start": 5281.44, "duration": 7.239}, {"text": "be combined with Loop Fusion so here's", "start": 5285.36, "duration": 5.56}, {"text": "an example where we have two Loops the", "start": 5288.679, "duration": 7.161}, {"text": "first one um is over I equal Z to to n", "start": 5290.92, "duration": 7.279}, {"text": "the next one is over IAL 1 to n and", "start": 5295.84, "duration": 4.48}, {"text": "within that first Loop we have one", "start": 5298.199, "duration": 5.241}, {"text": "special case if I is equal to zero we do", "start": 5300.32, "duration": 6.48}, {"text": "something different we calculate um X of", "start": 5303.44, "duration": 5.16}, {"text": "I / y of", "start": 5306.8, "duration": 5.439}, {"text": "I but that only happens once so what we", "start": 5308.6, "duration": 6.84}, {"text": "can do is we could take that special", "start": 5312.239, "duration": 6.4}, {"text": "case we could pull it outside we could", "start": 5315.44, "duration": 8.48}, {"text": "calculate um we could calculate Z of Z", "start": 5318.639, "duration": 8.0}, {"text": "explicitly then change the change that", "start": 5323.92, "duration": 5.52}, {"text": "Loop so that it starts at iteration one", "start": 5326.639, "duration": 5.6}, {"text": "instead of zero and now we also have two", "start": 5329.44, "duration": 6.16}, {"text": "loops with the with the same bounds so", "start": 5332.239, "duration": 6.44}, {"text": "we can combine them into a into a single", "start": 5335.6, "duration": 6.44}, {"text": "Loop so this was a um you know classic", "start": 5338.679, "duration": 6.44}, {"text": "example of loop peeling followed by", "start": 5342.04, "duration": 5.36}, {"text": "followed by Fusion but even if you don't", "start": 5345.119, "duration": 4.721}, {"text": "have those Loops to those two Loops to", "start": 5347.4, "duration": 4.92}, {"text": "fuse just taking that special case and", "start": 5349.84, "duration": 4.72}, {"text": "pulling it outside so that you don't", "start": 5352.32, "duration": 4.6}, {"text": "have to do that logical test each time", "start": 5354.56, "duration": 5.679}, {"text": "is going to give you a big speed", "start": 5356.92, "duration": 3.319}, {"text": "up", "start": 5360.92, "duration": 3.0}, {"text": "there's a technique called Loop", "start": 5365.159, "duration": 3.441}, {"text": "unrolling", "start": 5367.08, "duration": 4.24}, {"text": "and it's very very", "start": 5368.6, "duration": 6.0}, {"text": "powerful um where you take the body of", "start": 5371.32, "duration": 6.16}, {"text": "the loop and you replicate it and then", "start": 5374.6, "duration": 5.48}, {"text": "you modify the stride and this", "start": 5377.48, "duration": 5.0}, {"text": "optimization can help the processor make", "start": 5380.08, "duration": 4.079}, {"text": "much better use of what they call the", "start": 5382.48, "duration": 4.08}, {"text": "arithmetic units the piece of Hardware", "start": 5384.159, "duration": 5.201}, {"text": "that do the additions and subtractions", "start": 5386.56, "duration": 5.48}, {"text": "division divisions and square roots", "start": 5389.36, "duration": 5.319}, {"text": "essentially you're making the loop more", "start": 5392.04, "duration": 5.4}, {"text": "complex which may seem like a bad thing", "start": 5394.679, "duration": 5.721}, {"text": "but it gives the compiler a lot more", "start": 5397.44, "duration": 4.84}, {"text": "instructions to work with so it could", "start": 5400.4, "duration": 4.0}, {"text": "reorder them and and get better", "start": 5402.28, "duration": 4.68}, {"text": "performance so in this case I had a loop", "start": 5404.4, "duration": 5.96}, {"text": "um I equal 0 to to 1024 where I'm simply", "start": 5406.96, "duration": 6.6}, {"text": "adding um X and Y element by element and", "start": 5410.36, "duration": 6.92}, {"text": "storing them to aray Z in Loop unrolling", "start": 5413.56, "duration": 6.159}, {"text": "I'm going to take the body of that Loop", "start": 5417.28, "duration": 5.6}, {"text": "in this case I replicate it four times", "start": 5419.719, "duration": 7.801}, {"text": "I calculate z i + 1 I + 2 I + 3 and I", "start": 5422.88, "duration": 6.68}, {"text": "set my stride to", "start": 5427.52, "duration": 4.679}, {"text": "four um and this this is generally going", "start": 5429.56, "duration": 4.96}, {"text": "to give you a lot better performance but", "start": 5432.199, "duration": 4.601}, {"text": "I will warn you though that this is an", "start": 5434.52, "duration": 4.159}, {"text": "optimization that you probably don't", "start": 5436.8, "duration": 4.879}, {"text": "want to try yourself um optimizing", "start": 5438.679, "duration": 6.201}, {"text": "compilers are really really really good", "start": 5441.679, "duration": 5.761}, {"text": "at at at Loop unrolling and if you", "start": 5444.88, "duration": 4.839}, {"text": "manually un unroll your loop it's going", "start": 5447.44, "duration": 4.0}, {"text": "to make your code a little bit uglier a", "start": 5449.719, "duration": 3.041}, {"text": "little a little more difficult to", "start": 5451.44, "duration": 3.279}, {"text": "maintain and you can see that I'm going", "start": 5452.76, "duration": 4.359}, {"text": "to need to write explicitly write some", "start": 5454.719, "duration": 5.641}, {"text": "cleanup code in this case if my um", "start": 5457.119, "duration": 5.681}, {"text": "number of iterations was not divisible", "start": 5460.36, "duration": 6.4}, {"text": "by four so again I would avoid manually", "start": 5462.8, "duration": 7.2}, {"text": "doing Loop unrolling since the unrolling", "start": 5466.76, "duration": 6.04}, {"text": "depth is going to be um highly dependent", "start": 5470.0, "duration": 5.76}, {"text": "on the processor", "start": 5472.8, "duration": 7.16}, {"text": "architecture but in some rare rare rare", "start": 5475.76, "duration": 6.8}, {"text": "cases you can actually beat the compiler", "start": 5479.96, "duration": 4.239}, {"text": "so that's why I want you to be be aware", "start": 5482.56, "duration": 5.48}, {"text": "of the of this technique um I had worked", "start": 5484.199, "duration": 6.641}, {"text": "on a chemistry application with a", "start": 5488.04, "duration": 5.84}, {"text": "collaborator here at UCSD a few years", "start": 5490.84, "duration": 6.68}, {"text": "ago where he had these incredibly", "start": 5493.88, "duration": 7.12}, {"text": "incredibly complex Loops so I'm showing", "start": 5497.52, "duration": 8.8}, {"text": "one here where um the original Loop was", "start": 5501.0, "duration": 8.08}, {"text": "I equal 0 0 to", "start": 5506.32, "duration": 6.2}, {"text": "4319 with a stride of two", "start": 5509.08, "duration": 6.52}, {"text": "and what I did was instead", "start": 5512.52, "duration": 6.92}, {"text": "of um using the original loop I unrolled", "start": 5515.6, "duration": 6.119}, {"text": "this by an additional by additional", "start": 5519.44, "duration": 5.48}, {"text": "factor of four now this Loop was really", "start": 5521.719, "duration": 5.881}, {"text": "really incredibly complex it was code", "start": 5524.92, "duration": 4.68}, {"text": "that was not written by hand in fact it", "start": 5527.6, "duration": 5.4}, {"text": "was automatically generated um as a fit", "start": 5529.6, "duration": 6.119}, {"text": "to some quantum chemistry results and", "start": 5533.0, "duration": 4.36}, {"text": "there are many many Loops like this", "start": 5535.719, "duration": 3.761}, {"text": "within within the functions I even have", "start": 5537.36, "duration": 4.12}, {"text": "a line here that shows several hundred", "start": 5539.48, "duration": 4.759}, {"text": "lines of code not shown it was so much", "start": 5541.48, "duration": 5.32}, {"text": "code it was so complex that the compiler", "start": 5544.239, "duration": 4.601}, {"text": "couldn't figure out what the best un", "start": 5546.8, "duration": 4.359}, {"text": "rolling does was so it just gave up I", "start": 5548.84, "duration": 4.48}, {"text": "was able to do it by hand but I'm going", "start": 5551.159, "duration": 5.161}, {"text": "to say in 25 years of doing this kind of", "start": 5553.32, "duration": 6.04}, {"text": "work this was the only time I have ever", "start": 5556.32, "duration": 7.12}, {"text": "been able to unroll a loop and beat the", "start": 5559.36, "duration": 4.08}, {"text": "compiler um there's another", "start": 5566.48, "duration": 4.88}, {"text": "technique um there's probably a more", "start": 5568.8, "duration": 4.08}, {"text": "Tech technical name for this but I", "start": 5571.36, "duration": 3.72}, {"text": "haven't been able to find it and that's", "start": 5572.88, "duration": 4.16}, {"text": "what I call just breaking out of a loop", "start": 5575.08, "duration": 4.639}, {"text": "early", "start": 5577.04, "duration": 5.119}, {"text": "um this gets to be a little more", "start": 5579.719, "duration": 4.041}, {"text": "difficult because it's going to require", "start": 5582.159, "duration": 3.361}, {"text": "that you understand the semantics of", "start": 5583.76, "duration": 4.879}, {"text": "your code so this was from a", "start": 5585.52, "duration": 5.08}, {"text": "computational finance collaboration that", "start": 5588.639, "duration": 4.56}, {"text": "I did with the University of Illinois um", "start": 5590.6, "duration": 5.28}, {"text": "stripping this way down there was a loop", "start": 5593.199, "duration": 6.761}, {"text": "um I equals 0 to n where for each", "start": 5595.88, "duration": 7.96}, {"text": "element of Y if Y subi is less than a", "start": 5599.96, "duration": 8.239}, {"text": "constant I do some stuff and if it's not", "start": 5603.84, "duration": 7.44}, {"text": "then I continue on to the next", "start": 5608.199, "duration": 6.0}, {"text": "iteration now this was a case where I", "start": 5611.28, "duration": 5.52}, {"text": "was able to where I was able to use my", "start": 5614.199, "duration": 5.681}, {"text": "knowledge of the code and the fact that", "start": 5616.8, "duration": 6.24}, {"text": "the elements of array y are", "start": 5619.88, "duration": 5.799}, {"text": "monotonically increasing so that is we", "start": 5623.04, "duration": 5.92}, {"text": "are absolutely guaranteed that y Sub 0", "start": 5625.679, "duration": 5.321}, {"text": "is less than y sub 1 Which is less than", "start": 5628.96, "duration": 4.48}, {"text": "y sub 2 Which is less than y sub3 and so", "start": 5631.0, "duration": 5.44}, {"text": "on um that the array I believe actually", "start": 5633.44, "duration": 7.0}, {"text": "corresponded to time stamps so the", "start": 5636.44, "duration": 8.52}, {"text": "compiler has no way of knowing what um", "start": 5640.44, "duration": 6.799}, {"text": "what what is that array y so it's only", "start": 5644.96, "duration": 4.64}, {"text": "with our domain knowledge that we were", "start": 5647.239, "duration": 5.641}, {"text": "then able to implement an additional um", "start": 5649.6, "duration": 4.24}, {"text": "additional", "start": 5652.88, "duration": 4.359}, {"text": "optimization because once Y is greater", "start": 5653.84, "duration": 6.2}, {"text": "than equal to the constant the first", "start": 5657.239, "duration": 5.081}, {"text": "time it's going to be greater than equal", "start": 5660.04, "duration": 4.44}, {"text": "to the constant for all subsequent", "start": 5662.32, "duration": 4.56}, {"text": "elements in the array so in that case we", "start": 5664.48, "duration": 5.04}, {"text": "often by by putting this this small", "start": 5666.88, "duration": 4.64}, {"text": "change we're able to break out of loop", "start": 5669.52, "duration": 4.199}, {"text": "early and get a really really big speed", "start": 5671.52, "duration": 5.24}, {"text": "up so this is the case", "start": 5673.719, "duration": 6.161}, {"text": "where the compiler only understands the", "start": 5676.76, "duration": 5.56}, {"text": "syntax of your code and cannot do this", "start": 5679.88, "duration": 5.44}, {"text": "optimization for", "start": 5682.32, "duration": 3.0}, {"text": "you and then I have something that I", "start": 5687.239, "duration": 3.96}, {"text": "call optimizing for the common case and", "start": 5689.199, "duration": 3.241}, {"text": "this is getting a little bit more", "start": 5691.199, "duration": 3.881}, {"text": "complicated um but we had a you know got", "start": 5692.44, "duration": 5.239}, {"text": "a big payoff from this so this was from", "start": 5695.08, "duration": 5.2}, {"text": "a collaboration I did with enar national", "start": 5697.679, "duration": 4.96}, {"text": "Center for atmospheric research they had", "start": 5700.28, "duration": 6.32}, {"text": "a new um Global Climate code called Mass", "start": 5702.639, "duration": 6.48}, {"text": "model for prediction across scales", "start": 5706.6, "duration": 4.44}, {"text": "collaboration between enar and Los", "start": 5709.119, "duration": 5.201}, {"text": "Alamos National Lab simulates atmosphere", "start": 5711.04, "duration": 6.84}, {"text": "ocean um and and other systems all", "start": 5714.32, "duration": 5.919}, {"text": "coupled together in this case instead of", "start": 5717.88, "duration": 5.6}, {"text": "using a rectangular grid they use a use", "start": 5720.239, "duration": 6.761}, {"text": "an unstructured grid that is composed", "start": 5723.48, "duration": 7.159}, {"text": "overwhelmingly of hexagons plus a very", "start": 5727.0, "duration": 6.56}, {"text": "small number of pentagons and heptagons", "start": 5730.639, "duration": 5.361}, {"text": "so you can prove mathematically that you", "start": 5733.56, "duration": 5.24}, {"text": "can't entirely cover a sphere with", "start": 5736.0, "duration": 6.48}, {"text": "hexagons you'll need um I believe that", "start": 5738.8, "duration": 6.319}, {"text": "you'll need at least 12 pentagons in", "start": 5742.48, "duration": 5.639}, {"text": "there but in this case you know out of", "start": 5745.119, "duration": 7.52}, {"text": "the many many thousands of grid cells", "start": 5748.119, "duration": 6.201}, {"text": "vast majority", "start": 5752.639, "duration": 3.841}, {"text": "99.99% were were", "start": 5754.32, "duration": 5.04}, {"text": "hexagons and we were able to take", "start": 5756.48, "duration": 6.48}, {"text": "advantage of this fact again us knowing", "start": 5759.36, "duration": 6.56}, {"text": "the um us knowing the the semantics of", "start": 5762.96, "duration": 6.239}, {"text": "the code whereas the compiler can only", "start": 5765.92, "duration": 5.4}, {"text": "understand the structure the the", "start": 5769.199, "duration": 7.241}, {"text": "syntax where we had um a loop over all", "start": 5771.32, "duration": 7.799}, {"text": "of the edges for for each cell whether", "start": 5776.44, "duration": 5.799}, {"text": "or not it was a pentagon or or hex G so", "start": 5779.119, "duration": 6.841}, {"text": "what we did was we split out the code we", "start": 5782.239, "duration": 6.361}, {"text": "looked we we wrote a special block of", "start": 5785.96, "duration": 3.719}, {"text": "code for", "start": 5788.6, "duration": 4.8}, {"text": "hexagons um when we you know we we can", "start": 5789.679, "duration": 6.321}, {"text": "we can test each cell see is this a", "start": 5793.4, "duration": 5.4}, {"text": "hexagon good we're not going to iterate", "start": 5796.0, "duration": 4.04}, {"text": "we're not going to have a loop over the", "start": 5798.8, "duration": 2.839}, {"text": "edges instead we're just going to write", "start": 5800.04, "duration": 3.599}, {"text": "this special piece of code and then", "start": 5801.639, "duration": 4.361}, {"text": "we'll have the default code that picks", "start": 5803.639, "duration": 5.841}, {"text": "up those um small numbers of pentagons", "start": 5806.0, "duration": 5.8}, {"text": "and heptagons and that was able to give", "start": 5809.48, "duration": 4.52}, {"text": "us a really big speed up I believe this", "start": 5811.8, "duration": 4.359}, {"text": "chunk of code", "start": 5814.0, "duration": 6.639}, {"text": "ran oh this particular piece maybe 40%", "start": 5816.159, "duration": 6.841}, {"text": "faster which given that this is a global", "start": 5820.639, "duration": 4.201}, {"text": "climate code that's going to be running", "start": 5823.0, "duration": 4.159}, {"text": "on thousands of nodes we consider to be", "start": 5824.84, "duration": 5.279}, {"text": "a really big", "start": 5827.159, "duration": 5.361}, {"text": "win okay I'm going to talk about one", "start": 5830.119, "duration": 4.401}, {"text": "more type of optimization then we'll do", "start": 5832.52, "duration": 3.48}, {"text": "another example and this is something", "start": 5834.52, "duration": 4.08}, {"text": "called Force reduction and a force", "start": 5836.0, "duration": 5.32}, {"text": "reduction is when you replace an", "start": 5838.6, "duration": 5.44}, {"text": "expensive operation with an equivalent", "start": 5841.32, "duration": 6.44}, {"text": "less expensive one so exponentiation", "start": 5844.04, "duration": 6.36}, {"text": "operations especially a floating Point", "start": 5847.76, "duration": 4.919}, {"text": "base Race So floating Point number is", "start": 5850.4, "duration": 3.719}, {"text": "incredibly", "start": 5852.679, "duration": 3.401}, {"text": "expensive", "start": 5854.119, "duration": 5.08}, {"text": "um the the trig functions logarithms and", "start": 5856.08, "duration": 5.8}, {"text": "so on are expensive so I'm going to say", "start": 5859.199, "duration": 6.04}, {"text": "if you know an exponent at at compile", "start": 5861.88, "duration": 6.48}, {"text": "time instead of calling you know the", "start": 5865.239, "duration": 6.0}, {"text": "power the exponentiation function you", "start": 5868.36, "duration": 5.6}, {"text": "can just write out a series of a series", "start": 5871.239, "duration": 6.721}, {"text": "of um multiplications so in this case X", "start": 5873.96, "duration": 6.639}, {"text": "um x to the e8th power I could calculate", "start": 5877.96, "duration": 6.56}, {"text": "X2 and then x x 4th from X2 and then X", "start": 5880.599, "duration": 7.52}, {"text": "the e8th from from X 4th um doesn't come", "start": 5884.52, "duration": 5.28}, {"text": "up too often but sometimes you're going", "start": 5888.119, "duration": 4.801}, {"text": "to yeah you'll have to raise", "start": 5889.8, "duration": 7.6}, {"text": "um raise bases to the to to a fractional", "start": 5892.92, "duration": 7.16}, {"text": "power say like the 1.5 power and if I", "start": 5897.4, "duration": 6.319}, {"text": "could take po X comma 1.5 and rewrite", "start": 5900.08, "duration": 8.28}, {"text": "that as x * X I'm going to get a um get", "start": 5903.719, "duration": 7.121}, {"text": "a lot better", "start": 5908.36, "duration": 2.48}, {"text": "performance place where you might um", "start": 5911.119, "duration": 5.08}, {"text": "find better use for or more more common", "start": 5913.92, "duration": 4.799}, {"text": "use for Force reduction is with trig", "start": 5916.199, "duration": 4.881}, {"text": "functions so go back to your high school", "start": 5918.719, "duration": 5.561}, {"text": "math if you have a code that does a lot", "start": 5921.08, "duration": 5.519}, {"text": "of trigonometry see if there are ways", "start": 5924.28, "duration": 4.76}, {"text": "that you could that you could rewrite it", "start": 5926.599, "duration": 5.241}, {"text": "so for example if I had a sinx * cosine", "start": 5929.04, "duration": 6.679}, {"text": "X that's equivalent to 12 * the sin of", "start": 5931.84, "duration": 7.44}, {"text": "2x where I have sinx cosine y plus", "start": 5935.719, "duration": 6.281}, {"text": "cosine X sin y That's equivalent to sin", "start": 5939.28, "duration": 6.56}, {"text": "XY in the first case I've gone from two", "start": 5942.0, "duration": 6.76}, {"text": "trig evaluating two trig functions to", "start": 5945.84, "duration": 5.24}, {"text": "just one in the second case I've gone", "start": 5948.76, "duration": 5.32}, {"text": "from four Trigon four trig functions", "start": 5951.08, "duration": 5.559}, {"text": "down to one so I could get a lot of", "start": 5954.08, "duration": 4.2}, {"text": "speed up there there are some other", "start": 5956.639, "duration": 3.52}, {"text": "tricks that you could do just make sure", "start": 5958.28, "duration": 4.04}, {"text": "that you test this thoroughly and that", "start": 5960.159, "duration": 4.721}, {"text": "you um make sure that any identities", "start": 5962.32, "duration": 4.76}, {"text": "that you apply apply to all four", "start": 5964.88, "duration": 4.92}, {"text": "quadrants you know so for X and Y both", "start": 5967.08, "duration": 7.48}, {"text": "positive both negative and X or Y um", "start": 5969.8, "duration": 7.52}, {"text": "what one positive and one negative so", "start": 5974.56, "duration": 6.88}, {"text": "lot of opportunity for for speed", "start": 5977.32, "duration": 4.12}, {"text": "up um also look for hidden opportunities", "start": 5981.84, "duration": 5.0}, {"text": "for Force", "start": 5985.4, "duration": 3.56}, {"text": "reductions um this is often going to", "start": 5986.84, "duration": 4.24}, {"text": "come up in logical tests that could be", "start": 5988.96, "duration": 4.4}, {"text": "written in more efficient ways think", "start": 5991.08, "duration": 4.72}, {"text": "about what results are really needed um", "start": 5993.36, "duration": 4.879}, {"text": "this is again taken from from real life", "start": 5995.8, "duration": 5.08}, {"text": "example where let's say I have a loop", "start": 5998.239, "duration": 6.041}, {"text": "over um you know over elements elements", "start": 6000.88, "duration": 7.52}, {"text": "of X I have my 4 IAL 0 to n and then I", "start": 6004.28, "duration": 8.04}, {"text": "want to test is log of x of I let less", "start": 6008.4, "duration": 5.719}, {"text": "than a constant and if so I'm going to", "start": 6012.32, "duration": 2.839}, {"text": "inclement a", "start": 6014.119, "duration": 3.441}, {"text": "counter well when you think about it we", "start": 6015.159, "duration": 5.121}, {"text": "don't really need the logarithm of X", "start": 6017.56, "duration": 5.079}, {"text": "we're just compar comparing log X to a", "start": 6020.28, "duration": 5.839}, {"text": "constant so what I could do here is", "start": 6022.639, "duration": 8.08}, {"text": "instead of comparing log X to C I could", "start": 6026.119, "duration": 10.08}, {"text": "instead compare X to um the exponent of", "start": 6030.719, "duration": 8.641}, {"text": "of C so e to the C so I could take", "start": 6036.199, "duration": 6.361}, {"text": "expc Define that as the exponent called", "start": 6039.36, "duration": 6.16}, {"text": "of c and then use that within my Loop so", "start": 6042.56, "duration": 7.0}, {"text": "now we can um we can avoid that that", "start": 6045.52, "duration": 6.719}, {"text": "expensive logarithm calculation and just", "start": 6049.56, "duration": 4.28}, {"text": "do a simple", "start": 6052.239, "duration": 3.801}, {"text": "comparison and with that we are going to", "start": 6053.84, "duration": 6.72}, {"text": "do um one more exercise so let me go", "start": 6056.04, "duration": 5.92}, {"text": "ahead and get", "start": 6060.56, "duration": 6.36}, {"text": "my um entire screen shared", "start": 6061.96, "duration": 4.96}, {"text": "again so I'm going to this case I'm", "start": 6067.8, "duration": 8.04}, {"text": "going to go into the performance", "start": 6072.76, "duration": 4.8}, {"text": "directory I'm going to go into", "start": 6075.84, "duration": 3.839}, {"text": "performance", "start": 6077.56, "duration": 7.559}, {"text": "tuning and and into Force", "start": 6079.679, "duration": 5.44}, {"text": "reduction and in this case I'm going to", "start": 6086.96, "duration": 6.4}, {"text": "let's take a look at the at the", "start": 6089.639, "duration": 3.721}, {"text": "code and the real guts of the code", "start": 6102.56, "duration": 5.2}, {"text": "are", "start": 6105.92, "duration": 3.92}, {"text": "um go down", "start": 6107.76, "duration": 5.08}, {"text": "here", "start": 6109.84, "duration": 3.0}, {"text": "we're looking at looking at C code in", "start": 6113.48, "duration": 3.759}, {"text": "this", "start": 6115.48, "duration": 5.08}, {"text": "case just a", "start": 6117.239, "duration": 3.321}, {"text": "minute so so what I've done is I've um f", "start": 6123.96, "duration": 6.88}, {"text": "filled the arrays X and Y with random", "start": 6128.44, "duration": 4.679}, {"text": "numbers be between zero and one you", "start": 6130.84, "duration": 3.96}, {"text": "could think of these as representing", "start": 6133.119, "duration": 5.0}, {"text": "points in a plane and I want to find", "start": 6134.8, "duration": 6.48}, {"text": "every pair of points count how many how", "start": 6138.119, "duration": 6.0}, {"text": "many points are within a are within a", "start": 6141.28, "duration": 4.16}, {"text": "cutof distance of each other we're going", "start": 6144.119, "duration": 6.681}, {"text": "to call that um a distance Dell", "start": 6145.44, "duration": 5.36}, {"text": "so here I'm going to be looping over", "start": 6151.119, "duration": 8.52}, {"text": "um looping over looping over I looping", "start": 6156.599, "duration": 5.721}, {"text": "over J um I did a little trick here so", "start": 6159.639, "duration": 4.801}, {"text": "that I don't have to do so so that I", "start": 6162.32, "duration": 5.24}, {"text": "don't double count so I have 4 I = 1 to", "start": 6164.44, "duration": 6.679}, {"text": "nus1 and then j = i + 1 to n so so this", "start": 6167.56, "duration": 4.679}, {"text": "way I'm", "start": 6171.119, "duration": 4.0}, {"text": "explicitly I'm explicitly considering", "start": 6172.239, "duration": 5.561}, {"text": "each pair of particles once and of", "start": 6175.119, "duration": 4.281}, {"text": "course avoiding the case where we're", "start": 6177.8, "duration": 4.48}, {"text": "comparing a particle against itself and", "start": 6179.4, "duration": 7.52}, {"text": "then we calculate the squar distance", "start": 6182.28, "duration": 5.879}, {"text": "between those", "start": 6186.92, "duration": 4.279}, {"text": "particles and then we want to see is", "start": 6188.159, "duration": 5.721}, {"text": "that is the square root of that distance", "start": 6191.199, "duration": 5.241}, {"text": "less than a less than some cut off here", "start": 6193.88, "duration": 5.88}, {"text": "we called it called it Dell um in the", "start": 6196.44, "duration": 5.0}, {"text": "case where I did not have Force", "start": 6199.76, "duration": 3.68}, {"text": "reduction sorry in the case where I do", "start": 6201.44, "duration": 3.44}, {"text": "have Force", "start": 6203.44, "duration": 4.0}, {"text": "reduction I'm a little clever and I", "start": 6204.88, "duration": 5.2}, {"text": "recognize I don't really need R I just", "start": 6207.44, "duration": 6.0}, {"text": "need r squared and I can compare that to", "start": 6210.08, "duration": 6.639}, {"text": "the um to the cut off", "start": 6213.44, "duration": 7.84}, {"text": "squared so with that again if we look in", "start": 6216.719, "duration": 8.121}, {"text": "the commands", "start": 6221.28, "duration": 3.56}, {"text": "files", "start": 6229.679, "duration": 3.0}, {"text": "we'll see that we for for AMD we first", "start": 6232.92, "duration": 4.64}, {"text": "load the aocc", "start": 6235.4, "duration": 4.88}, {"text": "compilers um we", "start": 6237.56, "duration": 5.48}, {"text": "do um well we compiled this time with", "start": 6240.28, "duration": 4.28}, {"text": "clang which is the", "start": 6243.04, "duration": 4.44}, {"text": "aocc um C", "start": 6244.56, "duration": 6.639}, {"text": "compiler we build the code you know with", "start": 6247.48, "duration": 6.0}, {"text": "and without the force reductions we give", "start": 6251.199, "duration": 4.201}, {"text": "each of those executables different", "start": 6253.48, "duration": 6.0}, {"text": "names and then we um execute them where", "start": 6255.4, "duration": 5.56}, {"text": "the first number is the number number of", "start": 6259.48, "duration": 4.28}, {"text": "particles and the second number is the", "start": 6260.96, "duration": 6.12}, {"text": "cut off so I'm going to say go ahead um", "start": 6263.76, "duration": 6.6}, {"text": "execute these codes with with both the", "start": 6267.08, "duration": 6.96}, {"text": "the AMD and the intel if the AMD takes", "start": 6270.36, "duration": 6.0}, {"text": "long you don't you don't need need to do", "start": 6274.04, "duration": 4.639}, {"text": "the second case so let's execute that", "start": 6276.36, "duration": 5.759}, {"text": "keep track of the run times and they'll", "start": 6278.679, "duration": 6.0}, {"text": "report by the", "start": 6282.119, "duration": 2.56}, {"text": "code", "start": 6289.56, "duration": 3.0}, {"text": "and and this problem doesn't use that", "start": 6311.56, "duration": 4.039}, {"text": "much memory so if you're interested you", "start": 6313.44, "duration": 5.36}, {"text": "can go in there and TI Tinker with", "start": 6315.599, "duration": 5.201}, {"text": "different values of n um different", "start": 6318.8, "duration": 4.72}, {"text": "values of cut off I think that the ratio", "start": 6320.8, "duration": 5.879}, {"text": "of that the run times for with and", "start": 6323.52, "duration": 4.8}, {"text": "without Force reduction is going to be", "start": 6326.679, "duration": 4.641}, {"text": "pretty consistent", "start": 6328.32, "duration": 3.0}, {"text": "though and I'll just give you a few", "start": 6345.36, "duration": 5.799}, {"text": "minutes to do that and", "start": 6347.84, "duration": 5.24}, {"text": "um maybe wait about two minutes and then", "start": 6351.159, "duration": 4.44}, {"text": "we'll see if anybody had gotten stuck", "start": 6353.08, "duration": 6.2}, {"text": "all right so I'll go on to the next", "start": 6355.599, "duration": 7.52}, {"text": "slide um let me", "start": 6359.28, "duration": 7.48}, {"text": "just go back", "start": 6363.119, "duration": 3.641}, {"text": "to full screen", "start": 6368.679, "duration": 3.881}, {"text": "again okay so you should have gotten", "start": 6375.88, "duration": 3.839}, {"text": "results that look look something like", "start": 6377.92, "duration": 4.44}, {"text": "this you know when we're when we did the", "start": 6379.719, "duration": 5.361}, {"text": "force reduction we compared the square", "start": 6382.36, "duration": 4.799}, {"text": "of the distance the particles to the", "start": 6385.08, "duration": 4.0}, {"text": "square of the cut off and without the", "start": 6387.159, "duration": 5.361}, {"text": "force reduction we actually compared the", "start": 6389.08, "duration": 5.639}, {"text": "distance between the particles to the to", "start": 6392.52, "duration": 4.8}, {"text": "the cut off and ex we got we got quite a", "start": 6394.719, "duration": 6.48}, {"text": "speed up it's almost a factor of three", "start": 6397.32, "duration": 6.319}, {"text": "because in this case um square roots are", "start": 6401.199, "duration": 4.881}, {"text": "are pretty expensive compared to just", "start": 6403.639, "duration": 3.56}, {"text": "simple", "start": 6406.08, "duration": 3.92}, {"text": "comparisons so with you know very very", "start": 6407.199, "duration": 3.761}, {"text": "little", "start": 6410.0, "duration": 3.76}, {"text": "very very little effort we were able to", "start": 6410.96, "duration": 5.199}, {"text": "um really really improve the performance", "start": 6413.76, "duration": 3.879}, {"text": "again you'll see a little bit of", "start": 6416.159, "duration": 5.241}, {"text": "difference between the runtimes for the", "start": 6417.639, "duration": 8.201}, {"text": "um for for for the Intel and the um AMD", "start": 6421.4, "duration": 7.839}, {"text": "compilers in this case the AMD compilers", "start": 6425.84, "duration": 5.399}, {"text": "were just the smidge and faster and I", "start": 6429.239, "duration": 3.4}, {"text": "think you're going to find that", "start": 6431.239, "duration": 3.041}, {"text": "generally holds when you're running", "start": 6432.639, "duration": 5.361}, {"text": "running non expans but again be sure to", "start": 6434.28, "duration": 5.76}, {"text": "um test the compilers to see which gives", "start": 6438.0, "duration": 4.639}, {"text": "you the best", "start": 6440.04, "duration": 2.599}, {"text": "performance all right so that's going to", "start": 6442.679, "duration": 3.121}, {"text": "be the last example we're going to do", "start": 6444.44, "duration": 3.48}, {"text": "today I'm just going to run through a", "start": 6445.8, "duration": 4.919}, {"text": "few more um a few more techniques and", "start": 6447.92, "duration": 5.48}, {"text": "then maybe cut you loose and see if you", "start": 6450.719, "duration": 6.081}, {"text": "have any questions so to me this is", "start": 6453.4, "duration": 5.4}, {"text": "where things get really really", "start": 6456.8, "duration": 3.839}, {"text": "interesting where we start doing", "start": 6458.8, "duration": 4.04}, {"text": "interprocedural optimizations where", "start": 6460.639, "duration": 5.04}, {"text": "we're looking at a highlevel view of the", "start": 6462.84, "duration": 5.359}, {"text": "entire program spanning multiple", "start": 6465.679, "duration": 5.601}, {"text": "functions maybe multiple files so a lot", "start": 6468.199, "duration": 5.561}, {"text": "of what we did", "start": 6471.28, "duration": 5.879}, {"text": "um you know optimizing Loops um", "start": 6473.76, "duration": 5.32}, {"text": "unrolling and fusion and splitting and", "start": 6477.159, "duration": 5.161}, {"text": "peeling and so on the compiler can can", "start": 6479.08, "duration": 6.079}, {"text": "do a lot of that but the compiler can", "start": 6482.32, "duration": 4.72}, {"text": "rarely recognize opportunities for", "start": 6485.159, "duration": 4.921}, {"text": "interprocedural optimizations", "start": 6487.04, "duration": 6.48}, {"text": "basically um looking at the code as a", "start": 6490.08, "duration": 5.76}, {"text": "whole and figuring out you know where", "start": 6493.52, "duration": 4.28}, {"text": "where changes in one routine could be", "start": 6495.84, "duration": 5.759}, {"text": "made that would affect another and this", "start": 6497.8, "duration": 6.24}, {"text": "requires an intimate intimate", "start": 6501.599, "duration": 4.801}, {"text": "understanding of your code and often", "start": 6504.04, "duration": 4.559}, {"text": "these optimizations depend on recognized", "start": 6506.4, "duration": 4.4}, {"text": "in operations that are repeated on the", "start": 6508.599, "duration": 4.681}, {"text": "same set of the data from one invocation", "start": 6510.8, "duration": 6.52}, {"text": "of a function to the next so earlier you", "start": 6513.28, "duration": 6.56}, {"text": "know when you did that GPR example we", "start": 6517.32, "duration": 6.0}, {"text": "saw um a good example of inter", "start": 6519.84, "duration": 5.68}, {"text": "interprocedural optimization where we", "start": 6523.32, "duration": 5.68}, {"text": "had some simple functions or sub rains", "start": 6525.52, "duration": 5.24}, {"text": "that were all in one file", "start": 6529.0, "duration": 3.719}, {"text": "but we might have gotten lucky because", "start": 6530.76, "duration": 3.479}, {"text": "all that code was in the in the same", "start": 6532.719, "duration": 4.841}, {"text": "file and it was relatively", "start": 6534.239, "duration": 3.321}, {"text": "simple so I'm going to go back to a um", "start": 6538.159, "duration": 5.321}, {"text": "problem I mentioned earlier this was in", "start": 6541.679, "duration": 4.721}, {"text": "flow cytometry this is a technique used", "start": 6543.48, "duration": 6.239}, {"text": "to characterize cells based on molecules", "start": 6546.4, "duration": 5.319}, {"text": "that they express on the surfaces", "start": 6549.719, "duration": 4.561}, {"text": "immunologists use this technique a lot", "start": 6551.719, "duration": 4.321}, {"text": "it could be done used for everything", "start": 6554.28, "duration": 5.24}, {"text": "from basic research to diagnosing um", "start": 6556.04, "duration": 6.079}, {"text": "diagnosing the emia now taking these", "start": 6559.52, "duration": 5.639}, {"text": "cells though and sorting them into", "start": 6562.119, "duration": 5.361}, {"text": "different populations is a really", "start": 6565.159, "duration": 4.401}, {"text": "computationally challenging problem", "start": 6567.48, "duration": 4.56}, {"text": "especially because we're not looking at", "start": 6569.56, "duration": 5.52}, {"text": "just what one or two cell markers but we", "start": 6572.04, "duration": 4.679}, {"text": "might be looking at a handful we're", "start": 6575.08, "duration": 4.72}, {"text": "working in a you know say in a six to 20", "start": 6576.719, "duration": 4.641}, {"text": "dimensional", "start": 6579.8, "duration": 4.24}, {"text": "space so not going to get into the into", "start": 6581.36, "duration": 5.68}, {"text": "the details of the code but we noticed", "start": 6584.04, "duration": 6.599}, {"text": "as we were um working with code", "start": 6587.04, "duration": 5.559}, {"text": "that there was a function that was", "start": 6590.639, "duration": 5.04}, {"text": "called five times so this is the get", "start": 6592.599, "duration": 6.241}, {"text": "average dis function five times with", "start": 6595.679, "duration": 4.92}, {"text": "slightly different", "start": 6598.84, "duration": 4.44}, {"text": "arguments um and I'm hi I'm highlighting", "start": 6600.599, "duration": 5.201}, {"text": "the differences in red but all of the", "start": 6603.28, "duration": 5.48}, {"text": "other arguments temps sub I temps sub J", "start": 6605.8, "duration": 6.96}, {"text": "population ID num real pop file Len Etc", "start": 6608.76, "duration": 6.919}, {"text": "um these were the same for each of these", "start": 6612.76, "duration": 5.399}, {"text": "five successive", "start": 6615.679, "duration": 5.56}, {"text": "calls so I know the next slides are", "start": 6618.159, "duration": 6.201}, {"text": "going to be a little hard to find but we", "start": 6621.239, "duration": 6.721}, {"text": "found that um that that some of the C", "start": 6624.36, "duration": 5.0}, {"text": "that there are some", "start": 6627.96, "duration": 5.12}, {"text": "calculations that did not depend that", "start": 6629.36, "duration": 5.92}, {"text": "did not depend on this first argument", "start": 6633.08, "duration": 4.24}, {"text": "that they just depended on the", "start": 6635.28, "duration": 4.12}, {"text": "subsequent arguments that again were the", "start": 6637.32, "duration": 5.2}, {"text": "same for all for all five", "start": 6639.4, "duration": 7.08}, {"text": "calls and we were able to um we're able", "start": 6642.52, "duration": 8.8}, {"text": "to pre-calculate some of these results", "start": 6646.48, "duration": 7.84}, {"text": "therefore", "start": 6651.32, "duration": 3.0}, {"text": "um PR compute results um here we call", "start": 6654.599, "duration": 5.441}, {"text": "them packed one packed two and packed", "start": 6657.599, "duration": 4.241}, {"text": "three and I know it's really hard to", "start": 6660.04, "duration": 4.48}, {"text": "look at somebody else's code but what we", "start": 6661.84, "duration": 5.16}, {"text": "were able to do by pre-computing these", "start": 6664.52, "duration": 3.88}, {"text": "and of course you're going to use a", "start": 6667.0, "duration": 3.48}, {"text": "little bit more um a little bit more", "start": 6668.4, "duration": 3.92}, {"text": "memory but you're going to get a big", "start": 6670.48, "duration": 4.239}, {"text": "speed up in this case this one single", "start": 6672.32, "duration": 4.919}, {"text": "optimization led to a 3X speed up with", "start": 6674.719, "duration": 7.0}, {"text": "the program so let me just flip back", "start": 6677.239, "duration": 6.92}, {"text": "again so it's a little hard to follow", "start": 6681.719, "duration": 4.201}, {"text": "but basically use using these", "start": 6684.159, "duration": 3.96}, {"text": "pre-computed results we're able to get", "start": 6685.92, "duration": 4.92}, {"text": "that 3x speed", "start": 6688.119, "duration": 5.201}, {"text": "up and again it's some the kind of thing", "start": 6690.84, "duration": 4.239}, {"text": "that you can only do if you really dive", "start": 6693.32, "duration": 5.56}, {"text": "into the code and um you know understand", "start": 6695.079, "duration": 6.721}, {"text": "the semantics now another technique that", "start": 6698.88, "duration": 5.64}, {"text": "I like to do use and there's got to be a", "start": 6701.8, "duration": 4.879}, {"text": "name for this um I've not been able to", "start": 6704.52, "duration": 4.199}, {"text": "find it anywhere though and I've used", "start": 6706.679, "duration": 6.321}, {"text": "this success success y a few times is", "start": 6708.719, "duration": 7.36}, {"text": "that sometimes you can approximate an", "start": 6713.0, "duration": 6.079}, {"text": "expensive F function and redo the", "start": 6716.079, "duration": 5.801}, {"text": "accurate calculation only when", "start": 6719.079, "duration": 5.801}, {"text": "necessary so let's say we have", "start": 6721.88, "duration": 4.92}, {"text": "conditional tests and it is very", "start": 6724.88, "duration": 4.839}, {"text": "infrequently true and that there exists", "start": 6726.8, "duration": 5.279}, {"text": "an approximate test that is much faster", "start": 6729.719, "duration": 4.88}, {"text": "than the exact test and that we", "start": 6732.079, "duration": 5.16}, {"text": "understand the error in that approximate", "start": 6734.599, "duration": 6.921}, {"text": "test so as a concrete example this was a", "start": 6737.239, "duration": 7.161}, {"text": "um a graph Theory um collaboration was", "start": 6741.52, "duration": 4.04}, {"text": "involved", "start": 6744.4, "duration": 4.52}, {"text": "in where a big chunk of the time was", "start": 6745.56, "duration": 4.84}, {"text": "spent in this", "start": 6748.92, "duration": 3.279}, {"text": "comparison and you don't have to worry", "start": 6750.4, "duration": 5.279}, {"text": "about what XR and XI and XJ are but the", "start": 6752.199, "duration": 5.841}, {"text": "key point is that we're comparing the", "start": 6755.679, "duration": 7.44}, {"text": "arc cost of xrod to the absolute", "start": 6758.04, "duration": 8.44}, {"text": "difference between x i and XJ and those", "start": 6763.119, "duration": 7.12}, {"text": "AR cosine calculations are really really", "start": 6766.48, "duration": 5.88}, {"text": "expensive there's kind of a hierarchy of", "start": 6770.239, "duration": 5.321}, {"text": "of expense with addition and subtraction", "start": 6772.36, "duration": 5.96}, {"text": "multiplication being very cheap followed", "start": 6775.56, "duration": 6.4}, {"text": "by square roots and um and", "start": 6778.32, "duration": 6.399}, {"text": "divisions followed by exponentiation", "start": 6781.96, "duration": 6.679}, {"text": "logarithms and trig functions and at the", "start": 6784.719, "duration": 8.0}, {"text": "very top these um inverse trig functions", "start": 6788.639, "duration": 6.881}, {"text": "are very very expensive so what we were", "start": 6792.719, "duration": 7.241}, {"text": "able to do oops sorry was s jumped ah", "start": 6795.52, "duration": 8.84}, {"text": "head here is we we we're able to", "start": 6799.96, "duration": 7.0}, {"text": "find a pretty good", "start": 6804.36, "duration": 5.0}, {"text": "approximation to the to the arose", "start": 6806.96, "duration": 6.679}, {"text": "function this Pi / 2 - ax^2 minus", "start": 6809.36, "duration": 7.799}, {"text": "BX with a known maximum", "start": 6813.639, "duration": 6.56}, {"text": "error and that was about 20 times faster", "start": 6817.159, "duration": 6.96}, {"text": "than aost so what we did was first we", "start": 6820.199, "duration": 8.601}, {"text": "did this um this faster calculation we", "start": 6824.119, "duration": 8.12}, {"text": "did our approximation to the r cosine", "start": 6828.8, "duration": 5.96}, {"text": "and we compared it to the absolute", "start": 6832.239, "duration": 5.121}, {"text": "difference between XI and XJ plus the", "start": 6834.76, "duration": 6.16}, {"text": "maximum error and then if we found that", "start": 6837.36, "duration": 6.12}, {"text": "that condition was true then we went", "start": 6840.92, "duration": 5.12}, {"text": "back and we redid this expensive", "start": 6843.48, "duration": 5.04}, {"text": "calculation so it may seem like we're", "start": 6846.04, "duration": 5.039}, {"text": "doing a lot of work but in this case we", "start": 6848.52, "duration": 6.28}, {"text": "were able to really minimize the number", "start": 6851.079, "duration": 6.0}, {"text": "of those expensive calculations and in", "start": 6854.8, "duration": 6.04}, {"text": "the case where the R cost of X Plus onod", "start": 6857.079, "duration": 6.52}, {"text": "is truly less than the difference", "start": 6860.84, "duration": 6.48}, {"text": "between XI and XJ we just add a little", "start": 6863.599, "duration": 6.161}, {"text": "bit of extra work and by doing this we", "start": 6867.32, "duration": 6.319}, {"text": "got close to a 20x speed up since this", "start": 6869.76, "duration": 7.0}, {"text": "condition is so rarely", "start": 6873.639, "duration": 6.04}, {"text": "met so with that I'm just going to start", "start": 6876.76, "duration": 5.479}, {"text": "wrapping things up um have a little", "start": 6879.679, "duration": 4.881}, {"text": "summary you know optimizing your code", "start": 6882.239, "duration": 4.521}, {"text": "reduces time to solution it can save", "start": 6884.56, "duration": 3.8}, {"text": "energy it can make your compute", "start": 6886.76, "duration": 3.839}, {"text": "resources go further", "start": 6888.36, "duration": 4.239}, {"text": "before you get started optimize your", "start": 6890.599, "duration": 3.681}, {"text": "code make sure it's worth worth your", "start": 6892.599, "duration": 3.841}, {"text": "effort you know how heavily is the code", "start": 6894.28, "duration": 5.2}, {"text": "used is it um is it going to help you", "start": 6896.44, "duration": 5.239}, {"text": "get your science done quicker if it's a", "start": 6899.48, "duration": 4.239}, {"text": "code that runs in the in the blink of an", "start": 6901.679, "duration": 4.161}, {"text": "eye you know say 10 seconds and you just", "start": 6903.719, "duration": 4.321}, {"text": "need to run it every now and then don't", "start": 6905.84, "duration": 4.319}, {"text": "don't bother optimizing but if it's", "start": 6908.04, "duration": 3.679}, {"text": "something where it's taking hours or", "start": 6910.159, "duration": 3.48}, {"text": "days or months to run yeah then you", "start": 6911.719, "duration": 3.44}, {"text": "probably want to optimize the", "start": 6913.639, "duration": 4.56}, {"text": "code um optimizations can sometimes", "start": 6915.159, "duration": 4.681}, {"text": "change your results remember that", "start": 6918.199, "duration": 4.201}, {"text": "floating Point identities are not the", "start": 6919.84, "duration": 5.92}, {"text": "same as algebraic math identities ask", "start": 6922.4, "duration": 4.96}, {"text": "yourself how critical is the", "start": 6925.76, "duration": 4.359}, {"text": "reproducibility in most cases you do not", "start": 6927.36, "duration": 4.52}, {"text": "need bitwise", "start": 6930.119, "duration": 3.56}, {"text": "reproducibility when you're profiling", "start": 6931.88, "duration": 4.48}, {"text": "your code profile optimize repeat", "start": 6933.679, "duration": 5.081}, {"text": "because you're going to have new um", "start": 6936.36, "duration": 4.08}, {"text": "you're going to have new", "start": 6938.76, "duration": 4.0}, {"text": "hotpots take advantage of those", "start": 6940.44, "duration": 4.159}, {"text": "optimized libraries and the work of", "start": 6942.76, "duration": 5.839}, {"text": "others there's a um Mantra in software", "start": 6944.599, "duration": 6.361}, {"text": "development they say say that good Pro", "start": 6948.599, "duration": 5.281}, {"text": "good programmers write good code great", "start": 6950.96, "duration": 5.4}, {"text": "programmers steal great code so if", "start": 6953.88, "duration": 4.56}, {"text": "somebody else has written something for", "start": 6956.36, "duration": 5.759}, {"text": "you already if there's a library for um", "start": 6958.44, "duration": 6.639}, {"text": "you know for fora transforms or I value", "start": 6962.119, "duration": 5.96}, {"text": "solvers or linear algebra go ahead and", "start": 6965.079, "duration": 5.721}, {"text": "use that we talked a little bit about", "start": 6968.079, "duration": 5.801}, {"text": "what the compiler can and cannot do know", "start": 6970.8, "duration": 4.76}, {"text": "the capabilities and limitations of", "start": 6973.88, "duration": 4.359}, {"text": "compiler but don't rely on the compiler", "start": 6975.56, "duration": 4.8}, {"text": "to fix all of your bad programing", "start": 6978.239, "duration": 5.041}, {"text": "practices um optimizing for cach is", "start": 6980.36, "duration": 5.2}, {"text": "critical exploit that spatial and", "start": 6983.28, "duration": 4.6}, {"text": "temporal locality this is going to be", "start": 6985.56, "duration": 4.079}, {"text": "especially important when you're working", "start": 6987.88, "duration": 4.199}, {"text": "with multi-dimensional arrays and then", "start": 6989.639, "duration": 4.681}, {"text": "finally sometimes the biggest payoffs", "start": 6992.079, "duration": 4.961}, {"text": "come from that deep understanding of the", "start": 6994.32, "duration": 5.399}, {"text": "semantics of your code you know knowing", "start": 6997.04, "duration": 5.52}, {"text": "um the structure structure of the data", "start": 6999.719, "duration": 4.641}, {"text": "knowing that say arrays are", "start": 7002.56, "duration": 5.039}, {"text": "monotonically increasing um having that", "start": 7004.36, "duration": 6.48}, {"text": "big picture across multiple r", "start": 7007.599, "duration": 5.64}, {"text": "team so with that I think I'm going to", "start": 7010.84, "duration": 6.399}, {"text": "wrap up it is 221 if you are really", "start": 7013.239, "duration": 7.4}, {"text": "interested um there is a bunch of slides", "start": 7017.239, "duration": 7.4}, {"text": "in here and using the AMD uof tool I'm", "start": 7020.639, "duration": 5.721}, {"text": "going to guess by this time everybody's", "start": 7024.639, "duration": 2.881}, {"text": "brain", "start": 7026.36, "duration": 4.04}, {"text": "is pretty full so I'm going to leave", "start": 7027.52, "duration": 6.8}, {"text": "that to you as a um as homework with", "start": 7030.4, "duration": 5.759}, {"text": "that I'm going to stop", "start": 7034.32, "duration": 5.279}, {"text": "sharing and see if we have any questions", "start": 7036.159, "duration": 5.04}, {"text": "or", "start": 7039.599, "duration": 4.761}, {"text": "comments so if there are if there are no", "start": 7041.199, "duration": 5.081}, {"text": "questions I am going to go ahead and", "start": 7044.36, "duration": 4.16}, {"text": "wrap things up I know this was a lot of", "start": 7046.28, "duration": 5.04}, {"text": "material um thanks so much for to those", "start": 7048.52, "duration": 5.96}, {"text": "of you who stuck around and any", "start": 7051.32, "duration": 5.72}, {"text": "questions feel free to um ping me ping", "start": 7054.48, "duration": 3.84}, {"text": "me in the", "start": 7057.04, "duration": 4.28}, {"text": "slack", "start": 7058.32, "duration": 3.0}]