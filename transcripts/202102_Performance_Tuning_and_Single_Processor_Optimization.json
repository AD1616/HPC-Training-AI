[{"text": "hello everyone today we have bob", "start": 7.359, "duration": 2.401}, {"text": "sinkovitz", "start": 8.96, "duration": 2.96}, {"text": "sdsc's director of scientific computing", "start": 9.76, "duration": 3.12}, {"text": "applications", "start": 11.92, "duration": 3.28}, {"text": "uh and he'll be presenting on", "start": 12.88, "duration": 3.2}, {"text": "performance tuning", "start": 15.2, "duration": 2.8}, {"text": "and single processor optimization i'm", "start": 16.08, "duration": 3.52}, {"text": "really looking forward to this", "start": 18.0, "duration": 4.0}, {"text": "presentation before we hand it off to", "start": 19.6, "duration": 3.519}, {"text": "bob", "start": 22.0, "duration": 4.16}, {"text": "i want to uh bring your attention to", "start": 23.119, "duration": 5.601}, {"text": "exceeds code of conduct uh we are", "start": 26.16, "duration": 4.56}, {"text": "usually on our best behavior but if", "start": 28.72, "duration": 3.6}, {"text": "anyone observes any kind of behavior", "start": 30.72, "duration": 3.359}, {"text": "that they think is inappropriate", "start": 32.32, "duration": 5.759}, {"text": "please uh let us know at exceed.org", "start": 34.079, "duration": 7.041}, {"text": "code of conduct and", "start": 38.079, "duration": 5.201}, {"text": "uh exceed also uh is committed to", "start": 41.12, "duration": 3.919}, {"text": "providing training events that foster", "start": 43.28, "duration": 4.16}, {"text": "inclusion and show respect for all", "start": 45.039, "duration": 4.401}, {"text": "so we try to be sensitive to uh", "start": 47.44, "duration": 4.08}, {"text": "terminology so if you", "start": 49.44, "duration": 4.48}, {"text": "uh are aware of any kind of terminology", "start": 51.52, "duration": 4.16}, {"text": "that you think is inappropriate please", "start": 53.92, "duration": 4.4}, {"text": "let us know by sending an email to", "start": 55.68, "duration": 6.96}, {"text": "terminology exceed.org and so with that", "start": 58.32, "duration": 6.879}, {"text": "i will stop sharing and hand it off to", "start": 62.64, "duration": 4.879}, {"text": "bob", "start": 65.199, "duration": 2.32}, {"text": "sorry i need to get there that thank you", "start": 70.24, "duration": 3.68}, {"text": "for the introduction jeff", "start": 71.84, "duration": 5.04}, {"text": "um so i'm going to be um giving a very", "start": 73.92, "duration": 3.519}, {"text": "brief", "start": 76.88, "duration": 3.279}, {"text": "introduction to performance tuning and", "start": 77.439, "duration": 4.72}, {"text": "single processor optimization", "start": 80.159, "duration": 4.0}, {"text": "and can somebody just confirm that you", "start": 82.159, "duration": 4.161}, {"text": "are seeing my slides now", "start": 84.159, "duration": 5.28}, {"text": "yes it looks good perfect perfect", "start": 86.32, "duration": 4.64}, {"text": "um so it's kind of hard for me to", "start": 89.439, "duration": 3.601}, {"text": "monitor the chat as we go", "start": 90.96, "duration": 4.479}, {"text": "along um so we have a few of the few of", "start": 93.04, "duration": 3.28}, {"text": "the folks here", "start": 95.439, "duration": 4.401}, {"text": "at scsc who will be keep an eye on the", "start": 96.32, "duration": 4.32}, {"text": "chat", "start": 99.84, "duration": 4.16}, {"text": "and interrupting me as we go along", "start": 100.64, "duration": 5.36}, {"text": "and then also answer a few questions at", "start": 104.0, "duration": 3.2}, {"text": "the at the end", "start": 106.0, "duration": 3.28}, {"text": "and again jeff thank you for putting up", "start": 107.2, "duration": 3.52}, {"text": "the code of conduct", "start": 109.28, "duration": 4.96}, {"text": "and mentioning the terminology task", "start": 110.72, "duration": 4.0}, {"text": "force", "start": 114.24, "duration": 2.159}, {"text": "so i've gone through my slides pretty", "start": 114.72, "duration": 3.999}, {"text": "carefully i hope that i'm", "start": 116.399, "duration": 5.201}, {"text": "um that everything is up to the current", "start": 118.719, "duration": 4.961}, {"text": "standard but please let me know if there", "start": 121.6, "duration": 2.4}, {"text": "is", "start": 123.68, "duration": 4.4}, {"text": "anything that i that i overlooked", "start": 124.0, "duration": 6.239}, {"text": "so", "start": 128.08, "duration": 2.159}, {"text": "okay so so this is going to be a", "start": 131.52, "duration": 6.24}, {"text": "very very quick introduction to", "start": 134.72, "duration": 4.64}, {"text": "um to the performance tuning and", "start": 137.76, "duration": 3.28}, {"text": "optimization but this", "start": 139.36, "duration": 4.879}, {"text": "this has been adapted from a what", "start": 141.04, "duration": 4.48}, {"text": "workshop that i", "start": 144.239, "duration": 4.321}, {"text": "usually give during during our summer", "start": 145.52, "duration": 5.439}, {"text": "institute and it takes about three to", "start": 148.56, "duration": 3.12}, {"text": "four hours", "start": 150.959, "duration": 3.36}, {"text": "including time for breaks and hands-on", "start": 151.68, "duration": 3.6}, {"text": "examples", "start": 154.319, "duration": 2.481}, {"text": "of course since we're doing this is one", "start": 155.28, "duration": 3.36}, {"text": "hour webinar we won't have time for", "start": 156.8, "duration": 2.88}, {"text": "examples", "start": 158.64, "duration": 4.72}, {"text": "but let me go back here um", "start": 159.68, "duration": 6.24}, {"text": "and i'll paste the paste this url into", "start": 163.36, "duration": 3.2}, {"text": "the", "start": 165.92, "duration": 3.12}, {"text": "into the chat when i'm all done i've put", "start": 166.56, "duration": 4.399}, {"text": "together a github repo", "start": 169.04, "duration": 5.36}, {"text": "it's a very i'm going to say very very", "start": 170.959, "duration": 5.681}, {"text": "crude right now but i do have a few", "start": 174.4, "duration": 3.44}, {"text": "examples in there", "start": 176.64, "duration": 3.84}, {"text": "that i have used in in today's talk and", "start": 177.84, "duration": 3.44}, {"text": "think of that", "start": 180.48, "duration": 2.96}, {"text": "as a living document it's going to be", "start": 181.28, "duration": 4.0}, {"text": "updated over time with with more", "start": 183.44, "duration": 4.4}, {"text": "examples", "start": 185.28, "duration": 2.56}, {"text": "so i'm going to start off talking about", "start": 188.64, "duration": 4.16}, {"text": "why we want to write efficient", "start": 190.48, "duration": 5.679}, {"text": "scale or serial code so my talk today is", "start": 192.8, "duration": 4.4}, {"text": "all about", "start": 196.159, "duration": 2.8}, {"text": "it is all about the performance of the", "start": 197.2, "duration": 3.92}, {"text": "underlying serial application i'm not", "start": 198.959, "duration": 4.721}, {"text": "really getting into parallel computing", "start": 201.12, "duration": 4.88}, {"text": "um but the performance of a parallel", "start": 203.68, "duration": 4.16}, {"text": "code ultimately depends on the", "start": 206.0, "duration": 3.92}, {"text": "performance of that underlying serial", "start": 207.84, "duration": 3.119}, {"text": "code", "start": 209.92, "duration": 2.56}, {"text": "so there are a few reasons that we want", "start": 210.959, "duration": 3.041}, {"text": "to write fast code", "start": 212.48, "duration": 3.52}, {"text": "so first of all optimizing your code is", "start": 214.0, "duration": 4.4}, {"text": "going to reduce your time to solution", "start": 216.0, "duration": 3.84}, {"text": "so i like to say that challenging", "start": 218.4, "duration": 3.04}, {"text": "problems are going to become doable and", "start": 219.84, "duration": 3.44}, {"text": "routine calculations can be done", "start": 221.44, "duration": 4.079}, {"text": "quickly you'll be able to do more signs", "start": 223.28, "duration": 3.599}, {"text": "in the same amount of time", "start": 225.519, "duration": 3.28}, {"text": "and it can shorten that cycle between", "start": 226.879, "duration": 4.561}, {"text": "job submission and results", "start": 228.799, "duration": 4.8}, {"text": "on computer time especially in high-end", "start": 231.44, "duration": 3.92}, {"text": "resources is limited", "start": 233.599, "duration": 4.64}, {"text": "if any of you have allocations on on", "start": 235.36, "duration": 4.239}, {"text": "expanse", "start": 238.239, "duration": 4.64}, {"text": "stampede bridges or other xc x-league", "start": 239.599, "duration": 3.84}, {"text": "machines", "start": 242.879, "duration": 2.321}, {"text": "you know that it's a competitive process", "start": 243.439, "duration": 3.841}, {"text": "to get significant amounts of time", "start": 245.2, "duration": 4.16}, {"text": "you're kind of getting it for free in", "start": 247.28, "duration": 3.36}, {"text": "the sense that you're not paying", "start": 249.36, "duration": 2.959}, {"text": "directly it's already been covered by an", "start": 250.64, "duration": 2.959}, {"text": "nsf grant", "start": 252.319, "duration": 4.001}, {"text": "um but still it's competitive you're", "start": 253.599, "duration": 4.001}, {"text": "that there's only so much super", "start": 256.32, "duration": 2.0}, {"text": "computing", "start": 257.6, "duration": 3.039}, {"text": "um cycles go around and if you're", "start": 258.32, "duration": 4.0}, {"text": "running on the cloud", "start": 260.639, "duration": 2.881}, {"text": "you know you can get all the computing", "start": 262.32, "duration": 2.96}, {"text": "you need but you'll need to pay for it", "start": 263.52, "duration": 2.72}, {"text": "and then finally", "start": 265.28, "duration": 4.4}, {"text": "computing uses a lot of energy um it's", "start": 266.24, "duration": 5.12}, {"text": "really hard to pin this down but it's", "start": 269.68, "duration": 3.76}, {"text": "estimated that", "start": 271.36, "duration": 4.24}, {"text": "that at least five percent of our us", "start": 273.44, "duration": 3.44}, {"text": "energy consumption", "start": 275.6, "duration": 4.879}, {"text": "is spent powering computers", "start": 276.88, "duration": 3.599}, {"text": "so i mentioned parallel competing", "start": 281.12, "duration": 3.84}, {"text": "already you know is isn't parallel", "start": 282.8, "duration": 4.32}, {"text": "isn't going parallel going to save me", "start": 284.96, "duration": 3.92}, {"text": "but it turns out that first of all most", "start": 287.12, "duration": 3.68}, {"text": "parallel applications have a limited", "start": 288.88, "duration": 2.96}, {"text": "scalability", "start": 290.8, "duration": 2.64}, {"text": "you won't be able to you won't be able", "start": 291.84, "duration": 4.32}, {"text": "to run on", "start": 293.44, "duration": 5.68}, {"text": "on in generally on very large numbers of", "start": 296.16, "duration": 4.4}, {"text": "cores", "start": 299.12, "duration": 3.359}, {"text": "second one even if your application had", "start": 300.56, "duration": 3.6}, {"text": "perfect linear scalability", "start": 302.479, "duration": 2.801}, {"text": "there's always going to be a more", "start": 304.16, "duration": 2.479}, {"text": "challenging problem that you want to", "start": 305.28, "duration": 2.24}, {"text": "solve", "start": 306.639, "duration": 3.041}, {"text": "there's going to be higher resolutions", "start": 307.52, "duration": 3.76}, {"text": "on finer grid sizes", "start": 309.68, "duration": 4.0}, {"text": "shorter time step you want to simulate", "start": 311.28, "duration": 4.96}, {"text": "larger systems incorporate more accurate", "start": 313.68, "duration": 3.68}, {"text": "physics", "start": 316.24, "duration": 3.6}, {"text": "have longer simulations more replicas", "start": 317.36, "duration": 4.88}, {"text": "bigger ensembles better statistics", "start": 319.84, "duration": 4.24}, {"text": "and then finally as i mentioned in the", "start": 322.24, "duration": 3.28}, {"text": "previous slide", "start": 324.08, "duration": 3.52}, {"text": "um availability availability of", "start": 325.52, "duration": 3.04}, {"text": "resources", "start": 327.6, "duration": 3.039}, {"text": "and energy usage are always going to be", "start": 328.56, "duration": 4.16}, {"text": "issues", "start": 330.639, "duration": 4.721}, {"text": "so this is a little out of date but back", "start": 332.72, "duration": 3.44}, {"text": "in um", "start": 335.36, "duration": 5.119}, {"text": "to 2013 you know it estimated that u.s", "start": 336.16, "duration": 7.599}, {"text": "data centers um could consume the", "start": 340.479, "duration": 4.241}, {"text": "equivalent of", "start": 343.759, "duration": 4.321}, {"text": "34 large coal-fired plants in power each", "start": 344.72, "duration": 4.319}, {"text": "year", "start": 348.08, "duration": 3.04}, {"text": "and the estimate at that time was that", "start": 349.039, "duration": 3.6}, {"text": "but", "start": 351.12, "duration": 4.48}, {"text": "was that by 2020 this was going to", "start": 352.639, "duration": 5.441}, {"text": "increase about 140 billion kilowatt", "start": 355.6, "duration": 4.8}, {"text": "hours per year so it's a lot of energy", "start": 358.08, "duration": 4.0}, {"text": "so anything that we can do to make our", "start": 360.4, "duration": 3.359}, {"text": "computing more efficient", "start": 362.08, "duration": 5.44}, {"text": "is definitely very welcoming", "start": 363.759, "duration": 3.761}, {"text": "okay so some guidelines for software", "start": 368.0, "duration": 4.319}, {"text": "optimization before we dive in", "start": 370.16, "duration": 4.479}, {"text": "i always like to say i think this is the", "start": 372.319, "duration": 3.521}, {"text": "prime directive", "start": 374.639, "duration": 3.921}, {"text": "for for software optimization is don't", "start": 375.84, "duration": 4.88}, {"text": "break your code make sure that you're", "start": 378.56, "duration": 4.479}, {"text": "continuing to get the correct results", "start": 380.72, "duration": 4.0}, {"text": "i've done this a few times over the", "start": 383.039, "duration": 3.681}, {"text": "years where you", "start": 384.72, "duration": 4.16}, {"text": "make a change of the code things seem to", "start": 386.72, "duration": 3.36}, {"text": "run a lot faster", "start": 388.88, "duration": 3.759}, {"text": "until you go back and you realize that", "start": 390.08, "duration": 4.08}, {"text": "the reason it's going faster because", "start": 392.639, "duration": 2.241}, {"text": "that you broke", "start": 394.16, "duration": 2.319}, {"text": "something and you're not getting the", "start": 394.88, "duration": 3.52}, {"text": "right results in any longer", "start": 396.479, "duration": 5.361}, {"text": "unfortunately i've never had a case", "start": 398.4, "duration": 5.76}, {"text": "where where it got into", "start": 401.84, "duration": 4.16}, {"text": "but where were these changes made it", "start": 404.16, "duration": 4.08}, {"text": "very far and started leading in correct", "start": 406.0, "duration": 4.24}, {"text": "results but always be aware of that", "start": 408.24, "duration": 4.64}, {"text": "make sure that you have a test suite to", "start": 410.24, "duration": 5.04}, {"text": "go back and confirm that your", "start": 412.88, "duration": 5.2}, {"text": "um that your modifications didn't break", "start": 415.28, "duration": 3.759}, {"text": "the code", "start": 418.08, "duration": 2.959}, {"text": "you also want to profile your code so", "start": 419.039, "duration": 4.801}, {"text": "you know where to focus your effort", "start": 421.039, "duration": 4.88}, {"text": "make sure that you don't obfuscate your", "start": 423.84, "duration": 3.759}, {"text": "code unless you have some really", "start": 425.919, "duration": 3.761}, {"text": "compelling reason to do so", "start": 427.599, "duration": 4.0}, {"text": "so sometimes you can rewrite your code", "start": 429.68, "duration": 3.68}, {"text": "in such a way that's faster", "start": 431.599, "duration": 4.32}, {"text": "but it's now hard to read or maintain", "start": 433.36, "duration": 4.0}, {"text": "and i think the only times that you want", "start": 435.919, "duration": 2.241}, {"text": "to push that", "start": 437.36, "duration": 3.119}, {"text": "really far is if you're working on a", "start": 438.16, "duration": 4.0}, {"text": "kernel in a very heavily used", "start": 440.479, "duration": 3.28}, {"text": "application", "start": 442.16, "duration": 3.84}, {"text": "make sure that you document your changes", "start": 443.759, "duration": 3.84}, {"text": "especially if your new code looks", "start": 446.0, "duration": 3.28}, {"text": "different from the original", "start": 447.599, "duration": 3.681}, {"text": "use optimized libraries whenever", "start": 449.28, "duration": 3.759}, {"text": "possible", "start": 451.28, "duration": 4.16}, {"text": "um there's a you know the same thing in", "start": 453.039, "duration": 3.761}, {"text": "software circles that", "start": 455.44, "duration": 3.92}, {"text": "good programmers write good code great", "start": 456.8, "duration": 3.6}, {"text": "programmers right", "start": 459.36, "duration": 3.44}, {"text": "kids are great programmers still great", "start": 460.4, "duration": 3.12}, {"text": "code", "start": 462.8, "duration": 3.04}, {"text": "so if something is out there just go", "start": 463.52, "duration": 3.44}, {"text": "ahead and use it", "start": 465.84, "duration": 2.56}, {"text": "and then finally understand the", "start": 466.96, "duration": 3.12}, {"text": "capabilities and limitations of your", "start": 468.4, "duration": 2.799}, {"text": "compiler", "start": 470.08, "duration": 3.92}, {"text": "and i'm going to touch on that in the in", "start": 471.199, "duration": 5.521}, {"text": "the next few slides", "start": 474.0, "duration": 4.479}, {"text": "there's a question of how much effort", "start": 476.72, "duration": 4.0}, {"text": "you should put into into optimizing your", "start": 478.479, "duration": 3.601}, {"text": "code", "start": 480.72, "duration": 4.879}, {"text": "so doing doing performance training and", "start": 482.08, "duration": 5.679}, {"text": "tuning in and optimization it does take", "start": 485.599, "duration": 2.561}, {"text": "time", "start": 487.759, "duration": 2.641}, {"text": "it does take effort and you really need", "start": 488.16, "duration": 3.84}, {"text": "to decide should you even get", "start": 490.4, "duration": 3.76}, {"text": "started and how much effort should you", "start": 492.0, "duration": 4.0}, {"text": "expend on this", "start": 494.16, "duration": 4.4}, {"text": "so i like to ask myself a few questions", "start": 496.0, "duration": 3.44}, {"text": "is the code", "start": 498.56, "duration": 4.079}, {"text": "heavily or widely used um if it's a code", "start": 499.44, "duration": 4.08}, {"text": "that's being used", "start": 502.639, "duration": 3.041}, {"text": "just in your lab and it's really not", "start": 503.52, "duration": 3.44}, {"text": "that critical", "start": 505.68, "duration": 2.56}, {"text": "if it if it's running a little bit", "start": 506.96, "duration": 3.44}, {"text": "longer than you need you might", "start": 508.24, "duration": 3.76}, {"text": "hear your time might be better spent", "start": 510.4, "duration": 3.999}, {"text": "just working on your research", "start": 512.0, "duration": 4.32}, {"text": "on the other hand if this is a community", "start": 514.399, "duration": 4.161}, {"text": "code if it has widespread use", "start": 516.32, "duration": 4.079}, {"text": "if you plan to be using this for years", "start": 518.56, "duration": 3.599}, {"text": "definitely put in some time to make it", "start": 520.399, "duration": 3.041}, {"text": "run fast", "start": 522.159, "duration": 2.881}, {"text": "related to that does it consume a", "start": 523.44, "duration": 4.48}, {"text": "significant amount of computer time", "start": 525.04, "duration": 5.919}, {"text": "is the time to solution important um if", "start": 527.92, "duration": 4.479}, {"text": "you if you have a code that", "start": 530.959, "duration": 4.481}, {"text": "say runs in in 15 minutes you might be", "start": 532.399, "duration": 4.961}, {"text": "able to optimize it so you get a get a", "start": 535.44, "duration": 2.48}, {"text": "solution", "start": 537.36, "duration": 2.479}, {"text": "in five minutes or ten minutes that", "start": 537.92, "duration": 3.039}, {"text": "that's great", "start": 539.839, "duration": 3.521}, {"text": "but but does that really revolutionize", "start": 540.959, "duration": 4.481}, {"text": "the amount of science that you could do", "start": 543.36, "duration": 4.56}, {"text": "um will optimizing help you solve new", "start": 545.44, "duration": 4.16}, {"text": "sets of problems", "start": 547.92, "duration": 3.359}, {"text": "and have you reached the point where", "start": 549.6, "duration": 3.84}, {"text": "most of the computing occurs in routines", "start": 551.279, "duration": 5.201}, {"text": "outside of your control", "start": 553.44, "duration": 3.04}, {"text": "so before you dive in if you do decide", "start": 558.56, "duration": 3.76}, {"text": "that you're going to start profiling", "start": 560.959, "duration": 1.841}, {"text": "your code", "start": 562.32, "duration": 2.959}, {"text": "sorry start optimizing your code you", "start": 562.8, "duration": 4.64}, {"text": "definitely want to profile first", "start": 565.279, "duration": 4.721}, {"text": "so modern software can contain many", "start": 567.44, "duration": 4.399}, {"text": "thousands of lines of code", "start": 570.0, "duration": 4.16}, {"text": "so profile it before you get started so", "start": 571.839, "duration": 4.241}, {"text": "that you know where to focus your effort", "start": 574.16, "duration": 3.679}, {"text": "and when you do this make sure that", "start": 576.08, "duration": 3.84}, {"text": "you're profiling on a realistically", "start": 577.839, "duration": 3.521}, {"text": "sized problem", "start": 579.92, "duration": 4.64}, {"text": "sometimes if you strip a problem down to", "start": 581.36, "duration": 4.88}, {"text": "strip down your test cases something", "start": 584.56, "duration": 5.44}, {"text": "really really small you'll find that the", "start": 586.24, "duration": 6.32}, {"text": "routines responsible for input and", "start": 590.0, "duration": 3.44}, {"text": "output at", "start": 592.56, "duration": 3.04}, {"text": "start or setting up the problem are", "start": 593.44, "duration": 3.44}, {"text": "accounting for accounting for the", "start": 595.6, "duration": 2.799}, {"text": "majority of the time", "start": 596.88, "duration": 4.48}, {"text": "you really want to make sure that you're", "start": 598.399, "duration": 3.921}, {"text": "doing a", "start": 601.36, "duration": 3.52}, {"text": "realistic test case when when you're", "start": 602.32, "duration": 4.48}, {"text": "profiling", "start": 604.88, "duration": 5.519}, {"text": "and here and you're often going to find", "start": 606.8, "duration": 5.68}, {"text": "that most of the time is spent in a", "start": 610.399, "duration": 4.161}, {"text": "relatively small number of routines", "start": 612.48, "duration": 3.84}, {"text": "in fact i've had a few projects over the", "start": 614.56, "duration": 3.04}, {"text": "years where i've done performance", "start": 616.32, "duration": 2.32}, {"text": "optimization", "start": 617.6, "duration": 2.64}, {"text": "where it was really just a single", "start": 618.64, "duration": 3.439}, {"text": "routine and", "start": 620.24, "duration": 3.92}, {"text": "even then a few loops within that", "start": 622.079, "duration": 3.921}, {"text": "routine that accounted for most of the", "start": 624.16, "duration": 3.44}, {"text": "time", "start": 626.0, "duration": 3.04}, {"text": "so there are a bunch of tools out there", "start": 627.6, "duration": 3.6}, {"text": "for doing profiling my favorite is", "start": 629.04, "duration": 3.84}, {"text": "something called gproff", "start": 631.2, "duration": 5.12}, {"text": "this goes way back to 1982. um", "start": 632.88, "duration": 6.0}, {"text": "i think this is a great place to start", "start": 636.32, "duration": 4.88}, {"text": "it's universally supported by all the", "start": 638.88, "duration": 2.8}, {"text": "major", "start": 641.2, "duration": 3.68}, {"text": "cc plus and fortran compilers in fact", "start": 641.68, "duration": 5.44}, {"text": "i've never come across", "start": 644.88, "duration": 5.44}, {"text": "um a come across", "start": 647.12, "duration": 5.44}, {"text": "a c or fortran compiler that doesn't", "start": 650.32, "duration": 4.0}, {"text": "support g prof", "start": 652.56, "duration": 4.32}, {"text": "it's very easy to use all you need to do", "start": 654.32, "duration": 4.079}, {"text": "is compile your code with the dash", "start": 656.88, "duration": 5.12}, {"text": "pg flag run the code you're going to get", "start": 658.399, "duration": 5.361}, {"text": "a", "start": 662.0, "duration": 4.72}, {"text": "a file called gmon.out and then you just", "start": 663.76, "duration": 3.28}, {"text": "run", "start": 666.72, "duration": 2.16}, {"text": "gproff followed by the name of your", "start": 667.04, "duration": 4.479}, {"text": "executable followed by the gmawn.out", "start": 668.88, "duration": 5.92}, {"text": "and it introduces virtually no overhead", "start": 671.519, "duration": 5.681}, {"text": "um i should mention that gproff is not a", "start": 674.8, "duration": 3.92}, {"text": "tracing tool and it's not going to", "start": 677.2, "duration": 2.16}, {"text": "identify", "start": 678.72, "duration": 2.88}, {"text": "bottlenecks in parallel codes but that's", "start": 679.36, "duration": 3.84}, {"text": "not what we're interested in right now", "start": 681.6, "duration": 3.2}, {"text": "we're interested in boosting the", "start": 683.2, "duration": 3.68}, {"text": "performance of that underlying serial", "start": 684.8, "duration": 3.2}, {"text": "cone", "start": 686.88, "duration": 2.72}, {"text": "and if you give me just one moment i'll", "start": 688.0, "duration": 3.279}, {"text": "be right back i've got a", "start": 689.6, "duration": 14.239}, {"text": "docking a barking dog in the background", "start": 691.279, "duration": 12.56}, {"text": "okay sorry about that i'm back now", "start": 704.8, "duration": 3.599}, {"text": "so um next couple of slides i'm going to", "start": 709.76, "duration": 3.04}, {"text": "demonstrate", "start": 711.6, "duration": 6.64}, {"text": "um i how to interpret the gproff output", "start": 712.8, "duration": 8.24}, {"text": "um ggproff has has two main outputs is", "start": 718.24, "duration": 4.48}, {"text": "what we call the flat profile", "start": 721.04, "duration": 4.56}, {"text": "and the call tree so the flat profile is", "start": 722.72, "duration": 4.72}, {"text": "just the listing of the functions and", "start": 725.6, "duration": 3.6}, {"text": "subroutines ordered by their relative", "start": 727.44, "duration": 2.639}, {"text": "use", "start": 729.2, "duration": 3.439}, {"text": "and again you're often going to find", "start": 730.079, "duration": 4.32}, {"text": "that it's just a few of those routines", "start": 732.639, "duration": 3.361}, {"text": "that account for the large majority of", "start": 734.399, "duration": 2.321}, {"text": "the time", "start": 736.0, "duration": 2.639}, {"text": "so this is very handy for identifying", "start": 736.72, "duration": 4.4}, {"text": "those hot spots in your codes", "start": 738.639, "duration": 3.841}, {"text": "so this is an example from an", "start": 741.12, "duration": 3.6}, {"text": "application that i had worked on", "start": 742.48, "duration": 4.08}, {"text": "um which we're going to be revisiting a", "start": 744.72, "duration": 3.6}, {"text": "little bit later", "start": 746.56, "duration": 4.8}, {"text": "in a area called flow cytometry this was", "start": 748.32, "duration": 5.04}, {"text": "with one of my collaborators at the j", "start": 751.36, "duration": 5.2}, {"text": "craig venter institute so we got the", "start": 753.36, "duration": 5.2}, {"text": "original version of the code we profiled", "start": 756.56, "duration": 2.719}, {"text": "it", "start": 758.56, "duration": 2.88}, {"text": "and we found that the majority of the", "start": 759.279, "duration": 4.081}, {"text": "time just about 69", "start": 761.44, "duration": 4.16}, {"text": "was being spent in this routine called", "start": 763.36, "duration": 3.279}, {"text": "get number pack", "start": 765.6, "duration": 3.28}, {"text": "data and then followed by main and", "start": 766.639, "duration": 4.161}, {"text": "quicksort and a few other routines that", "start": 768.88, "duration": 3.04}, {"text": "are", "start": 770.8, "duration": 4.719}, {"text": "adding negligible amounts of time", "start": 771.92, "duration": 3.599}, {"text": "gprop also produces a call graph which", "start": 775.68, "duration": 5.2}, {"text": "shows which routines are called by other", "start": 778.88, "duration": 3.12}, {"text": "routines", "start": 780.88, "duration": 3.44}, {"text": "um this is handy especially if you're", "start": 782.0, "duration": 3.12}, {"text": "going to get into", "start": 784.32, "duration": 3.6}, {"text": "inter procedural optimization which i'll", "start": 785.12, "duration": 3.839}, {"text": "get to at the", "start": 787.92, "duration": 4.32}, {"text": "um near the end of this talk so start on", "start": 788.959, "duration": 4.721}, {"text": "the top we see that routine", "start": 792.24, "duration": 4.48}, {"text": "main is called once and then it will", "start": 793.68, "duration": 4.32}, {"text": "call", "start": 796.72, "duration": 5.919}, {"text": "get number pack data 399 thousand times", "start": 798.0, "duration": 6.959}, {"text": "um it also calls routines called is hump", "start": 802.639, "duration": 5.681}, {"text": "quick sort radix sort and id2 center", "start": 804.959, "duration": 5.12}, {"text": "then we get down to the next routine we", "start": 808.32, "duration": 3.84}, {"text": "see get number pack data", "start": 810.079, "duration": 4.241}, {"text": "we see that it is called by main and", "start": 812.16, "duration": 4.16}, {"text": "that it in turn does not call any other", "start": 814.32, "duration": 3.04}, {"text": "routines", "start": 816.32, "duration": 3.04}, {"text": "next down on the call tree we have is", "start": 817.36, "duration": 4.0}, {"text": "hump we could see that it's called by", "start": 819.36, "duration": 2.56}, {"text": "main", "start": 821.36, "duration": 2.24}, {"text": "and then it calls the routines get", "start": 821.92, "duration": 4.919}, {"text": "nearest events pack arrays and pack", "start": 823.6, "duration": 6.239}, {"text": "points", "start": 826.839, "duration": 3.0}, {"text": "if you've um profiled your code you've", "start": 830.56, "duration": 4.16}, {"text": "done your optimization", "start": 833.279, "duration": 3.201}, {"text": "you definitely want to go back and", "start": 834.72, "duration": 4.239}, {"text": "reprofile so again this is from a real", "start": 836.48, "duration": 3.84}, {"text": "life example", "start": 838.959, "duration": 3.44}, {"text": "we got in there were able to improve the", "start": 840.32, "duration": 3.519}, {"text": "performance of", "start": 842.399, "duration": 3.521}, {"text": "get number pack data very very", "start": 843.839, "duration": 3.12}, {"text": "dramatically", "start": 845.92, "duration": 3.2}, {"text": "and now we find that it is no longer the", "start": 846.959, "duration": 3.201}, {"text": "hot spot", "start": 849.12, "duration": 3.76}, {"text": "in fact it's it's the routine main", "start": 850.16, "duration": 4.4}, {"text": "that's the now the most time consuming", "start": 852.88, "duration": 2.639}, {"text": "routine", "start": 854.56, "duration": 4.399}, {"text": "clocking in at about 41 and get number", "start": 855.519, "duration": 4.241}, {"text": "pack data", "start": 858.959, "duration": 6.081}, {"text": "is down to using just 60 68 of the wall", "start": 859.76, "duration": 5.28}, {"text": "time", "start": 868.839, "duration": 5.24}, {"text": "okay so g profit it goes way back 1982", "start": 870.32, "duration": 6.0}, {"text": "so it's been almost 40 years since g", "start": 874.079, "duration": 4.0}, {"text": "prof was released so you're probably", "start": 876.32, "duration": 4.079}, {"text": "wondering is there anything new", "start": 878.079, "duration": 4.801}, {"text": "so if you're working on an amd's amd", "start": 880.399, "duration": 4.0}, {"text": "based system like", "start": 882.88, "duration": 5.199}, {"text": "expense they have a tool called mutrof", "start": 884.399, "duration": 5.921}, {"text": "which provides much more detail than", "start": 888.079, "duration": 3.841}, {"text": "much more detail than g", "start": 890.32, "duration": 4.16}, {"text": "so much more detail than gproff", "start": 891.92, "duration": 3.599}, {"text": "including a lot of", "start": 894.48, "duration": 3.28}, {"text": "low-level information on things like", "start": 895.519, "duration": 3.12}, {"text": "cash misses", "start": 897.76, "duration": 4.4}, {"text": "branch miss predictions etc so this is", "start": 898.639, "duration": 4.64}, {"text": "going to be a future", "start": 902.16, "duration": 3.2}, {"text": "future training topic in fact we could", "start": 903.279, "duration": 4.721}, {"text": "spend an entire morning just on ucrof", "start": 905.36, "duration": 4.719}, {"text": "and our team here at sdsc is still", "start": 908.0, "duration": 3.6}, {"text": "getting up to speed on this", "start": 910.079, "duration": 3.2}, {"text": "but we're expecting as part of our", "start": 911.6, "duration": 3.039}, {"text": "expense training that we're going to be", "start": 913.279, "duration": 4.081}, {"text": "talking about this pretty soon", "start": 914.639, "duration": 4.721}, {"text": "so i'm just going to check the chat real", "start": 917.36, "duration": 3.52}, {"text": "quick", "start": 919.36, "duration": 5.36}, {"text": "see if we have any any questions i could", "start": 920.88, "duration": 3.84}, {"text": "answer", "start": 924.839, "duration": 4.201}, {"text": "see some see some comments there about", "start": 926.8, "duration": 4.479}, {"text": "the dog in the background", "start": 929.04, "duration": 5.68}, {"text": "yes and thank you for um for posting the", "start": 931.279, "duration": 10.56}, {"text": "um what link to the github repo", "start": 934.72, "duration": 7.119}, {"text": "all right um", "start": 942.16, "duration": 2.88}, {"text": "yeah so question how do we use g prof um", "start": 946.72, "duration": 3.919}, {"text": "so let me just go back", "start": 949.36, "duration": 5.76}, {"text": "a couple of slides", "start": 950.639, "duration": 8.88}, {"text": "very easy i'm going to um", "start": 955.12, "duration": 7.519}, {"text": "i'll try to get an example into the into", "start": 959.519, "duration": 5.041}, {"text": "my github repo", "start": 962.639, "duration": 3.601}, {"text": "but it's this line right here that the", "start": 964.56, "duration": 3.519}, {"text": "second bullet where i say it's very", "start": 966.24, "duration": 4.48}, {"text": "easy to use when you compile your code", "start": 968.079, "duration": 4.481}, {"text": "all you have to do is recompile", "start": 970.72, "duration": 4.88}, {"text": "including the dash pg flag you can", "start": 972.56, "duration": 3.6}, {"text": "include", "start": 975.6, "duration": 3.599}, {"text": "optimization because", "start": 976.16, "duration": 5.119}, {"text": "i'm saying global global optimizations", "start": 979.199, "duration": 4.401}, {"text": "like at the dash 03 level", "start": 981.279, "duration": 5.841}, {"text": "because gproff does not give you a", "start": 983.6, "duration": 5.84}, {"text": "um breakdown of time by statement it", "start": 987.12, "duration": 4.48}, {"text": "just does it by function", "start": 989.44, "duration": 4.959}, {"text": "so you compile with the dash pg flag you", "start": 991.6, "duration": 4.56}, {"text": "then run your code just like you would", "start": 994.399, "duration": 2.8}, {"text": "normally run it", "start": 996.16, "duration": 3.0}, {"text": "and it's going to produce this um", "start": 997.199, "duration": 3.521}, {"text": "gmon.help file", "start": 999.16, "duration": 4.28}, {"text": "which contains all of the um all the", "start": 1000.72, "duration": 3.84}, {"text": "sampling data", "start": 1003.44, "duration": 3.68}, {"text": "and then when you run gproff followed by", "start": 1004.56, "duration": 4.399}, {"text": "the name of the executable in this case", "start": 1007.12, "duration": 2.88}, {"text": "i just called it a dot", "start": 1008.959, "duration": 4.961}, {"text": "out followed by by gmon you'll then get", "start": 1010.0, "duration": 6.56}, {"text": "the if you're getting a file that", "start": 1013.92, "duration": 4.88}, {"text": "contains this flat profile", "start": 1016.56, "duration": 5.76}, {"text": "and the call graph", "start": 1018.8, "duration": 3.52}, {"text": "so let me just ask did that oh dick did", "start": 1023.6, "duration": 4.4}, {"text": "that answer the question", "start": 1026.64, "duration": 4.48}, {"text": "good thank you and we have a question", "start": 1028.0, "duration": 4.319}, {"text": "here from", "start": 1031.12, "duration": 4.4}, {"text": "drago or drago that does", "start": 1032.319, "duration": 5.36}, {"text": "is i guess you're asking is the slide", "start": 1035.52, "duration": 3.36}, {"text": "available to us", "start": 1037.679, "duration": 2.721}, {"text": "yes we are going to be posting the", "start": 1038.88, "duration": 3.84}, {"text": "slides and the end the video later", "start": 1040.4, "duration": 4.159}, {"text": "and i'll also take a copy these slides", "start": 1042.72, "duration": 9.76}, {"text": "and i'll put them into the github repo", "start": 1044.559, "duration": 10.401}, {"text": "okay so we're going to get into um", "start": 1052.48, "duration": 5.68}, {"text": "actually doing doing some optimization", "start": 1054.96, "duration": 4.88}, {"text": "a lot of times when we look at code we", "start": 1058.16, "duration": 4.639}, {"text": "think in terms of", "start": 1059.84, "duration": 5.04}, {"text": "portions of code being compute bound", "start": 1062.799, "duration": 3.601}, {"text": "versus memory bound", "start": 1064.88, "duration": 4.64}, {"text": "a lot of us get caught up in um", "start": 1066.4, "duration": 5.04}, {"text": "in in the process of performance and", "start": 1069.52, "duration": 3.76}, {"text": "things like clock speed", "start": 1071.44, "duration": 3.28}, {"text": "but they're going to be some codes if", "start": 1073.28, "duration": 3.759}, {"text": "they're memory bound where even having a", "start": 1074.72, "duration": 3.68}, {"text": "faster processor", "start": 1077.039, "duration": 4.321}, {"text": "isn't necessarily going to help so in a", "start": 1078.4, "duration": 4.399}, {"text": "memory bound code", "start": 1081.36, "duration": 3.04}, {"text": "the rate at which the data can be", "start": 1082.799, "duration": 3.601}, {"text": "delivered to the cpu is the limiting", "start": 1084.4, "duration": 3.12}, {"text": "factor", "start": 1086.4, "duration": 3.36}, {"text": "so our goal is going to be to apply cash", "start": 1087.52, "duration": 3.68}, {"text": "level optimizations", "start": 1089.76, "duration": 4.64}, {"text": "so that cpu is not start for data", "start": 1091.2, "duration": 5.359}, {"text": "in compute bound codes the performance", "start": 1094.4, "duration": 4.399}, {"text": "of the processor is the limiting factor", "start": 1096.559, "duration": 4.801}, {"text": "we can deliver data fast enough but the", "start": 1098.799, "duration": 4.161}, {"text": "processor can't keep up", "start": 1101.36, "duration": 3.439}, {"text": "and in this case our goal is going to be", "start": 1102.96, "duration": 3.92}, {"text": "to reduce the amount of computation", "start": 1104.799, "duration": 5.361}, {"text": "done on a given piece of data and in", "start": 1106.88, "duration": 4.56}, {"text": "real applications", "start": 1110.16, "duration": 2.639}, {"text": "we're often going to find that we have", "start": 1111.44, "duration": 3.119}, {"text": "to deal with the combination of compute", "start": 1112.799, "duration": 5.601}, {"text": "band and memory bound kernels", "start": 1114.559, "duration": 3.841}, {"text": "so before we start um try trying to", "start": 1120.799, "duration": 5.041}, {"text": "optimize a memory bound code we need to", "start": 1123.36, "duration": 6.64}, {"text": "understand the computer memory hierarchy", "start": 1125.84, "duration": 6.24}, {"text": "so at the very top of the pyramid we", "start": 1130.0, "duration": 3.679}, {"text": "have we have the registers", "start": 1132.08, "duration": 3.599}, {"text": "this is where we store data that's", "start": 1133.679, "duration": 4.481}, {"text": "immediately available to the cpu", "start": 1135.679, "duration": 5.041}, {"text": "so in that next clock cycle that data is", "start": 1138.16, "duration": 4.16}, {"text": "there and it's available", "start": 1140.72, "duration": 4.4}, {"text": "um if as we move as we move down from", "start": 1142.32, "duration": 4.08}, {"text": "the registers we", "start": 1145.12, "duration": 4.24}, {"text": "have multiple layers of cash pretty much", "start": 1146.4, "duration": 4.88}, {"text": "every processor that i've seen in the", "start": 1149.36, "duration": 3.04}, {"text": "last um", "start": 1151.28, "duration": 4.16}, {"text": "last 15 years has three levels of cash", "start": 1152.4, "duration": 6.8}, {"text": "in l1 and l2 and l3", "start": 1155.44, "duration": 6.8}, {"text": "they increase in size and as you go from", "start": 1159.2, "duration": 4.88}, {"text": "level one to level three", "start": 1162.24, "duration": 3.84}, {"text": "but they're also further away from the", "start": 1164.08, "duration": 3.04}, {"text": "cpu", "start": 1166.08, "duration": 5.2}, {"text": "so if data is in the in the l1 cache", "start": 1167.12, "duration": 6.48}, {"text": "it could typically be accessed within", "start": 1171.28, "duration": 4.16}, {"text": "the next few clock cycles", "start": 1173.6, "duration": 4.64}, {"text": "when it's in the l2 cache usually takes", "start": 1175.44, "duration": 4.08}, {"text": "in the order of", "start": 1178.24, "duration": 3.679}, {"text": "tens of nanoseconds to reach that data", "start": 1179.52, "duration": 5.2}, {"text": "on l3 cache a little bit longer", "start": 1181.919, "duration": 4.401}, {"text": "and then if we go all the way out to", "start": 1184.72, "duration": 3.52}, {"text": "dram if we don't have the data", "start": 1186.32, "duration": 4.08}, {"text": "in cache then it takes in the order of", "start": 1188.24, "duration": 4.4}, {"text": "hundreds of nanoseconds and then finally", "start": 1190.4, "duration": 4.159}, {"text": "if we're doing", "start": 1192.64, "duration": 3.279}, {"text": "um if we're doing out of core", "start": 1194.559, "duration": 3.921}, {"text": "computations where the entire data set", "start": 1195.919, "duration": 3.841}, {"text": "can't fit into memory", "start": 1198.48, "duration": 2.96}, {"text": "then we need to go out to disk and that", "start": 1199.76, "duration": 3.76}, {"text": "is much much slower so it looks", "start": 1201.44, "duration": 4.479}, {"text": "infinitely slow compared to having data", "start": 1203.52, "duration": 6.32}, {"text": "in the registers or in the cache", "start": 1205.919, "duration": 3.921}, {"text": "so if we're going to optimize for cache", "start": 1210.559, "duration": 3.12}, {"text": "and", "start": 1213.039, "duration": 2.0}, {"text": "improve the performance of our memory", "start": 1213.679, "duration": 3.36}, {"text": "bound codes we need to be aware", "start": 1215.039, "duration": 5.041}, {"text": "of two to two key concepts", "start": 1217.039, "duration": 4.64}, {"text": "there's something that we call temporal", "start": 1220.08, "duration": 4.479}, {"text": "locality and spatial locality", "start": 1221.679, "duration": 5.36}, {"text": "so the idea behind temporal locality is", "start": 1224.559, "duration": 4.961}, {"text": "that data that was recently accessed is", "start": 1227.039, "duration": 4.0}, {"text": "likely to be used again in the near", "start": 1229.52, "duration": 2.48}, {"text": "future", "start": 1231.039, "duration": 2.561}, {"text": "so to take advantage of temporal", "start": 1232.0, "duration": 3.84}, {"text": "locality once we have our data loaded", "start": 1233.6, "duration": 3.92}, {"text": "into cache", "start": 1235.84, "duration": 3.52}, {"text": "it's going to remain there until it has", "start": 1237.52, "duration": 4.32}, {"text": "to be purged to make room for new data", "start": 1239.36, "duration": 4.72}, {"text": "so again once we have that data in cache", "start": 1241.84, "duration": 5.68}, {"text": "we want to try to reuse", "start": 1244.08, "duration": 3.44}, {"text": "the it point here is that is that data", "start": 1247.679, "duration": 3.841}, {"text": "is is located", "start": 1250.32, "duration": 4.08}, {"text": "so the data is loaded as a cache line so", "start": 1251.52, "duration": 4.88}, {"text": "we don't get a single word of data", "start": 1254.4, "duration": 5.519}, {"text": "we get generally 64 bytes of data", "start": 1256.4, "duration": 6.08}, {"text": "and that gets us into spatial locality", "start": 1259.919, "duration": 4.321}, {"text": "and the idea is that if a piece of data", "start": 1262.48, "duration": 2.64}, {"text": "is accessed", "start": 1264.24, "duration": 2.559}, {"text": "it's likely that neighboring data", "start": 1265.12, "duration": 4.0}, {"text": "elements in memory will also be needed", "start": 1266.799, "duration": 4.801}, {"text": "so to take advantage of spatial locality", "start": 1269.12, "duration": 4.64}, {"text": "the cache is organized into line and an", "start": 1271.6, "duration": 4.48}, {"text": "entire line is loaded at once", "start": 1273.76, "duration": 4.08}, {"text": "so when we're working with memory bound", "start": 1276.08, "duration": 4.32}, {"text": "codes we want to try to exploit", "start": 1277.84, "duration": 4.16}, {"text": "both the temporal and the spatial", "start": 1280.4, "duration": 6.24}, {"text": "locality to minimize data access times", "start": 1282.0, "duration": 4.64}, {"text": "so let's take a look at a", "start": 1287.36, "duration": 3.12}, {"text": "one-dimensional array", "start": 1289.039, "duration": 2.801}, {"text": "i think most of you are going to be", "start": 1290.48, "duration": 3.439}, {"text": "familiar with with", "start": 1291.84, "duration": 3.92}, {"text": "one-dimensional and multi-dimensional", "start": 1293.919, "duration": 3.441}, {"text": "arrays", "start": 1295.76, "duration": 3.68}, {"text": "in memory a one-dimensional ray is", "start": 1297.36, "duration": 5.199}, {"text": "stored as a continuous block of data", "start": 1299.44, "duration": 7.359}, {"text": "for example if i had a um", "start": 1302.559, "duration": 6.881}, {"text": "a segment of c code where we're where", "start": 1306.799, "duration": 3.76}, {"text": "we're declining", "start": 1309.44, "duration": 5.04}, {"text": "so where we're declaring 100 integers", "start": 1310.559, "duration": 5.841}, {"text": "i'm declaring space for 100 integers", "start": 1314.48, "duration": 4.079}, {"text": "once we allocate that", "start": 1316.4, "duration": 3.759}, {"text": "the first element in that array is going", "start": 1318.559, "duration": 3.441}, {"text": "to have an offset of zero", "start": 1320.159, "duration": 3.361}, {"text": "the next element is going to be offset", "start": 1322.0, "duration": 3.36}, {"text": "by four bytes again we're still mean", "start": 1323.52, "duration": 3.84}, {"text": "four byte integers in here", "start": 1325.36, "duration": 3.84}, {"text": "next element by eight bytes next by", "start": 1327.36, "duration": 4.64}, {"text": "twelve bytes and so on", "start": 1329.2, "duration": 5.12}, {"text": "so optimizing for cache when we're", "start": 1332.0, "duration": 4.08}, {"text": "working with 1d arrays is pretty", "start": 1334.32, "duration": 3.04}, {"text": "straightforward", "start": 1336.08, "duration": 2.479}, {"text": "and you're probably going to write", "start": 1337.36, "duration": 3.439}, {"text": "optimal code without even trying", "start": 1338.559, "duration": 4.0}, {"text": "so let's say we just declare this array", "start": 1340.799, "duration": 3.12}, {"text": "of 100 integers", "start": 1342.559, "duration": 4.641}, {"text": "and we want to increment each of those", "start": 1343.919, "duration": 4.401}, {"text": "values by", "start": 1347.2, "duration": 3.92}, {"text": "100 so we could create a loop um in this", "start": 1348.32, "duration": 3.839}, {"text": "case for", "start": 1351.12, "duration": 4.24}, {"text": "int i equals 0 to i less than n i plus", "start": 1352.159, "duration": 4.321}, {"text": "plus", "start": 1355.36, "duration": 5.84}, {"text": "and then element by element increment", "start": 1356.48, "duration": 4.72}, {"text": "oh sorry was there a question", "start": 1364.64, "duration": 4.159}, {"text": "yes i'm just looking at the chat here um", "start": 1371.2, "duration": 6.479}, {"text": "we have a comment from lubos", "start": 1374.32, "duration": 3.359}, {"text": "yes very very very good point you know", "start": 1377.84, "duration": 3.52}, {"text": "appreciate you mentioning memory", "start": 1379.84, "duration": 2.319}, {"text": "bandwidth", "start": 1381.36, "duration": 3.92}, {"text": "yes in in many modern", "start": 1382.159, "duration": 6.481}, {"text": "um modern processes", "start": 1385.28, "duration": 5.04}, {"text": "it's really the memory bandwidth that is", "start": 1388.64, "duration": 3.68}, {"text": "the limiting factor", "start": 1390.32, "duration": 4.479}, {"text": "and then question from elijah so how do", "start": 1392.32, "duration": 4.32}, {"text": "you get this information on the screen", "start": 1394.799, "duration": 4.081}, {"text": "just before this one", "start": 1396.64, "duration": 5.84}, {"text": "um oh so this is getting back to", "start": 1398.88, "duration": 6.4}, {"text": "go get getting back to g prof so when i", "start": 1402.48, "duration": 3.36}, {"text": "run the g", "start": 1405.28, "duration": 2.72}, {"text": "prof command when i run g prof name the", "start": 1405.84, "duration": 4.4}, {"text": "executable and gmon dot out", "start": 1408.0, "duration": 4.64}, {"text": "that's going to produce a plain text", "start": 1410.24, "duration": 3.2}, {"text": "file", "start": 1412.64, "duration": 2.48}, {"text": "that will either be written to written", "start": 1413.44, "duration": 3.92}, {"text": "to standard out or you can pipe that to", "start": 1415.12, "duration": 3.679}, {"text": "a file", "start": 1417.36, "duration": 3.919}, {"text": "and then um about both sets of", "start": 1418.799, "duration": 3.36}, {"text": "information", "start": 1421.279, "duration": 4.64}, {"text": "the about the the", "start": 1422.159, "duration": 6.88}, {"text": "um the profile of amount of time spent", "start": 1425.919, "duration": 6.24}, {"text": "by um spent by each routine and the call", "start": 1429.039, "duration": 3.681}, {"text": "tree", "start": 1432.159, "duration": 2.321}, {"text": "are gonna be there in the same file one", "start": 1432.72, "duration": 3.36}, {"text": "one after the other", "start": 1434.48, "duration": 5.199}, {"text": "and sorry i can't i'm joe gay wang", "start": 1436.08, "duration": 6.16}, {"text": "well talk about io band no in this case", "start": 1439.679, "duration": 3.841}, {"text": "in this talk i'm just going to be", "start": 1442.24, "duration": 4.0}, {"text": "focusing on", "start": 1443.52, "duration": 5.519}, {"text": "on on compute and and memory bound codes", "start": 1446.24, "duration": 5.28}, {"text": "but i'm hoping that in a future", "start": 1449.039, "duration": 4.24}, {"text": "um future talk will also get into memory", "start": 1451.52, "duration": 3.44}, {"text": "bound", "start": 1453.279, "duration": 4.081}, {"text": "and then finally question from sunshine", "start": 1454.96, "duration": 3.12}, {"text": "zhu", "start": 1457.36, "duration": 2.72}, {"text": "difference between using dynamic array", "start": 1458.08, "duration": 4.479}, {"text": "and using static array an example", "start": 1460.08, "duration": 4.88}, {"text": "i'm going to say for for the purposes of", "start": 1462.559, "duration": 4.801}, {"text": "optimization", "start": 1464.96, "duration": 4.56}, {"text": "they um there there's really no", "start": 1467.36, "duration": 3.76}, {"text": "difference we're going to have the same", "start": 1469.52, "duration": 4.399}, {"text": "layout of the of the data in memory", "start": 1471.12, "duration": 6.24}, {"text": "namely that it's going to be contiguous", "start": 1473.919, "duration": 3.441}, {"text": "okay so what's happening when we're when", "start": 1478.159, "duration": 5.281}, {"text": "we when we execute this block of code", "start": 1480.559, "duration": 4.561}, {"text": "where we're incrementing these 100", "start": 1483.44, "duration": 5.52}, {"text": "elements of the integer array", "start": 1485.12, "duration": 5.439}, {"text": "so when we when we hit the first", "start": 1488.96, "duration": 3.76}, {"text": "iteration we're going to load elements", "start": 1490.559, "duration": 5.521}, {"text": "0 through 15 into cash so those 16", "start": 1492.72, "duration": 4.8}, {"text": "elements will comprise one", "start": 1496.08, "duration": 4.079}, {"text": "64 byte cache line we're then going to", "start": 1497.52, "duration": 3.519}, {"text": "increment", "start": 1500.159, "duration": 3.921}, {"text": "elements 0 through 15 and then we're", "start": 1501.039, "duration": 5.281}, {"text": "going to load the next 16 elements", "start": 1504.08, "duration": 4.88}, {"text": "16 through 31 cash and then increment", "start": 1506.32, "duration": 3.839}, {"text": "those elements", "start": 1508.96, "duration": 2.48}, {"text": "so it looks like we're going to be", "start": 1510.159, "duration": 3.921}, {"text": "having a cash miss every 16", "start": 1511.44, "duration": 6.08}, {"text": "iterations but in reality the processor", "start": 1514.08, "duration": 4.4}, {"text": "designers they're", "start": 1517.52, "duration": 2.639}, {"text": "really really smart and they'll do", "start": 1518.48, "duration": 3.84}, {"text": "things like automatic prefetching of", "start": 1520.159, "duration": 2.721}, {"text": "data", "start": 1522.32, "duration": 2.56}, {"text": "so they can so you can grab that next", "start": 1522.88, "duration": 4.24}, {"text": "cache line before it's needed", "start": 1524.88, "duration": 6.0}, {"text": "so what's going to happen here is um", "start": 1527.12, "duration": 6.64}, {"text": "as as we're working on those first 16", "start": 1530.88, "duration": 3.36}, {"text": "elements", "start": 1533.76, "duration": 2.08}, {"text": "hopefully we're going to get that next", "start": 1534.24, "duration": 3.679}, {"text": "that next cache line loaded before we", "start": 1535.84, "duration": 4.319}, {"text": "need it", "start": 1537.919, "duration": 3.76}, {"text": "okay one of the questions that often", "start": 1540.159, "duration": 3.361}, {"text": "comes up during these talks is", "start": 1541.679, "duration": 4.401}, {"text": "do i have control over cash so for", "start": 1543.52, "duration": 4.24}, {"text": "example is there a command that i", "start": 1546.08, "duration": 4.079}, {"text": "could um that i could build onto my code", "start": 1547.76, "duration": 3.12}, {"text": "to say", "start": 1550.159, "duration": 3.76}, {"text": "go out and grab this cash line um", "start": 1550.88, "duration": 5.76}, {"text": "no they're to the best of my knowledge", "start": 1553.919, "duration": 4.721}, {"text": "there are no programming constructs that", "start": 1556.64, "duration": 4.24}, {"text": "give you direct control over cash", "start": 1558.64, "duration": 3.44}, {"text": "that this is something that's", "start": 1560.88, "duration": 3.2}, {"text": "implemented at the hardware level the", "start": 1562.08, "duration": 3.52}, {"text": "modern processes are going to", "start": 1564.08, "duration": 3.92}, {"text": "directly implement the cash replacement", "start": 1565.6, "duration": 3.52}, {"text": "strategies", "start": 1568.0, "duration": 2.96}, {"text": "branch prediction and prefetch", "start": 1569.12, "duration": 4.08}, {"text": "mechanisms so i'm going to say", "start": 1570.96, "duration": 3.52}, {"text": "the best that you could do is just", "start": 1573.2, "duration": 3.04}, {"text": "follow the standard practices", "start": 1574.48, "duration": 4.96}, {"text": "of exploiting temporal spatial locality", "start": 1576.24, "duration": 6.319}, {"text": "and in some cases to choose um to choose", "start": 1579.44, "duration": 4.8}, {"text": "parameters for for your code", "start": 1582.559, "duration": 4.961}, {"text": "based on those cache sizes", "start": 1584.24, "duration": 5.2}, {"text": "so multi-dimensional arrays is where", "start": 1587.52, "duration": 4.08}, {"text": "things get really interesting", "start": 1589.44, "duration": 3.52}, {"text": "so from the computer's point of view", "start": 1591.6, "duration": 2.959}, {"text": "there is no such thing as a", "start": 1592.96, "duration": 2.88}, {"text": "two-dimensional array", "start": 1594.559, "duration": 3.521}, {"text": "this is what we call syntactic sugar", "start": 1595.84, "duration": 4.16}, {"text": "it's provided just as a convenience of", "start": 1598.08, "duration": 2.959}, {"text": "the programmer", "start": 1600.0, "duration": 3.279}, {"text": "so under the hood the array is stored as", "start": 1601.039, "duration": 4.88}, {"text": "a linear block of data", "start": 1603.279, "duration": 4.321}, {"text": "the most important thing that you have", "start": 1605.919, "duration": 3.841}, {"text": "to remember is that there are two", "start": 1607.6, "duration": 4.64}, {"text": "conventions for storing data there's", "start": 1609.76, "duration": 5.76}, {"text": "column major order and row major order", "start": 1612.24, "duration": 5.84}, {"text": "in column major order the first or the", "start": 1615.52, "duration": 5.279}, {"text": "leftmost index varies the fastest", "start": 1618.08, "duration": 5.76}, {"text": "so this is used in fortran r and matlab", "start": 1620.799, "duration": 5.681}, {"text": "so let's say i have this 2d array um", "start": 1623.84, "duration": 5.12}, {"text": "with the elements 1 through 9", "start": 1626.48, "duration": 3.92}, {"text": "the way they're going to be stored in", "start": 1628.96, "duration": 3.52}, {"text": "memory is i'm going to go down the first", "start": 1630.4, "duration": 2.8}, {"text": "column", "start": 1632.48, "duration": 4.24}, {"text": "147 down the second column 2 5", "start": 1633.2, "duration": 7.28}, {"text": "8 and then the third column 3 6 nine", "start": 1636.72, "duration": 6.559}, {"text": "row major order is where the last or the", "start": 1640.48, "duration": 4.96}, {"text": "rightmost index varies fastest", "start": 1643.279, "duration": 4.64}, {"text": "and this is used in python mathematica", "start": 1645.44, "duration": 4.0}, {"text": "and c plus plus", "start": 1647.919, "duration": 4.88}, {"text": "so again looking at that same 2d array", "start": 1649.44, "duration": 5.04}, {"text": "um what would be with the elements one", "start": 1652.799, "duration": 3.521}, {"text": "through nine i'm going to go across the", "start": 1654.48, "duration": 2.799}, {"text": "first row", "start": 1656.32, "duration": 3.52}, {"text": "one two three the second row four five", "start": 1657.279, "duration": 5.921}, {"text": "six and the third row seven eight nine", "start": 1659.84, "duration": 4.8}, {"text": "so this is going to have really", "start": 1663.2, "duration": 3.92}, {"text": "important implications for how you write", "start": 1664.64, "duration": 4.32}, {"text": "fast code when you're working with these", "start": 1667.12, "duration": 2.4}, {"text": "multi", "start": 1668.96, "duration": 3.36}, {"text": "with these multi-dimensional arrays so", "start": 1669.52, "duration": 4.8}, {"text": "on the top i show an example of properly", "start": 1672.32, "duration": 4.0}, {"text": "written fortran cone", "start": 1674.32, "duration": 5.04}, {"text": "and note the note loop nesting the", "start": 1676.32, "duration": 4.64}, {"text": "outermost loop", "start": 1679.36, "duration": 4.48}, {"text": "corresponds to the rightmost index so i", "start": 1680.96, "duration": 3.52}, {"text": "did have a", "start": 1683.84, "duration": 3.76}, {"text": "do j equals one to n do i equals one to", "start": 1684.48, "duration": 3.679}, {"text": "n", "start": 1687.6, "duration": 3.52}, {"text": "and now i'm adding my my elements i'm", "start": 1688.159, "duration": 4.801}, {"text": "adding the elements my array", "start": 1691.12, "duration": 5.36}, {"text": "z i j equals x i j plus y i j", "start": 1692.96, "duration": 6.4}, {"text": "properly written c code in this case we", "start": 1696.48, "duration": 4.64}, {"text": "want the rightmost index the very", "start": 1699.36, "duration": 3.199}, {"text": "fastest", "start": 1701.12, "duration": 3.919}, {"text": "i've flipped around that loop nesting", "start": 1702.559, "duration": 3.36}, {"text": "here i have the", "start": 1705.039, "duration": 3.76}, {"text": "the loop over i on the outside the loop", "start": 1705.919, "duration": 4.64}, {"text": "over j on the inside", "start": 1708.799, "duration": 5.76}, {"text": "and then z i j equals x i j plus y i j", "start": 1710.559, "duration": 6.321}, {"text": "so this is a this is a perfect example", "start": 1714.559, "duration": 3.6}, {"text": "of a code that's going to be", "start": 1716.88, "duration": 4.08}, {"text": "that's going to be memory band there's", "start": 1718.159, "duration": 3.12}, {"text": "not", "start": 1720.96, "duration": 3.36}, {"text": "a lot of um there's not a lot of", "start": 1721.279, "duration": 4.64}, {"text": "computation going on", "start": 1724.32, "duration": 4.32}, {"text": "all your all you're doing is adding two", "start": 1725.919, "duration": 4.161}, {"text": "values", "start": 1728.64, "duration": 4.0}, {"text": "each iteration loop but you're reading", "start": 1730.08, "duration": 4.56}, {"text": "in two words and you're writing out one", "start": 1732.64, "duration": 2.639}, {"text": "word", "start": 1734.64, "duration": 2.56}, {"text": "so this so in this case it's going to be", "start": 1735.279, "duration": 4.481}, {"text": "bound completely by the memory", "start": 1737.2, "duration": 6.479}, {"text": "and having these having loops nested in", "start": 1739.76, "duration": 6.88}, {"text": "in the improper order is going to really", "start": 1743.679, "duration": 4.48}, {"text": "really impact the performance of your", "start": 1746.64, "duration": 3.44}, {"text": "code", "start": 1748.159, "duration": 3.76}, {"text": "so i have an example in the in the", "start": 1750.08, "duration": 3.599}, {"text": "github repo", "start": 1751.919, "duration": 4.801}, {"text": "um where i've", "start": 1753.679, "duration": 3.041}, {"text": "what where i've written um", "start": 1756.96, "duration": 5.76}, {"text": "that the code in this case i think was", "start": 1760.88, "duration": 4.56}, {"text": "fortran you're using both the proper", "start": 1762.72, "duration": 5.36}, {"text": "and the improper loop nesting i've", "start": 1765.44, "duration": 4.88}, {"text": "looked at the effect of using the", "start": 1768.08, "duration": 5.28}, {"text": "um the amd aocc compilers", "start": 1770.32, "duration": 5.12}, {"text": "on clang and flying these are based on", "start": 1773.36, "duration": 3.12}, {"text": "the llvm", "start": 1775.44, "duration": 4.0}, {"text": "project and the intel compilers icc and", "start": 1776.48, "duration": 5.36}, {"text": "i4", "start": 1779.44, "duration": 2.4}, {"text": "also looked at the effect of the", "start": 1782.64, "duration": 4.48}, {"text": "different optimization levels", "start": 1784.32, "duration": 6.64}, {"text": "so if you look at the documentation for", "start": 1787.12, "duration": 4.88}, {"text": "compilers", "start": 1790.96, "duration": 3.36}, {"text": "there are lots and lots and lots of", "start": 1792.0, "duration": 3.52}, {"text": "options", "start": 1794.32, "duration": 4.56}, {"text": "but but generally for for forgetting for", "start": 1795.52, "duration": 4.8}, {"text": "getting good performance you're gonna", "start": 1798.88, "duration": 3.36}, {"text": "focus that we'll consider these global", "start": 1800.32, "duration": 3.28}, {"text": "optimization levels", "start": 1802.24, "duration": 4.72}, {"text": "dash o zero through dash o three", "start": 1803.6, "duration": 5.52}, {"text": "um dash o zero means that you're turning", "start": 1806.96, "duration": 4.4}, {"text": "off all optimization", "start": 1809.12, "duration": 5.279}, {"text": "one is some limited optimization o2 is", "start": 1811.36, "duration": 3.6}, {"text": "moderate", "start": 1814.399, "duration": 3.041}, {"text": "and o3 is aggressive and the difference", "start": 1814.96, "duration": 4.4}, {"text": "between o2 and o3", "start": 1817.44, "duration": 4.0}, {"text": "is generally that the compiler is", "start": 1819.36, "duration": 4.0}, {"text": "allowed to rearrange mathematical", "start": 1821.44, "duration": 3.599}, {"text": "operations in such a way", "start": 1823.36, "duration": 4.4}, {"text": "that you get better performance but you", "start": 1825.039, "duration": 4.88}, {"text": "don't necessarily guarantee that", "start": 1827.76, "duration": 3.76}, {"text": "that the floating point results are", "start": 1829.919, "duration": 4.24}, {"text": "going to be exactly the same", "start": 1831.52, "duration": 4.639}, {"text": "and the default that this varies as", "start": 1834.159, "duration": 3.361}, {"text": "we're going to see in the see in the", "start": 1836.159, "duration": 3.12}, {"text": "next slide", "start": 1837.52, "duration": 5.44}, {"text": "let me just check the chat real quick", "start": 1839.279, "duration": 6.4}, {"text": "okay um", "start": 1842.96, "duration": 2.719}, {"text": "question here what is the best way to", "start": 1846.24, "duration": 3.84}, {"text": "learn the cache constraints on your", "start": 1848.159, "duration": 4.4}, {"text": "system how many cash levels and so on", "start": 1850.08, "duration": 4.88}, {"text": "that is uh that is a really really good", "start": 1852.559, "duration": 3.041}, {"text": "question", "start": 1854.96, "duration": 2.24}, {"text": "i'm sorry i see that was sent directly", "start": 1855.6, "duration": 3.36}, {"text": "to me i'm gonna put", "start": 1857.2, "duration": 3.76}, {"text": "i'm gonna put a command in the chat at", "start": 1858.96, "duration": 3.76}, {"text": "the end of this talk", "start": 1860.96, "duration": 5.199}, {"text": "it's called ls cpu in fact here let me", "start": 1862.72, "duration": 4.64}, {"text": "just put that in the chat", "start": 1866.159, "duration": 3.441}, {"text": "now", "start": 1867.36, "duration": 2.24}, {"text": "and if you if you if you run the lscpu", "start": 1872.24, "duration": 4.24}, {"text": "command it will tell you", "start": 1874.399, "duration": 5.921}, {"text": "um all about the cash levels um", "start": 1876.48, "duration": 6.88}, {"text": "the and and their capacities it's not", "start": 1880.32, "duration": 5.599}, {"text": "going to tell you the latency", "start": 1883.36, "duration": 5.199}, {"text": "though and then if you want information", "start": 1885.919, "duration": 4.401}, {"text": "on the on the memory you're right here", "start": 1888.559, "duration": 2.24}, {"text": "right", "start": 1890.32, "duration": 4.16}, {"text": "um proc mem info is is the place to come", "start": 1890.799, "duration": 5.681}, {"text": "but definitely take a look at the output", "start": 1894.48, "duration": 5.12}, {"text": "from lscpu", "start": 1896.48, "duration": 3.12}, {"text": "um when we're compiling the code we also", "start": 1900.24, "duration": 4.64}, {"text": "want to make sure that we're compiling", "start": 1903.039, "duration": 4.88}, {"text": "for um or compiling for our architecture", "start": 1904.88, "duration": 5.76}, {"text": "if you're using the amd compilers we", "start": 1907.919, "duration": 4.161}, {"text": "recommend using the dash", "start": 1910.64, "duration": 4.72}, {"text": "m arch equals zn ver2 um", "start": 1912.08, "duration": 5.04}, {"text": "flag that this means that the", "start": 1915.36, "duration": 3.52}, {"text": "architecture is going to be set to the", "start": 1917.12, "duration": 2.96}, {"text": "um", "start": 1918.88, "duration": 4.24}, {"text": "to the md zen version 2. if you're using", "start": 1920.08, "duration": 4.64}, {"text": "the intel compilers", "start": 1923.12, "duration": 3.76}, {"text": "generally you want to use dash x host", "start": 1924.72, "duration": 3.36}, {"text": "which means that you're going to get the", "start": 1926.88, "duration": 3.039}, {"text": "highest instruction highest level", "start": 1928.08, "duration": 3.68}, {"text": "instruction set for for the architecture", "start": 1929.919, "duration": 5.12}, {"text": "you're compiling on", "start": 1931.76, "duration": 5.44}, {"text": "okay so you know we've been talking a", "start": 1935.039, "duration": 3.041}, {"text": "lot about", "start": 1937.2, "duration": 4.64}, {"text": "um about membrane codes and", "start": 1938.08, "duration": 6.16}, {"text": "accessing data in the proper order so is", "start": 1941.84, "duration": 4.319}, {"text": "it really that important", "start": 1944.24, "duration": 4.319}, {"text": "so i have a case here where i looked at", "start": 1946.159, "duration": 3.041}, {"text": "a", "start": 1948.559, "duration": 3.6}, {"text": "snippet of code that takes two matrices", "start": 1949.2, "duration": 3.599}, {"text": "um", "start": 1952.159, "duration": 2.64}, {"text": "in this case i ran it for for matrices", "start": 1952.799, "duration": 5.12}, {"text": "of size 30 000 by 30 000 in a fortran", "start": 1954.799, "duration": 3.76}, {"text": "code", "start": 1957.919, "duration": 3.041}, {"text": "with loops nested in the proper and in", "start": 1958.559, "duration": 4.0}, {"text": "the improper orders", "start": 1960.96, "duration": 4.559}, {"text": "so again this is truly a memory bound", "start": 1962.559, "duration": 3.921}, {"text": "application", "start": 1965.519, "duration": 2.961}, {"text": "since we're only doing one addition for", "start": 1966.48, "duration": 5.199}, {"text": "every two eight byte floats that we load", "start": 1968.48, "duration": 5.84}, {"text": "the results on the left are for the um", "start": 1971.679, "duration": 4.321}, {"text": "for the amd compiler", "start": 1974.32, "duration": 4.479}, {"text": "on the right for for the intel compiler", "start": 1976.0, "duration": 4.08}, {"text": "and you see some really interesting", "start": 1978.799, "duration": 2.561}, {"text": "results", "start": 1980.08, "duration": 4.0}, {"text": "and i'll go go into this in the next few", "start": 1981.36, "duration": 4.799}, {"text": "slides", "start": 1984.08, "duration": 4.64}, {"text": "so with the amd compilers we find that", "start": 1986.159, "duration": 4.64}, {"text": "runtimes improve as we enable higher", "start": 1988.72, "duration": 3.679}, {"text": "levels of optimization", "start": 1990.799, "duration": 4.48}, {"text": "up to up to o2 we find in this case that", "start": 1992.399, "duration": 5.601}, {"text": "dash 03 gives the same performance", "start": 1995.279, "duration": 4.88}, {"text": "but also that the default appears to be", "start": 1998.0, "duration": 3.76}, {"text": "the same as disabling", "start": 2000.159, "duration": 4.801}, {"text": "all optimizations so we see that the", "start": 2001.76, "duration": 6.639}, {"text": "um that that the runtimes with", "start": 2004.96, "duration": 6.48}, {"text": "either no optimization specified", "start": 2008.399, "duration": 6.081}, {"text": "or um or or dash o zero", "start": 2011.44, "duration": 6.239}, {"text": "are are the same an improper loop", "start": 2014.48, "duration": 5.12}, {"text": "nesting is always slower than proper", "start": 2017.679, "duration": 2.801}, {"text": "loop nesting", "start": 2019.6, "duration": 3.76}, {"text": "at all optimization levels for example", "start": 2020.48, "duration": 6.559}, {"text": "if we go down to dash 02 or dash 03", "start": 2023.36, "duration": 4.96}, {"text": "which is typically what we're going to", "start": 2027.039, "duration": 3.201}, {"text": "use when we compile our codes", "start": 2028.32, "duration": 5.12}, {"text": "we see that the um that that having the", "start": 2030.24, "duration": 4.48}, {"text": "proper loop nesting", "start": 2033.44, "duration": 3.28}, {"text": "results in code that is almost five", "start": 2034.72, "duration": 3.28}, {"text": "times faster", "start": 2036.72, "duration": 4.319}, {"text": "so it's just just an astounding result", "start": 2038.0, "duration": 5.44}, {"text": "um if we had done this with a much much", "start": 2041.039, "duration": 3.441}, {"text": "smaller problem", "start": 2043.44, "duration": 3.2}, {"text": "the results wouldn't have been dramatic", "start": 2044.48, "duration": 3.439}, {"text": "but in this case", "start": 2046.64, "duration": 4.64}, {"text": "a 30 000 by 30 000 array is just", "start": 2047.919, "duration": 6.16}, {"text": "way too large to fit into cache so we", "start": 2051.28, "duration": 6.319}, {"text": "have to keep going out to memory", "start": 2054.079, "duration": 3.52}, {"text": "now with the intel compiler results are", "start": 2058.48, "duration": 3.599}, {"text": "a little bit different", "start": 2060.639, "duration": 3.841}, {"text": "here it appears that the default is the", "start": 2062.079, "duration": 3.28}, {"text": "same as dash", "start": 2064.48, "duration": 4.56}, {"text": "o2 and also if we get if we go down", "start": 2065.359, "duration": 4.401}, {"text": "toward the", "start": 2069.04, "duration": 4.319}, {"text": "um toward the bottom rows in the table", "start": 2069.76, "duration": 5.919}, {"text": "dash 02 and dash 03", "start": 2073.359, "duration": 5.28}, {"text": "we'll see that the run times are are", "start": 2075.679, "duration": 4.081}, {"text": "identical", "start": 2078.639, "duration": 3.841}, {"text": "which is surprising because in one case", "start": 2079.76, "duration": 4.399}, {"text": "we're accessing the data in the proper", "start": 2082.48, "duration": 2.32}, {"text": "order", "start": 2084.159, "duration": 2.881}, {"text": "and the other where we're accessing in", "start": 2084.8, "duration": 3.279}, {"text": "the wrong order being", "start": 2087.04, "duration": 3.44}, {"text": "very very cash unfriendly so what", "start": 2088.079, "duration": 4.481}, {"text": "happened was the intel compiler", "start": 2090.48, "duration": 4.24}, {"text": "was smart enough to recognize the loops", "start": 2092.56, "duration": 4.079}, {"text": "are improperly nested", "start": 2094.72, "duration": 4.08}, {"text": "and reorders them in order to get in", "start": 2096.639, "duration": 5.041}, {"text": "order to get better performance", "start": 2098.8, "duration": 5.76}, {"text": "if we go back to the um amd compiler", "start": 2101.68, "duration": 3.84}, {"text": "though", "start": 2104.56, "duration": 3.279}, {"text": "look look at the bottom two rows dash o2", "start": 2105.52, "duration": 3.76}, {"text": "and dash o3", "start": 2107.839, "duration": 3.041}, {"text": "we see that with the improper loop", "start": 2109.28, "duration": 3.36}, {"text": "nesting we never approach the", "start": 2110.88, "duration": 2.56}, {"text": "performance", "start": 2112.64, "duration": 3.04}, {"text": "of the proper loop nesting in this case", "start": 2113.44, "duration": 5.36}, {"text": "the amd compiler did not recognize", "start": 2115.68, "duration": 5.52}, {"text": "that the loops were improperly ordered", "start": 2118.8, "duration": 3.039}, {"text": "and", "start": 2121.2, "duration": 4.8}, {"text": "um and and and what and wasn't able to", "start": 2121.839, "duration": 6.481}, {"text": "able to swap the order of those loops", "start": 2126.0, "duration": 3.04}, {"text": "you know so", "start": 2128.32, "duration": 3.6}, {"text": "some really good lessons learned here um", "start": 2129.04, "duration": 4.64}, {"text": "making optimal use of cache is", "start": 2131.92, "duration": 3.52}, {"text": "particularly important in memory bound", "start": 2133.68, "duration": 2.72}, {"text": "codes", "start": 2135.44, "duration": 3.36}, {"text": "sometimes the compiler will help you", "start": 2136.4, "duration": 3.6}, {"text": "like the intel", "start": 2138.8, "duration": 4.16}, {"text": "on compiler and sometimes it won't like", "start": 2140.0, "duration": 5.04}, {"text": "the amd compiler", "start": 2142.96, "duration": 5.44}, {"text": "um also don't don't rely on the default", "start": 2145.04, "duration": 4.16}, {"text": "optimus", "start": 2148.4, "duration": 4.0}, {"text": "default optimization you can see on", "start": 2149.2, "duration": 6.56}, {"text": "when i compiled with with the intel i4", "start": 2152.4, "duration": 4.32}, {"text": "compiler", "start": 2155.76, "duration": 3.599}, {"text": "that if i didn't specify optimization i", "start": 2156.72, "duration": 3.84}, {"text": "got the same", "start": 2159.359, "duration": 5.281}, {"text": "um same results as if i had specified o2", "start": 2160.56, "duration": 7.12}, {"text": "on the amd compiler if i didn't specify", "start": 2164.64, "duration": 4.0}, {"text": "optimization", "start": 2167.68, "duration": 2.96}, {"text": "it was like turning off all", "start": 2168.64, "duration": 3.76}, {"text": "optimizations it was like dash oh", "start": 2170.64, "duration": 5.28}, {"text": "zero so make sure that", "start": 2172.4, "duration": 5.12}, {"text": "that that you wrote your code to be", "start": 2175.92, "duration": 4.0}, {"text": "efficient don't count on the compiler", "start": 2177.52, "duration": 5.52}, {"text": "to help you out and always explicitly", "start": 2179.92, "duration": 4.4}, {"text": "specify a level", "start": 2183.04, "duration": 4.48}, {"text": "level of optimization let me just check", "start": 2184.32, "duration": 4.799}, {"text": "the chat", "start": 2187.52, "duration": 3.839}, {"text": "um", "start": 2189.119, "duration": 2.24}, {"text": "all right so there's a comment here from", "start": 2193.2, "duration": 4.0}, {"text": "from m dragowski", "start": 2195.119, "duration": 3.521}, {"text": "so when someone decides to put a", "start": 2197.2, "duration": 3.36}, {"text": "multi-dimensional array computation from", "start": 2198.64, "duration": 5.04}, {"text": "python to r they need to review update", "start": 2200.56, "duration": 4.72}, {"text": "their array computations", "start": 2203.68, "duration": 5.919}, {"text": "yes yes they do if you were um", "start": 2205.28, "duration": 6.48}, {"text": "if you were working on if you're working", "start": 2209.599, "duration": 3.841}, {"text": "with multi-dimensional arrays and you", "start": 2211.76, "duration": 2.96}, {"text": "would explicitly written", "start": 2213.44, "duration": 3.36}, {"text": "loops to operate on them you will have", "start": 2214.72, "duration": 3.04}, {"text": "to change that", "start": 2216.8, "duration": 3.84}, {"text": "as far as tools to automate that porting", "start": 2217.76, "duration": 5.359}, {"text": "i am not aware of any there there may be", "start": 2220.64, "duration": 2.88}, {"text": "some", "start": 2223.119, "duration": 3.761}, {"text": "out there um and in fact if you if you", "start": 2223.52, "duration": 4.96}, {"text": "find any i would love to know but i've", "start": 2226.88, "duration": 4.0}, {"text": "never heard of any", "start": 2228.48, "duration": 4.96}, {"text": "um and then there's another question", "start": 2230.88, "duration": 3.12}, {"text": "could this", "start": 2233.44, "duration": 4.24}, {"text": "be due to intel having dash fast math", "start": 2234.0, "duration": 6.0}, {"text": "enabled by default so that it breaks the", "start": 2237.68, "duration": 5.2}, {"text": "ieee floating point compliance", "start": 2240.0, "duration": 6.56}, {"text": "um no in in this case it has nothing to", "start": 2242.88, "duration": 4.64}, {"text": "do with the", "start": 2246.56, "duration": 4.08}, {"text": "with the fast math which i believe um", "start": 2247.52, "duration": 6.12}, {"text": "it gives you access to faster", "start": 2250.64, "duration": 4.16}, {"text": "implementations", "start": 2253.64, "duration": 3.479}, {"text": "of trig functions and powers and", "start": 2254.8, "duration": 3.2}, {"text": "logarithms and", "start": 2257.119, "duration": 4.401}, {"text": "logarithms and so on um and also there", "start": 2258.0, "duration": 6.16}, {"text": "there's no floating point compliance", "start": 2261.52, "duration": 4.319}, {"text": "already put that that that's being", "start": 2264.16, "duration": 4.88}, {"text": "violated because the", "start": 2265.839, "duration": 6.0}, {"text": "um", "start": 2269.04, "duration": 2.799}, {"text": "the the same set of operations the", "start": 2272.72, "duration": 4.16}, {"text": "addition the element by element addition", "start": 2274.8, "duration": 3.039}, {"text": "of those arrays", "start": 2276.88, "duration": 3.199}, {"text": "is is being done except just in a", "start": 2277.839, "duration": 3.28}, {"text": "different order", "start": 2280.079, "duration": 3.441}, {"text": "so yeah so the the fast math will help", "start": 2281.119, "duration": 4.0}, {"text": "you if you're using those intrinsic", "start": 2283.52, "duration": 2.96}, {"text": "functions but in this case", "start": 2285.119, "duration": 3.441}, {"text": "it um it didn't have anything to do with", "start": 2286.48, "duration": 5.28}, {"text": "the results that we saw here", "start": 2288.56, "duration": 3.2}, {"text": "okay i'm going to move on we've i", "start": 2292.24, "duration": 4.08}, {"text": "realized even with the shortened version", "start": 2294.4, "duration": 2.24}, {"text": "i", "start": 2296.32, "duration": 2.32}, {"text": "still have too much material for for the", "start": 2296.64, "duration": 3.68}, {"text": "for the one hour there are a lot of", "start": 2298.64, "duration": 3.52}, {"text": "other loop level optimization to", "start": 2300.32, "duration": 4.72}, {"text": "do loop fusion and fission loop", "start": 2302.16, "duration": 4.48}, {"text": "invariant code motion", "start": 2305.04, "duration": 4.4}, {"text": "peeling on rolling blocking breaking up", "start": 2306.64, "duration": 3.68}, {"text": "loops early", "start": 2309.44, "duration": 3.36}, {"text": "and something i call short short loop", "start": 2310.32, "duration": 4.08}, {"text": "optimizations", "start": 2312.8, "duration": 3.92}, {"text": "so loop fusion this is one of the most", "start": 2314.4, "duration": 4.16}, {"text": "basic loop level optimizations", "start": 2316.72, "duration": 4.879}, {"text": "it's where we take two loops with the", "start": 2318.56, "duration": 5.039}, {"text": "same range of iterations and we combine", "start": 2321.599, "duration": 4.561}, {"text": "them into a single loop", "start": 2323.599, "duration": 5.441}, {"text": "this can also give you a good boost if", "start": 2326.16, "duration": 3.36}, {"text": "you're", "start": 2329.04, "duration": 2.079}, {"text": "working with if you're working with", "start": 2329.52, "duration": 4.24}, {"text": "single loops especially if they reuse", "start": 2331.119, "duration": 3.601}, {"text": "data", "start": 2333.76, "duration": 2.96}, {"text": "so you can see on the on the left hand", "start": 2334.72, "duration": 4.639}, {"text": "side i'm taking zi", "start": 2336.72, "duration": 5.6}, {"text": "i'm setting equal to x i times y i plus", "start": 2339.359, "duration": 3.841}, {"text": "a i", "start": 2342.32, "duration": 2.72}, {"text": "and then the next loop i'm working with", "start": 2343.2, "duration": 3.36}, {"text": "those same set of arrays", "start": 2345.04, "duration": 4.88}, {"text": "x y and x y and a but i'm just", "start": 2346.56, "duration": 6.48}, {"text": "um changing the the set of operations in", "start": 2349.92, "duration": 4.32}, {"text": "this case it's x", "start": 2353.04, "duration": 4.64}, {"text": "plus y times a so we could take those", "start": 2354.24, "duration": 4.24}, {"text": "two loops", "start": 2357.68, "duration": 3.52}, {"text": "we can fuse them together and this is", "start": 2358.48, "duration": 5.119}, {"text": "going to um", "start": 2361.2, "duration": 5.84}, {"text": "both give the compiler more um", "start": 2363.599, "duration": 5.361}, {"text": "well more content to work with to", "start": 2367.04, "duration": 3.36}, {"text": "generate optimal code", "start": 2368.96, "duration": 4.96}, {"text": "and it also um it gives us better", "start": 2370.4, "duration": 5.84}, {"text": "better data reviews for example when i", "start": 2373.92, "duration": 3.12}, {"text": "have", "start": 2376.24, "duration": 4.48}, {"text": "elements zero of x y and a in cash in", "start": 2377.04, "duration": 5.12}, {"text": "fact in registers", "start": 2380.72, "duration": 3.44}, {"text": "it's nice to just keep them there and", "start": 2382.16, "duration": 4.72}, {"text": "use them again", "start": 2384.16, "duration": 2.72}, {"text": "so so here here are the results um", "start": 2386.96, "duration": 3.92}, {"text": "of the of the loop fusion experiment", "start": 2391.28, "duration": 5.04}, {"text": "again this is in the github repo", "start": 2393.2, "duration": 5.12}, {"text": "where i looked at an array with 900", "start": 2396.32, "duration": 4.08}, {"text": "million elements", "start": 2398.32, "duration": 5.36}, {"text": "using both the the amd and the intel", "start": 2400.4, "duration": 4.4}, {"text": "compilers", "start": 2403.68, "duration": 7.36}, {"text": "and we could see when i get down to um", "start": 2404.8, "duration": 7.519}, {"text": "we're seeing the same pattern that we", "start": 2411.04, "duration": 4.559}, {"text": "did before with the optimization levels", "start": 2412.319, "duration": 5.441}, {"text": "where the performance of the default", "start": 2415.599, "duration": 3.76}, {"text": "optimization", "start": 2417.76, "duration": 3.599}, {"text": "is the same as no optimization for the", "start": 2419.359, "duration": 3.281}, {"text": "amd compiler", "start": 2421.359, "duration": 3.841}, {"text": "or o2 optimization for for the intel", "start": 2422.64, "duration": 3.84}, {"text": "compiler", "start": 2425.2, "duration": 3.36}, {"text": "also we are seeing a little bit of", "start": 2426.48, "duration": 4.56}, {"text": "difference in in run times between the", "start": 2428.56, "duration": 2.96}, {"text": "amd", "start": 2431.04, "duration": 2.0}, {"text": "and the intel versions and this is", "start": 2431.52, "duration": 3.28}, {"text": "something that i've seen across the", "start": 2433.04, "duration": 2.4}, {"text": "board", "start": 2434.8, "duration": 3.12}, {"text": "that the amd compilers tend to do better", "start": 2435.44, "duration": 3.36}, {"text": "on the amd", "start": 2437.92, "duration": 4.159}, {"text": "architectures but the um", "start": 2438.8, "duration": 5.68}, {"text": "by manually fusing those loops we", "start": 2442.079, "duration": 4.881}, {"text": "typically get about a 30 to 40 percent", "start": 2444.48, "duration": 6.56}, {"text": "um decrease in runtime", "start": 2446.96, "duration": 5.44}, {"text": "i'm going to go through the next few", "start": 2451.04, "duration": 3.6}, {"text": "slides fairly quickly we can also do", "start": 2452.4, "duration": 3.919}, {"text": "something called loop fission", "start": 2454.64, "duration": 3.36}, {"text": "this is where we take a loop and we", "start": 2456.319, "duration": 4.561}, {"text": "split it into split into multiple loops", "start": 2458.0, "duration": 4.64}, {"text": "this is sometimes going to help if the", "start": 2460.88, "duration": 4.32}, {"text": "loop body is too complex or contains too", "start": 2462.64, "duration": 4.479}, {"text": "many data streams", "start": 2465.2, "duration": 3.68}, {"text": "it's often difficult to decide if the", "start": 2467.119, "duration": 3.521}, {"text": "loop should be fused or split", "start": 2468.88, "duration": 3.12}, {"text": "but if in doubt you could always try", "start": 2470.64, "duration": 4.32}, {"text": "both versions and see which is faster", "start": 2472.0, "duration": 6.56}, {"text": "let me check the chat real quick", "start": 2474.96, "duration": 3.6}, {"text": "okay all right there's something called", "start": 2478.839, "duration": 5.561}, {"text": "loop invariant code motion and that this", "start": 2481.599, "duration": 3.201}, {"text": "is just", "start": 2484.4, "duration": 3.28}, {"text": "fancy term for taking a calculator for", "start": 2484.8, "duration": 3.279}, {"text": "taking", "start": 2487.68, "duration": 3.6}, {"text": "read a calculation out of a loop that's", "start": 2488.079, "duration": 4.961}, {"text": "invariant that doesn't change from", "start": 2491.28, "duration": 3.28}, {"text": "iteration to iteration", "start": 2493.04, "duration": 4.4}, {"text": "and just pulling it outside of the loop", "start": 2494.56, "duration": 3.36}, {"text": "um", "start": 2497.44, "duration": 2.32}, {"text": "sometimes the compiler can do this for", "start": 2497.92, "duration": 4.08}, {"text": "you if the loop is particularly simple", "start": 2499.76, "duration": 4.48}, {"text": "but as we've seen especially with the", "start": 2502.0, "duration": 4.16}, {"text": "with the amd compiler", "start": 2504.24, "duration": 4.64}, {"text": "don't count on it fixing i'm fixing", "start": 2506.16, "duration": 4.159}, {"text": "incorrectly or", "start": 2508.88, "duration": 3.84}, {"text": "i was saying correctly but sub optimal", "start": 2510.319, "duration": 4.241}, {"text": "code for you", "start": 2512.72, "duration": 3.28}, {"text": "so on the left we have a case where", "start": 2514.56, "duration": 3.2}, {"text": "we're going um", "start": 2516.0, "duration": 4.079}, {"text": "going through element by element to", "start": 2517.76, "duration": 3.12}, {"text": "taking an", "start": 2520.079, "duration": 2.881}, {"text": "element of x and adding a constant", "start": 2520.88, "duration": 3.52}, {"text": "square root of c to it", "start": 2522.96, "duration": 3.6}, {"text": "this is pretty obvious that we don't", "start": 2524.4, "duration": 4.08}, {"text": "need to calculate the square root of", "start": 2526.56, "duration": 3.759}, {"text": "that constant each iteration", "start": 2528.48, "duration": 4.639}, {"text": "we can pull that out we can pre-compute", "start": 2530.319, "duration": 4.0}, {"text": "the square root of c", "start": 2533.119, "duration": 4.161}, {"text": "and then use that result repeatedly um", "start": 2534.319, "duration": 4.241}, {"text": "within our loop", "start": 2537.28, "duration": 3.36}, {"text": "um square root is a is a fairly", "start": 2538.56, "duration": 3.759}, {"text": "expensive operation and doing something", "start": 2540.64, "duration": 3.28}, {"text": "like this is going to save you", "start": 2542.319, "duration": 4.881}, {"text": "a save a lot of time", "start": 2543.92, "duration": 3.28}, {"text": "but you could also um take advantage of", "start": 2548.72, "duration": 4.879}, {"text": "this with really much more complex code", "start": 2550.96, "duration": 5.76}, {"text": "this is a stripped-down version of a", "start": 2553.599, "duration": 5.121}, {"text": "kernel from an application that i worked", "start": 2556.72, "duration": 3.44}, {"text": "on", "start": 2558.72, "duration": 4.08}, {"text": "with the san diego zoo and the u.s", "start": 2560.16, "duration": 4.159}, {"text": "geological survey", "start": 2562.8, "duration": 3.84}, {"text": "or we have these three nested loops and", "start": 2564.319, "duration": 3.601}, {"text": "there's a", "start": 2566.64, "duration": 3.04}, {"text": "calculation that depends on the", "start": 2567.92, "duration": 3.84}, {"text": "combination of x and y", "start": 2569.68, "duration": 6.48}, {"text": "multiplied by a calculation involving z", "start": 2571.76, "duration": 4.4}, {"text": "so first of all we see that this", "start": 2577.359, "duration": 4.561}, {"text": "quantity x2 y2 does not", "start": 2578.88, "duration": 5.6}, {"text": "depend on the index k on the on the", "start": 2581.92, "duration": 3.12}, {"text": "inner", "start": 2584.48, "duration": 4.08}, {"text": "on the innermost loop and likewise that", "start": 2585.04, "duration": 5.2}, {"text": "quantity square root of b", "start": 2588.56, "duration": 3.6}, {"text": "times x squared y squared does not", "start": 2590.24, "duration": 4.64}, {"text": "depend on me on the index k", "start": 2592.16, "duration": 5.439}, {"text": "so what i could do is i could take the", "start": 2594.88, "duration": 4.479}, {"text": "calculation of x squared", "start": 2597.599, "duration": 3.601}, {"text": "and i could move that to the outermost", "start": 2599.359, "duration": 3.041}, {"text": "loop necessity", "start": 2601.2, "duration": 3.76}, {"text": "so now we're only doing that calculation", "start": 2602.4, "duration": 3.12}, {"text": "nx", "start": 2604.96, "duration": 3.6}, {"text": "times instead of nx times n y times nz", "start": 2605.52, "duration": 4.799}, {"text": "times and then we could take that", "start": 2608.56, "duration": 4.08}, {"text": "calculation of square root x squared y", "start": 2610.319, "duration": 5.28}, {"text": "squared bunk that up one level so now", "start": 2612.64, "duration": 5.439}, {"text": "that's only evaluated n x times n y", "start": 2615.599, "duration": 7.361}, {"text": "times instead of nx times ny times nz", "start": 2618.079, "duration": 6.321}, {"text": "and then we can go a little bit further", "start": 2622.96, "duration": 4.639}, {"text": "we recognize that the calculation of z2", "start": 2624.4, "duration": 5.919}, {"text": "does not depend on the indices i or j", "start": 2627.599, "duration": 3.76}, {"text": "and similarly with", "start": 2630.319, "duration": 4.241}, {"text": "the um with the exponential", "start": 2631.359, "duration": 6.321}, {"text": "so i could in this case i could actually", "start": 2634.56, "duration": 3.68}, {"text": "create an", "start": 2637.68, "duration": 3.76}, {"text": "entire um an entire vector of", "start": 2638.24, "duration": 5.76}, {"text": "invariance and use them so at the top", "start": 2641.44, "duration": 4.08}, {"text": "here in red i show that i'm", "start": 2644.0, "duration": 3.599}, {"text": "calculating this vector what i call z", "start": 2645.52, "duration": 3.04}, {"text": "terms", "start": 2647.599, "duration": 3.361}, {"text": "and then in the innermost loop all i", "start": 2648.56, "duration": 3.2}, {"text": "have to do is", "start": 2650.96, "duration": 2.96}, {"text": "access the element of that array instead", "start": 2651.76, "duration": 6.079}, {"text": "of doing these expensive mathematical", "start": 2653.92, "duration": 3.919}, {"text": "operations", "start": 2660.839, "duration": 4.681}, {"text": "okay i have another question here in", "start": 2663.839, "duration": 3.441}, {"text": "parallel programming we need to watch", "start": 2665.52, "duration": 2.96}, {"text": "for dependency", "start": 2667.28, "duration": 2.64}, {"text": "does that come up in any way in", "start": 2668.48, "duration": 4.08}, {"text": "maneuvers to optimize loops here", "start": 2669.92, "duration": 5.6}, {"text": "um you know i'm not sure that i fully", "start": 2672.56, "duration": 3.44}, {"text": "understand", "start": 2675.52, "duration": 2.88}, {"text": "the question um if you want you can", "start": 2676.0, "duration": 3.839}, {"text": "follow up with me", "start": 2678.4, "duration": 4.56}, {"text": "um after the", "start": 2679.839, "duration": 3.121}, {"text": "after the call i'm gonna put my", "start": 2683.839, "duration": 7.921}, {"text": "put put my email in there um there", "start": 2690.0, "duration": 3.44}, {"text": "there's some subtle", "start": 2691.76, "duration": 3.12}, {"text": "problems that we run into once we're", "start": 2693.44, "duration": 4.0}, {"text": "working with parallel codes", "start": 2694.88, "duration": 4.959}, {"text": "okay look peeling is an optimization", "start": 2697.44, "duration": 3.28}, {"text": "where we take", "start": 2699.839, "duration": 3.201}, {"text": "one or more iterations and we pull them", "start": 2700.72, "duration": 3.52}, {"text": "out of the loop", "start": 2703.04, "duration": 3.76}, {"text": "so that this avoids um calculations", "start": 2704.24, "duration": 4.879}, {"text": "associated with special iterations", "start": 2706.8, "duration": 4.319}, {"text": "and it's often used in conjunction with", "start": 2709.119, "duration": 3.361}, {"text": "loop fusion", "start": 2711.119, "duration": 2.801}, {"text": "when we have loops with slightly", "start": 2712.48, "duration": 3.119}, {"text": "different iteration ranges", "start": 2713.92, "duration": 3.12}, {"text": "so again this is a very contrived", "start": 2715.599, "duration": 3.361}, {"text": "example but if i look on the left", "start": 2717.04, "duration": 4.48}, {"text": "i have my first loop it goes from i", "start": 2718.96, "duration": 3.84}, {"text": "equals zero to n", "start": 2721.52, "duration": 3.36}, {"text": "and my second loop goes from i equals", "start": 2722.8, "duration": 3.2}, {"text": "one to n", "start": 2724.88, "duration": 3.439}, {"text": "also on that first loop i have one", "start": 2726.0, "duration": 3.52}, {"text": "special case", "start": 2728.319, "duration": 4.161}, {"text": "if i equal zero then i do um i do a", "start": 2729.52, "duration": 3.68}, {"text": "division", "start": 2732.48, "duration": 4.8}, {"text": "x divided by y otherwise i do x plus y", "start": 2733.2, "duration": 7.04}, {"text": "what i can do is i can peel off that one", "start": 2737.28, "duration": 5.039}, {"text": "special case", "start": 2740.24, "duration": 5.52}, {"text": "um iteration", "start": 2742.319, "duration": 6.321}, {"text": "pre-calculate that now i have two loops", "start": 2745.76, "duration": 3.52}, {"text": "that have", "start": 2748.64, "duration": 3.12}, {"text": "that have the same range and i can fuse", "start": 2749.28, "duration": 3.839}, {"text": "them together and this is going to be a", "start": 2751.76, "duration": 4.88}, {"text": "lot faster than the original", "start": 2753.119, "duration": 3.521}, {"text": "loop unrolling this is a really", "start": 2757.359, "duration": 7.041}, {"text": "common um optimization but it's mostly", "start": 2761.52, "duration": 5.2}, {"text": "done by the compiler", "start": 2764.4, "duration": 4.16}, {"text": "sometimes if you have if you have a loop", "start": 2766.72, "duration": 4.16}, {"text": "that just does not have enough content", "start": 2768.56, "duration": 4.16}, {"text": "there's not enough instructions for the", "start": 2770.88, "duration": 4.239}, {"text": "compiler to work with in order to write", "start": 2772.72, "duration": 5.04}, {"text": "in order to um to generate optimal", "start": 2775.119, "duration": 3.681}, {"text": "machine code", "start": 2777.76, "duration": 3.44}, {"text": "that keeps the the arithmetic functional", "start": 2778.8, "duration": 3.76}, {"text": "units busy", "start": 2781.2, "duration": 3.36}, {"text": "so what the compiler will do is take", "start": 2782.56, "duration": 4.24}, {"text": "that body and it will replicate it", "start": 2784.56, "duration": 3.84}, {"text": "multiple times", "start": 2786.8, "duration": 3.6}, {"text": "and then replace the loop with a strided", "start": 2788.4, "duration": 6.56}, {"text": "loop so in this case instead of um", "start": 2790.4, "duration": 4.56}, {"text": "doing doing one operation at a time z i", "start": 2795.04, "duration": 4.24}, {"text": "equals x i plus y", "start": 2797.92, "duration": 5.84}, {"text": "i we replicate that four times and we", "start": 2799.28, "duration": 6.4}, {"text": "replace a loop with the loop with stride", "start": 2803.76, "duration": 4.16}, {"text": "four", "start": 2805.68, "duration": 2.24}, {"text": "i do one of the reasons i bring this up", "start": 2809.44, "duration": 4.24}, {"text": "is you'll see a lot of talk about", "start": 2811.68, "duration": 3.919}, {"text": "loop unrolling in the in the", "start": 2813.68, "duration": 3.52}, {"text": "optimization literature", "start": 2815.599, "duration": 4.161}, {"text": "but you will rarely beat the compiler", "start": 2817.2, "duration": 4.159}, {"text": "and manual loop and rolling will make", "start": 2819.76, "duration": 2.16}, {"text": "your code", "start": 2821.359, "duration": 3.041}, {"text": "ugly and difficult to maintain and also", "start": 2821.92, "duration": 4.64}, {"text": "the best choice for the unrolling deck", "start": 2824.4, "duration": 3.84}, {"text": "is probably going to be processor", "start": 2826.56, "duration": 5.279}, {"text": "architecture dependent", "start": 2828.24, "duration": 3.599}, {"text": "but every once in a rare case", "start": 2832.48, "duration": 5.599}, {"text": "you might be able to beat the compiler", "start": 2836.079, "duration": 4.321}, {"text": "so this is an example from a chemistry", "start": 2838.079, "duration": 4.161}, {"text": "code i had worked on about six seven", "start": 2840.4, "duration": 2.959}, {"text": "years ago", "start": 2842.24, "duration": 4.879}, {"text": "a very special case where the loops were", "start": 2843.359, "duration": 5.921}, {"text": "extremely complicated", "start": 2847.119, "duration": 3.761}, {"text": "you'll see down near the bottom that i", "start": 2849.28, "duration": 3.6}, {"text": "have a bracket that says several hundred", "start": 2850.88, "duration": 4.239}, {"text": "lines of code not shown", "start": 2852.88, "duration": 5.439}, {"text": "where the loop was just", "start": 2855.119, "duration": 6.0}, {"text": "too complex that the compiler couldn't", "start": 2858.319, "duration": 4.961}, {"text": "parse it properly and determine", "start": 2861.119, "duration": 3.681}, {"text": "what the what the optimal loop and", "start": 2863.28, "duration": 3.839}, {"text": "rolling was in this case i was able to", "start": 2864.8, "duration": 3.68}, {"text": "manually unroll it by", "start": 2867.119, "duration": 4.801}, {"text": "um by 4x and do better better than the", "start": 2868.48, "duration": 4.24}, {"text": "compiler", "start": 2871.92, "duration": 3.04}, {"text": "but this is the only example i could", "start": 2872.72, "duration": 3.2}, {"text": "ever think of", "start": 2874.96, "duration": 4.639}, {"text": "where i was able to beat the compiler", "start": 2875.92, "duration": 3.679}, {"text": "i'm getting into optimizations where you", "start": 2880.559, "duration": 3.201}, {"text": "need to know a little bit about the", "start": 2882.64, "duration": 2.959}, {"text": "semantics of your code", "start": 2883.76, "duration": 3.52}, {"text": "look for opportunities to break out of a", "start": 2885.599, "duration": 3.76}, {"text": "loop early this is generally going to", "start": 2887.28, "duration": 3.76}, {"text": "require that you understand what your", "start": 2889.359, "duration": 2.881}, {"text": "code is doing", "start": 2891.04, "duration": 4.319}, {"text": "this is a snippet of code adapted from a", "start": 2892.24, "duration": 5.2}, {"text": "computational finance application i had", "start": 2895.359, "duration": 3.521}, {"text": "worked on", "start": 2897.44, "duration": 4.32}, {"text": "again we're really really stripped down", "start": 2898.88, "duration": 5.199}, {"text": "but we had a test within our loop", "start": 2901.76, "duration": 4.559}, {"text": "if y sub i is less than a constant then", "start": 2904.079, "duration": 3.52}, {"text": "we do a calculation", "start": 2906.319, "duration": 3.921}, {"text": "otherwise we go on to the next iteration", "start": 2907.599, "duration": 3.681}, {"text": "um", "start": 2910.24, "duration": 4.48}, {"text": "working with the developer of this code", "start": 2911.28, "duration": 6.72}, {"text": "we're able to we were able to um know", "start": 2914.72, "duration": 5.76}, {"text": "that the elements of the array y are", "start": 2918.0, "duration": 3.44}, {"text": "monotonically", "start": 2920.48, "duration": 3.92}, {"text": "increasing for example y 0 is less than", "start": 2921.44, "duration": 4.72}, {"text": "or equal to y 1 which is less than or", "start": 2924.4, "duration": 3.84}, {"text": "equal to y 2 and so on", "start": 2926.16, "duration": 4.08}, {"text": "there's no way for the compiler to know", "start": 2928.24, "duration": 4.72}, {"text": "this but with our knowledge", "start": 2930.24, "duration": 5.28}, {"text": "that that y is monotonically increasing", "start": 2932.96, "duration": 3.44}, {"text": "we were able", "start": 2935.52, "duration": 3.44}, {"text": "to to modify the code switch things", "start": 2936.4, "duration": 3.439}, {"text": "around a little bit", "start": 2938.96, "duration": 2.96}, {"text": "so that we test for that condition and", "start": 2939.839, "duration": 3.121}, {"text": "break out early", "start": 2941.92, "duration": 3.76}, {"text": "because once once we satisfy the", "start": 2942.96, "duration": 3.44}, {"text": "condition", "start": 2945.68, "duration": 3.76}, {"text": "y i greater than equal to the constant", "start": 2946.4, "duration": 4.88}, {"text": "we know that that condition is going to", "start": 2949.44, "duration": 7.04}, {"text": "be satisfied for all future iterations", "start": 2951.28, "duration": 7.52}, {"text": "um but look at looking at another", "start": 2956.48, "duration": 4.0}, {"text": "another concrete example from a code", "start": 2958.8, "duration": 2.799}, {"text": "that i worked on", "start": 2960.48, "duration": 4.72}, {"text": "this was a project i did with with", "start": 2961.599, "duration": 6.801}, {"text": "ncar and um los alamos", "start": 2965.2, "duration": 7.04}, {"text": "national lab on a atmospheric", "start": 2968.4, "duration": 5.439}, {"text": "atmospheric modeling code something", "start": 2972.24, "duration": 3.599}, {"text": "called m-pass model for prediction", "start": 2973.839, "duration": 2.48}, {"text": "across", "start": 2975.839, "duration": 3.201}, {"text": "scales if you look at the gridding", "start": 2976.319, "duration": 3.52}, {"text": "you'll notice", "start": 2979.04, "duration": 4.319}, {"text": "that it's a that is an unstructured grid", "start": 2979.839, "duration": 5.52}, {"text": "and that most of the grid cells are", "start": 2983.359, "duration": 3.121}, {"text": "hexagons", "start": 2985.359, "duration": 3.681}, {"text": "but with a little smattering of", "start": 2986.48, "duration": 6.96}, {"text": "pentagons and and heptagons thrown in", "start": 2989.04, "duration": 4.4}, {"text": "so we're able to look at one of one of", "start": 2995.68, "duration": 3.84}, {"text": "the key kernels", "start": 2997.44, "duration": 4.8}, {"text": "um this again is a is a simplified", "start": 2999.52, "duration": 5.12}, {"text": "simplified portion of code", "start": 3002.24, "duration": 4.8}, {"text": "where down here in the lower blue box", "start": 3004.64, "duration": 4.08}, {"text": "was the original code", "start": 3007.04, "duration": 4.96}, {"text": "where for each cell we do we do an", "start": 3008.72, "duration": 4.24}, {"text": "iteration", "start": 3012.0, "duration": 3.28}, {"text": "over the edges of that cell regardless", "start": 3012.96, "duration": 3.84}, {"text": "of the cell shape", "start": 3015.28, "duration": 6.48}, {"text": "but in a real calculation roughly 99.999", "start": 3016.8, "duration": 8.08}, {"text": "of the cells are hexagons so what we did", "start": 3021.76, "duration": 5.28}, {"text": "was we split off that common case that's", "start": 3024.88, "duration": 4.08}, {"text": "the blue box on top here", "start": 3027.04, "duration": 4.96}, {"text": "we optimized for that we", "start": 3028.96, "duration": 7.119}, {"text": "basically flat flattened that loop", "start": 3032.0, "duration": 6.72}, {"text": "we explicitly wrote the calculation but", "start": 3036.079, "duration": 3.04}, {"text": "then", "start": 3038.72, "duration": 2.96}, {"text": "we retained um retained the original", "start": 3039.119, "duration": 3.041}, {"text": "code", "start": 3041.68, "duration": 2.48}, {"text": "for the cases where we don't impact the", "start": 3042.16, "duration": 3.36}, {"text": "counter hexagon", "start": 3044.16, "duration": 3.199}, {"text": "and i believe that this and a few other", "start": 3045.52, "duration": 3.039}, {"text": "optimizations", "start": 3047.359, "duration": 4.48}, {"text": "were able to speed up the um", "start": 3048.559, "duration": 5.201}, {"text": "that the transport portion this code by", "start": 3051.839, "duration": 3.28}, {"text": "about 40", "start": 3053.76, "duration": 3.68}, {"text": "and again it was just by taking a look", "start": 3055.119, "duration": 4.081}, {"text": "at what is the most common case and", "start": 3057.44, "duration": 3.919}, {"text": "optimizing for that", "start": 3059.2, "duration": 3.84}, {"text": "let me go to the chat i see a couple of", "start": 3061.359, "duration": 5.2}, {"text": "questions um", "start": 3063.04, "duration": 3.519}, {"text": "okay", "start": 3066.839, "duration": 5.641}, {"text": "let me move on okay force reduction", "start": 3068.8, "duration": 5.44}, {"text": "that this is another place where you can", "start": 3072.48, "duration": 4.48}, {"text": "get a um", "start": 3074.24, "duration": 4.879}, {"text": "a really big improvement in the", "start": 3076.96, "duration": 4.159}, {"text": "performance of your code", "start": 3079.119, "duration": 4.96}, {"text": "there are certain operations like um", "start": 3081.119, "duration": 4.72}, {"text": "evaluating trig functions", "start": 3084.079, "duration": 4.961}, {"text": "exponent exponentiation logarithms that", "start": 3085.839, "duration": 3.441}, {"text": "are", "start": 3089.04, "duration": 3.36}, {"text": "really really expensive so in the case", "start": 3089.28, "duration": 3.839}, {"text": "of", "start": 3092.4, "duration": 2.959}, {"text": "exponentiation look for opportunities", "start": 3093.119, "duration": 4.161}, {"text": "replaced with multiplications", "start": 3095.359, "duration": 3.921}, {"text": "especially if the exponent is known at", "start": 3097.28, "duration": 4.0}, {"text": "compile time", "start": 3099.28, "duration": 5.2}, {"text": "so on the left i have i have um calls to", "start": 3101.28, "duration": 4.0}, {"text": "the c or c", "start": 3104.48, "duration": 3.839}, {"text": "plus plus power function right raising x", "start": 3105.28, "duration": 4.079}, {"text": "to the eighth power", "start": 3108.319, "duration": 4.401}, {"text": "x to the 1.5 power i could really speed", "start": 3109.359, "duration": 4.321}, {"text": "that up", "start": 3112.72, "duration": 4.399}, {"text": "um by explicitly calculating x to the", "start": 3113.68, "duration": 4.24}, {"text": "eighth", "start": 3117.119, "duration": 2.72}, {"text": "therefore series that were a series of", "start": 3117.92, "duration": 3.6}, {"text": "multiplications", "start": 3119.839, "duration": 4.961}, {"text": "or i could replace the um x to the 1.5", "start": 3121.52, "duration": 4.319}, {"text": "power with", "start": 3124.8, "duration": 3.6}, {"text": "x times the square root of x let me", "start": 3125.839, "duration": 4.161}, {"text": "point out that many languages", "start": 3128.4, "duration": 4.08}, {"text": "overlap overload the power function so", "start": 3130.0, "duration": 4.079}, {"text": "if you really intend to raise to an", "start": 3132.48, "duration": 2.56}, {"text": "integer power", "start": 3134.079, "duration": 4.161}, {"text": "be sure to use an integer argument so in", "start": 3135.04, "duration": 4.72}, {"text": "the case here i show", "start": 3138.24, "duration": 3.76}, {"text": "power of x comma eight make sure that", "start": 3139.76, "duration": 3.839}, {"text": "you write that as x comma eight", "start": 3142.0, "duration": 5.52}, {"text": "and not x comma eight point zero", "start": 3143.599, "duration": 3.921}, {"text": "um if you have a code that spends a lot", "start": 3149.04, "duration": 4.16}, {"text": "of time in trig functions", "start": 3151.119, "duration": 3.841}, {"text": "this is a chance to apply your high", "start": 3153.2, "duration": 3.04}, {"text": "school math", "start": 3154.96, "duration": 5.52}, {"text": "um you you using the using the trig", "start": 3156.24, "duration": 5.92}, {"text": "identities that you would learn saying", "start": 3160.48, "duration": 3.76}, {"text": "junior or senior year of high school", "start": 3162.16, "duration": 4.24}, {"text": "just be sure that if you do this that", "start": 3164.24, "duration": 3.04}, {"text": "the identity", "start": 3166.4, "duration": 3.04}, {"text": "that the identities apply to all of the", "start": 3167.28, "duration": 3.92}, {"text": "quadrants", "start": 3169.44, "duration": 3.6}, {"text": "um there was code that i had worked on", "start": 3171.2, "duration": 3.44}, {"text": "about 15 years ago", "start": 3173.04, "duration": 4.799}, {"text": "that just by going in and you're using a", "start": 3174.64, "duration": 4.56}, {"text": "few trig identities", "start": 3177.839, "duration": 3.28}, {"text": "we're able to roughly double or triple", "start": 3179.2, "duration": 4.879}, {"text": "the speed of the code", "start": 3181.119, "duration": 2.96}, {"text": "um look for hidden opportunities for", "start": 3184.16, "duration": 4.64}, {"text": "force reduction", "start": 3186.079, "duration": 5.201}, {"text": "um so sometimes sometimes there will be", "start": 3188.8, "duration": 3.6}, {"text": "a", "start": 3191.28, "duration": 4.4}, {"text": "um an expensive operation in a logical", "start": 3192.4, "duration": 4.88}, {"text": "test and i'll be showing a", "start": 3195.68, "duration": 2.96}, {"text": "showing a good example of this in the", "start": 3197.28, "duration": 3.36}, {"text": "next slide um", "start": 3198.64, "duration": 3.52}, {"text": "in the loop on the left where we're", "start": 3200.64, "duration": 3.199}, {"text": "iterating over the elements", "start": 3202.16, "duration": 4.64}, {"text": "of the array x and we want to know how", "start": 3203.839, "duration": 3.76}, {"text": "many times", "start": 3206.8, "duration": 3.12}, {"text": "is the logarithm of x less than a", "start": 3207.599, "duration": 3.841}, {"text": "constant", "start": 3209.92, "duration": 4.08}, {"text": "logarithm is a is a very expensive", "start": 3211.44, "duration": 5.2}, {"text": "operation", "start": 3214.0, "duration": 2.64}, {"text": "um we can we can be a little clever here", "start": 3216.72, "duration": 3.52}, {"text": "though", "start": 3219.28, "duration": 4.96}, {"text": "we can take the um the exponent", "start": 3220.24, "duration": 5.92}, {"text": "of both the left and the right hand side", "start": 3224.24, "duration": 3.44}, {"text": "of that comparison", "start": 3226.16, "duration": 4.56}, {"text": "and replace log x less than", "start": 3227.68, "duration": 6.72}, {"text": "c with x less than the exponent of c", "start": 3230.72, "duration": 6.08}, {"text": "pre-calculate that once and then reuse", "start": 3234.4, "duration": 4.08}, {"text": "it and that's going to save us a lot of", "start": 3236.8, "duration": 3.759}, {"text": "time", "start": 3238.48, "duration": 5.599}, {"text": "so in the github repo i have a um i have", "start": 3240.559, "duration": 5.601}, {"text": "a little toy problem in there", "start": 3244.079, "duration": 5.841}, {"text": "where i randomly generate n particles in", "start": 3246.16, "duration": 5.52}, {"text": "this case it was a hundred thousand", "start": 3249.92, "duration": 2.8}, {"text": "particles in unit", "start": 3251.68, "duration": 4.159}, {"text": "square and then just test by brute force", "start": 3252.72, "duration": 4.639}, {"text": "how many of those particle pairs are", "start": 3255.839, "duration": 3.28}, {"text": "specific are separated", "start": 3257.359, "duration": 3.921}, {"text": "by less than a specified distance in", "start": 3259.119, "duration": 6.401}, {"text": "this case 0.01 with the force reduction", "start": 3261.28, "duration": 6.319}, {"text": "i compared x squared plus y squared", "start": 3265.52, "duration": 4.559}, {"text": "directly to distance squared", "start": 3267.599, "duration": 4.561}, {"text": "without the force reduction i compared", "start": 3270.079, "duration": 3.361}, {"text": "the square root", "start": 3272.16, "duration": 3.04}, {"text": "to the distance and you can see here", "start": 3273.44, "duration": 3.2}, {"text": "that we get an almost", "start": 3275.2, "duration": 4.159}, {"text": "3x speed up for that chunk of cone but", "start": 3276.64, "duration": 3.76}, {"text": "by testing", "start": 3279.359, "duration": 2.641}, {"text": "by by avoiding the calculation of the", "start": 3280.4, "duration": 3.52}, {"text": "square root and just testing the", "start": 3282.0, "duration": 3.04}, {"text": "distance squared", "start": 3283.92, "duration": 4.159}, {"text": "rather than the um rather than the", "start": 3285.04, "duration": 5.6}, {"text": "distance directly", "start": 3288.079, "duration": 5.28}, {"text": "okay so i am almost out of time on these", "start": 3290.64, "duration": 4.4}, {"text": "slides we posted", "start": 3293.359, "duration": 3.601}, {"text": "this is where things get really really", "start": 3295.04, "duration": 3.84}, {"text": "interesting inter-procedural", "start": 3296.96, "duration": 3.359}, {"text": "optimizations", "start": 3298.88, "duration": 3.12}, {"text": "up until now we've been looking at", "start": 3300.319, "duration": 3.841}, {"text": "individual routines or individual chunks", "start": 3302.0, "duration": 3.119}, {"text": "of code", "start": 3304.16, "duration": 2.959}, {"text": "but inter-procedural optimizations are", "start": 3305.119, "duration": 3.841}, {"text": "we take a high-level view", "start": 3307.119, "duration": 5.281}, {"text": "of the entire program spanning across", "start": 3308.96, "duration": 6.48}, {"text": "multiple functions these are often a lot", "start": 3312.4, "duration": 4.88}, {"text": "more work they require that you have an", "start": 3315.44, "duration": 5.52}, {"text": "intimate understanding of your code um", "start": 3317.28, "duration": 5.44}, {"text": "recognizing operations say that are", "start": 3320.96, "duration": 3.76}, {"text": "repeated in the same sets of data of", "start": 3322.72, "duration": 3.839}, {"text": "from one indication of a function to the", "start": 3324.72, "duration": 2.24}, {"text": "next", "start": 3326.559, "duration": 1.76}, {"text": "but again they could give you a really", "start": 3326.96, "duration": 4.159}, {"text": "big payoff i'm just gonna", "start": 3328.319, "duration": 4.52}, {"text": "flip through these slides this is an", "start": 3331.119, "duration": 3.041}, {"text": "example", "start": 3332.839, "duration": 3.161}, {"text": "that i talked about earlier in flow", "start": 3334.16, "duration": 4.399}, {"text": "cytometry", "start": 3336.0, "duration": 5.119}, {"text": "and we had a function that was called", "start": 3338.559, "duration": 4.321}, {"text": "that that was called five times in a row", "start": 3341.119, "duration": 3.761}, {"text": "with slightly different arguments", "start": 3342.88, "duration": 4.64}, {"text": "we realized that a lot of the work being", "start": 3344.88, "duration": 3.12}, {"text": "done", "start": 3347.52, "duration": 3.36}, {"text": "was the same each time so we were able", "start": 3348.0, "duration": 4.319}, {"text": "to pre-compute results", "start": 3350.88, "duration": 3.36}, {"text": "again this required that we used a", "start": 3352.319, "duration": 3.681}, {"text": "little bit more memory", "start": 3354.24, "duration": 4.48}, {"text": "but we could then save those results and", "start": 3356.0, "duration": 4.4}, {"text": "instead of doing all of the additional", "start": 3358.72, "duration": 3.04}, {"text": "calculations", "start": 3360.4, "duration": 3.199}, {"text": "we could just reference the elements of", "start": 3361.76, "duration": 4.319}, {"text": "those arrays", "start": 3363.599, "duration": 5.2}, {"text": "so we are good we're right at the top of", "start": 3366.079, "duration": 3.681}, {"text": "the hour", "start": 3368.799, "duration": 3.52}, {"text": "just to wrap up optimizing your code", "start": 3369.76, "duration": 4.079}, {"text": "reduces time to solution", "start": 3372.319, "duration": 3.681}, {"text": "saves energy and it makes those valuable", "start": 3373.839, "duration": 4.561}, {"text": "compute resources go further", "start": 3376.0, "duration": 4.48}, {"text": "before you get started make sure it's", "start": 3378.4, "duration": 3.36}, {"text": "worth your effort", "start": 3380.48, "duration": 3.119}, {"text": "you know does code use a lot of time is", "start": 3381.76, "duration": 3.039}, {"text": "it widely used", "start": 3383.599, "duration": 5.041}, {"text": "is it um it is is it going to have a", "start": 3384.799, "duration": 4.241}, {"text": "life", "start": 3388.64, "duration": 2.4}, {"text": "beyond your beyond your one research", "start": 3389.04, "duration": 3.12}, {"text": "project", "start": 3391.04, "duration": 3.12}, {"text": "i didn't get into this i cover this", "start": 3392.16, "duration": 3.28}, {"text": "topic in the in the", "start": 3394.16, "duration": 4.72}, {"text": "full on half day workshop", "start": 3395.44, "duration": 5.679}, {"text": "but when you do optimizations they can", "start": 3398.88, "duration": 4.64}, {"text": "potentially change the results", "start": 3401.119, "duration": 6.24}, {"text": "for example if i replace x to the 1.5", "start": 3403.52, "duration": 7.12}, {"text": "with x times square root of x i'm going", "start": 3407.359, "duration": 3.76}, {"text": "to get", "start": 3410.64, "duration": 3.199}, {"text": "numerically very very slightly different", "start": 3411.119, "duration": 5.041}, {"text": "floating point results", "start": 3413.839, "duration": 4.48}, {"text": "i'm not going to say that one result is", "start": 3416.16, "duration": 5.04}, {"text": "is more is more correct than the other", "start": 3418.319, "duration": 4.721}, {"text": "um but but ask yourself how critical", "start": 3421.2, "duration": 3.2}, {"text": "reproducibility is", "start": 3423.04, "duration": 4.12}, {"text": "most codes do not need bitwise", "start": 3424.4, "duration": 4.88}, {"text": "reproducibility", "start": 3427.16, "duration": 4.84}, {"text": "um we talked about profiling definitely", "start": 3429.28, "duration": 4.64}, {"text": "profile your code when you start off", "start": 3432.0, "duration": 4.079}, {"text": "optimize the code and then if you're", "start": 3433.92, "duration": 3.36}, {"text": "going to keep working", "start": 3436.079, "duration": 3.201}, {"text": "repeat the profiling so that you know", "start": 3437.28, "duration": 3.68}, {"text": "what the new hotspots are", "start": 3439.28, "duration": 3.12}, {"text": "take advantage of the optimized", "start": 3440.96, "duration": 3.44}, {"text": "libraries and the work of others", "start": 3442.4, "duration": 3.76}, {"text": "we like to say that great programmers", "start": 3444.4, "duration": 3.36}, {"text": "steal great code", "start": 3446.16, "duration": 4.48}, {"text": "um try to avoid the mindset that that", "start": 3447.76, "duration": 4.64}, {"text": "you're cheating if you're using somebody", "start": 3450.64, "duration": 2.8}, {"text": "else's work", "start": 3452.4, "duration": 3.52}, {"text": "the folks who develop eigenvalue solvers", "start": 3453.44, "duration": 4.48}, {"text": "and linear algebra teams", "start": 3455.92, "duration": 4.08}, {"text": "they do that they do that professionally", "start": 3457.92, "duration": 3.679}, {"text": "for a living and you're not gonna", "start": 3460.0, "duration": 3.44}, {"text": "you're not gonna come close to what they", "start": 3461.599, "duration": 4.24}, {"text": "do take advantage of that and focus on", "start": 3463.44, "duration": 3.919}, {"text": "your science", "start": 3465.839, "duration": 3.441}, {"text": "know the capabilities and limitations of", "start": 3467.359, "duration": 3.2}, {"text": "your compiler", "start": 3469.28, "duration": 3.12}, {"text": "but don't rely on the compiler to fix", "start": 3470.559, "duration": 3.76}, {"text": "your bad program practices", "start": 3472.4, "duration": 4.24}, {"text": "we saw that the intel compiler was", "start": 3474.319, "duration": 3.361}, {"text": "pretty good about", "start": 3476.64, "duration": 3.199}, {"text": "recognizing what when you did things", "start": 3477.68, "duration": 3.439}, {"text": "that were sub-optimal", "start": 3479.839, "duration": 4.161}, {"text": "but the amd compiler didn't so always", "start": 3481.119, "duration": 5.041}, {"text": "try to write good code", "start": 3484.0, "duration": 5.119}, {"text": "optimizing cache is critical especially", "start": 3486.16, "duration": 4.88}, {"text": "for these memory bound codes", "start": 3489.119, "duration": 3.68}, {"text": "and the biggest payoff sometimes comes", "start": 3491.04, "duration": 3.68}, {"text": "from having a deep understanding of the", "start": 3492.799, "duration": 4.0}, {"text": "semantics and the structure of your code", "start": 3494.72, "duration": 3.52}, {"text": "this is where you could really get into", "start": 3496.799, "duration": 4.0}, {"text": "the inter-procedural optimizations", "start": 3498.24, "duration": 4.079}, {"text": "and with that i will wrap up and i'm", "start": 3500.799, "duration": 3.121}, {"text": "just going to check the chat see if", "start": 3502.319, "duration": 4.8}, {"text": "there are any more questions", "start": 3503.92, "duration": 3.199}, {"text": "okay so is the question from um", "start": 3508.0, "duration": 6.839}, {"text": "robert katie why are power functions so", "start": 3511.839, "duration": 4.48}, {"text": "expensive", "start": 3514.839, "duration": 4.361}, {"text": "yeah so um", "start": 3516.319, "duration": 2.881}, {"text": "so there are certain operations that you", "start": 3519.76, "duration": 4.64}, {"text": "could do directly in hardware", "start": 3521.44, "duration": 4.879}, {"text": "um like additions and and", "start": 3524.4, "duration": 3.199}, {"text": "multiplications", "start": 3526.319, "duration": 3.921}, {"text": "um and actually division and square root", "start": 3527.599, "duration": 3.601}, {"text": "also", "start": 3530.24, "duration": 2.8}, {"text": "did that the power functions and trig", "start": 3531.2, "duration": 4.08}, {"text": "functions actually have to be done in", "start": 3533.04, "duration": 4.4}, {"text": "software it's a whole series of", "start": 3535.28, "duration": 3.36}, {"text": "operations", "start": 3537.44, "duration": 3.919}, {"text": "so um so i'm going to say just compared", "start": 3538.64, "duration": 3.6}, {"text": "to", "start": 3541.359, "duration": 4.801}, {"text": "compared to you know the basic floats", "start": 3542.24, "duration": 5.28}, {"text": "you know floating point operations of", "start": 3546.16, "duration": 3.28}, {"text": "addition multiplication subtraction and", "start": 3547.52, "duration": 3.68}, {"text": "so on there's just a lot more that needs", "start": 3549.44, "duration": 2.96}, {"text": "to be done", "start": 3551.2, "duration": 4.399}, {"text": "um there's a question here is inlining a", "start": 3552.4, "duration": 5.04}, {"text": "big help versus the overhead of function", "start": 3555.599, "duration": 2.401}, {"text": "calls", "start": 3557.44, "duration": 4.0}, {"text": "yes absolutely um so i didn't i didn't", "start": 3558.0, "duration": 5.119}, {"text": "cover that in this talk there is a", "start": 3561.44, "duration": 2.48}, {"text": "technique called", "start": 3563.119, "duration": 3.121}, {"text": "inlining which is where you take the", "start": 3563.92, "duration": 3.84}, {"text": "body of a function", "start": 3566.24, "duration": 3.92}, {"text": "that's being called by another routine", "start": 3567.76, "duration": 4.559}, {"text": "and you just drop it directly into that", "start": 3570.16, "duration": 2.88}, {"text": "routine", "start": 3572.319, "duration": 3.76}, {"text": "yes that can that can save you", "start": 3573.04, "duration": 6.88}, {"text": "um that that can make your code", "start": 3576.079, "duration": 6.961}, {"text": "much much much more efficient and it is", "start": 3579.92, "duration": 4.32}, {"text": "one of the things that", "start": 3583.04, "duration": 4.16}, {"text": "a that a compiler can do but there are", "start": 3584.24, "duration": 5.52}, {"text": "cases when when inlining won't occur", "start": 3587.2, "duration": 6.639}, {"text": "especially if the if the body of the", "start": 3589.76, "duration": 6.16}, {"text": "function being end line is is", "start": 3593.839, "duration": 4.161}, {"text": "complex so i would say if it's a really", "start": 3595.92, "duration": 3.679}, {"text": "critical piece of code i would just go", "start": 3598.0, "duration": 3.76}, {"text": "ahead and do it manually", "start": 3599.599, "duration": 4.48}, {"text": "um have a question have you had any", "start": 3601.76, "duration": 4.48}, {"text": "experience with an optimization with one", "start": 3604.079, "duration": 3.681}, {"text": "compiler", "start": 3606.24, "duration": 3.2}, {"text": "turns out to be worse with another", "start": 3607.76, "duration": 3.359}, {"text": "compiler", "start": 3609.44, "duration": 5.44}, {"text": "um i think you're getting that is there", "start": 3611.119, "duration": 5.2}, {"text": "a", "start": 3614.88, "duration": 4.8}, {"text": "you're getting at the um the difference", "start": 3616.319, "duration": 5.28}, {"text": "in the quality of the code that is that", "start": 3619.68, "duration": 2.879}, {"text": "is generated", "start": 3621.599, "duration": 3.2}, {"text": "but by different compilers yes you're", "start": 3622.559, "duration": 4.641}, {"text": "you're often going to see", "start": 3624.799, "duration": 4.881}, {"text": "see a difference so in fact i didn't", "start": 3627.2, "duration": 5.28}, {"text": "show it in", "start": 3629.68, "duration": 2.8}, {"text": "i didn't show it in my slide deck but on", "start": 3632.72, "duration": 4.96}, {"text": "this force reduction example", "start": 3635.76, "duration": 5.44}, {"text": "i also did this with the intel compiler", "start": 3637.68, "duration": 5.84}, {"text": "very simple piece of code and the intel", "start": 3641.2, "duration": 3.52}, {"text": "code", "start": 3643.52, "duration": 4.559}, {"text": "intel compiled code was about five times", "start": 3644.72, "duration": 6.0}, {"text": "um took about five times longer and", "start": 3648.079, "duration": 4.0}, {"text": "that's something that i'm still", "start": 3650.72, "duration": 3.68}, {"text": "trying to figure out it could be that", "start": 3652.079, "duration": 3.52}, {"text": "the", "start": 3654.4, "duration": 4.32}, {"text": "um that the intel compiler that doesn't", "start": 3655.599, "duration": 5.281}, {"text": "fully understand how to make make", "start": 3658.72, "duration": 3.76}, {"text": "optimal use of cash", "start": 3660.88, "duration": 3.6}, {"text": "in this case when i only had 100 000", "start": 3662.48, "duration": 3.44}, {"text": "particles that's a problem that should", "start": 3664.48, "duration": 2.24}, {"text": "be able to fit", "start": 3665.92, "duration": 5.36}, {"text": "entirely into cash um so yes absolutely", "start": 3666.72, "duration": 7.119}, {"text": "um now we have a question for an mpi", "start": 3671.28, "duration": 4.48}, {"text": "code would running on one process would", "start": 3673.839, "duration": 3.921}, {"text": "be the same as running necessarily", "start": 3675.76, "duration": 5.039}, {"text": "or would there be some mpi overhead um", "start": 3677.76, "duration": 6.72}, {"text": "you know if", "start": 3680.799, "duration": 7.76}, {"text": "it it it all depends um", "start": 3684.48, "duration": 4.079}, {"text": "you know so some sometimes they're in a", "start": 3688.72, "duration": 4.639}, {"text": "lot of codes there there is there is", "start": 3691.2, "duration": 2.48}, {"text": "some", "start": 3693.359, "duration": 3.76}, {"text": "mpi overhead especially at the startup", "start": 3693.68, "duration": 6.399}, {"text": "and the end at the end where say some", "start": 3697.119, "duration": 4.561}, {"text": "calculations are being done on one", "start": 3700.079, "duration": 2.24}, {"text": "process", "start": 3701.68, "duration": 2.72}, {"text": "and then broadcast brought broadcast to", "start": 3702.319, "duration": 3.04}, {"text": "the others", "start": 3704.4, "duration": 4.399}, {"text": "um if you really want to profile a", "start": 3705.359, "duration": 5.76}, {"text": "profile on mpi code there are more", "start": 3708.799, "duration": 3.201}, {"text": "advanced tools", "start": 3711.119, "duration": 3.68}, {"text": "like tau which do both profiling and", "start": 3712.0, "duration": 3.599}, {"text": "tracing", "start": 3714.799, "duration": 4.401}, {"text": "which will which will um show you where", "start": 3715.599, "duration": 5.121}, {"text": "your code is spending time", "start": 3719.2, "duration": 5.68}, {"text": "in in in communications", "start": 3720.72, "duration": 4.16}, {"text": "for what we talked about here if you had", "start": 3725.28, "duration": 3.2}, {"text": "a code where you already", "start": 3727.039, "duration": 4.32}, {"text": "understand where we already understand", "start": 3728.48, "duration": 4.879}, {"text": "the communications pattern and it scales", "start": 3731.359, "duration": 4.081}, {"text": "well you could use say something like", "start": 3733.359, "duration": 3.68}, {"text": "gproff", "start": 3735.44, "duration": 4.72}, {"text": "on that code and you will get a um", "start": 3737.039, "duration": 5.601}, {"text": "profile for for each process and you", "start": 3740.16, "duration": 4.32}, {"text": "could use that to optimize the serial", "start": 3742.64, "duration": 2.32}, {"text": "code", "start": 3744.48, "duration": 2.559}, {"text": "but again running on one processor", "start": 3744.96, "duration": 3.28}, {"text": "versus um", "start": 3747.039, "duration": 3.361}, {"text": "multiple processes it's going to depend", "start": 3748.24, "duration": 3.52}, {"text": "a lot on the", "start": 3750.4, "duration": 4.87}, {"text": "on the application and", "start": 3751.76, "duration": 6.319}, {"text": "[Music]", "start": 3755.27, "duration": 4.809}, {"text": "let's let me find my mouse and there's a", "start": 3758.079, "duration": 4.72}, {"text": "question here", "start": 3760.079, "duration": 2.72}, {"text": "okay so um", "start": 3764.799, "duration": 7.921}, {"text": "yes so there's a question from yogesh", "start": 3769.599, "duration": 5.921}, {"text": "are there any tools to identify the code", "start": 3772.72, "duration": 3.119}, {"text": "with", "start": 3775.52, "duration": 2.72}, {"text": "complex nested loops that may be", "start": 3775.839, "duration": 4.881}, {"text": "paralyzed", "start": 3778.24, "duration": 5.599}, {"text": "oh um", "start": 3780.72, "duration": 3.119}, {"text": "you know i i believe i believe that", "start": 3786.799, "duration": 3.76}, {"text": "there are", "start": 3788.88, "duration": 4.4}, {"text": "um i remember some some of the intel", "start": 3790.559, "duration": 3.681}, {"text": "tools could", "start": 3793.28, "duration": 3.839}, {"text": "could could recognize codes that could", "start": 3794.24, "duration": 5.44}, {"text": "potentially be paralyzed", "start": 3797.119, "duration": 4.881}, {"text": "um and i'm not familiar enough with the", "start": 3799.68, "duration": 5.84}, {"text": "with the amd tools yet", "start": 3802.0, "duration": 3.52}, {"text": "okay a question from chris chris groves", "start": 3805.68, "duration": 4.24}, {"text": "how can i study whether or not the data", "start": 3808.16, "duration": 3.919}, {"text": "my code is working on is held in l1", "start": 3809.92, "duration": 2.96}, {"text": "cache", "start": 3812.079, "duration": 4.161}, {"text": "or a higher level memory um so i", "start": 3812.88, "duration": 5.12}, {"text": "mentioned", "start": 3816.24, "duration": 3.68}, {"text": "earlier in the talk right after i got", "start": 3818.0, "duration": 3.839}, {"text": "done with gproff that there's a tool", "start": 3819.92, "duration": 2.48}, {"text": "called", "start": 3821.839, "duration": 4.0}, {"text": "called developed by amd which will give", "start": 3822.4, "duration": 3.76}, {"text": "you", "start": 3825.839, "duration": 4.0}, {"text": "really really detailed information on", "start": 3826.16, "duration": 6.399}, {"text": "on things like cache misses so so in", "start": 3829.839, "duration": 3.361}, {"text": "that case", "start": 3832.559, "duration": 4.28}, {"text": "you would be able to um to look at that", "start": 3833.2, "duration": 4.8}, {"text": "output", "start": 3836.839, "duration": 4.441}, {"text": "and and figure out if um if if you're", "start": 3838.0, "duration": 5.68}, {"text": "having frequent cash misses", "start": 3841.28, "duration": 5.44}, {"text": "um also", "start": 3843.68, "duration": 5.6}, {"text": "as far as your code fitting into l1", "start": 3846.72, "duration": 3.04}, {"text": "cache", "start": 3849.28, "duration": 2.319}, {"text": "you would have to look at the size of", "start": 3849.76, "duration": 3.2}, {"text": "the l1 cache", "start": 3851.599, "duration": 3.681}, {"text": "and the size of your the size of your", "start": 3852.96, "duration": 4.24}, {"text": "data set", "start": 3855.28, "duration": 3.759}, {"text": "to figure out if it would fit in there", "start": 3857.2, "duration": 3.599}, {"text": "or not and again", "start": 3859.039, "duration": 5.8}, {"text": "i i'll just put it into the chat box", "start": 3860.799, "duration": 6.081}, {"text": "again", "start": 3864.839, "duration": 5.0}, {"text": "there is a", "start": 3866.88, "duration": 2.959}, {"text": "command call called ls cpu that will", "start": 3870.0, "duration": 3.52}, {"text": "give you information", "start": 3872.24, "duration": 6.16}, {"text": "about the about the cache sizes", "start": 3873.52, "duration": 4.88}, {"text": "and let me see if i can answer a few", "start": 3878.96, "duration": 5.839}, {"text": "more questions before we wrap up", "start": 3880.88, "duration": 3.919}, {"text": "okay um does prof i think you mean g", "start": 3890.16, "duration": 5.439}, {"text": "prop work for parallel code", "start": 3893.839, "duration": 4.561}, {"text": "shared or distributed so it works great", "start": 3895.599, "duration": 3.52}, {"text": "for", "start": 3898.4, "duration": 3.36}, {"text": "um for distributed codes you'll get a", "start": 3899.119, "duration": 3.521}, {"text": "profile for", "start": 3901.76, "duration": 3.599}, {"text": "each for for each process for shared", "start": 3902.64, "duration": 3.6}, {"text": "memory codes", "start": 3905.359, "duration": 2.24}, {"text": "it's a little it's a little more", "start": 3906.24, "duration": 5.04}, {"text": "complicated um", "start": 3907.599, "duration": 3.681}, {"text": "and i didn't put in this presentation", "start": 3911.76, "duration": 5.2}, {"text": "but there are there are some some hacks", "start": 3915.359, "duration": 3.521}, {"text": "for using gproff with a", "start": 3916.96, "duration": 5.119}, {"text": "threaded code you know and with that i", "start": 3918.88, "duration": 4.719}, {"text": "think i'm going to have to wrap up", "start": 3922.079, "duration": 2.081}, {"text": "because we're", "start": 3923.599, "duration": 2.96}, {"text": "already six minutes past the hour thank", "start": 3924.16, "duration": 4.24}, {"text": "you everybody for joining me today", "start": 3926.559, "duration": 5.441}, {"text": "and we will get these um get the slides", "start": 3928.4, "duration": 5.679}, {"text": "and the video posted soon", "start": 3932.0, "duration": 6.16}, {"text": "thank you thanks bob", "start": 3934.079, "duration": 6.72}, {"text": "bye everyone", "start": 3938.16, "duration": 2.639}, {"text": "thanks bob thanks everyone for attending", "start": 3941.28, "duration": 9.519}]