[{"text": "um nice to see a a a big turnout today", "start": 0.24, "duration": 3.96}, {"text": "so I'm going to be giving a little bit", "start": 3.159, "duration": 3.321}, {"text": "of an introduction to Performance Tuning", "start": 4.2, "duration": 5.8}, {"text": "and optimization that this is really a", "start": 6.48, "duration": 5.64}, {"text": "um the developer topic but I'll try to", "start": 10.0, "duration": 4.679}, {"text": "keep things pretty high level um I'm", "start": 12.12, "duration": 4.999}, {"text": "happy to take questions as we go along", "start": 14.679, "duration": 4.641}, {"text": "but it's a little hard for me to monitor", "start": 17.119, "duration": 6.361}, {"text": "the chat so at the same time so Cindy if", "start": 19.32, "duration": 7.84}, {"text": "you want to um if you want to interrupt", "start": 23.48, "duration": 5.959}, {"text": "me when when you think it's a good time", "start": 27.16, "duration": 4.68}, {"text": "feel free to chime in and I'll try to", "start": 29.439, "duration": 4.001}, {"text": "answer those questions and of course", "start": 31.84, "duration": 4.08}, {"text": "happy to take questions at the", "start": 33.44, "duration": 5.32}, {"text": "end a presentation", "start": 35.92, "duration": 4.92}, {"text": "mode okay everybody should be seeing", "start": 38.76, "duration": 5.16}, {"text": "that now Cindy um does it look good yes", "start": 40.84, "duration": 6.64}, {"text": "it does okay again that thank you um", "start": 43.92, "duration": 5.639}, {"text": "well welcome good good good good morning", "start": 47.48, "duration": 3.919}, {"text": "good afternoon depending on your time", "start": 49.559, "duration": 4.441}, {"text": "zone U my name is Bob sinkovitz I am the", "start": 51.399, "duration": 5.281}, {"text": "Director of Education and Training here", "start": 54.0, "duration": 5.8}, {"text": "at the San Diego supercomputer Center um", "start": 56.68, "duration": 5.16}, {"text": "but but when I'm not doing training like", "start": 59.8, "duration": 5.6}, {"text": "I am now kind of my Um passion and per", "start": 61.84, "duration": 6.36}, {"text": "passion and hobby is performance tuning", "start": 65.4, "duration": 5.52}, {"text": "and single processor", "start": 68.2, "duration": 4.32}, {"text": "optimization", "start": 70.92, "duration": 5.48}, {"text": "so this is a very very abbreviated", "start": 72.52, "duration": 7.36}, {"text": "version of um a halfday session that I", "start": 76.4, "duration": 6.399}, {"text": "hold at the scsc summer Institute which", "start": 79.88, "duration": 5.48}, {"text": "in turn was an abbreviation abbreviated", "start": 82.799, "duration": 6.601}, {"text": "version of full day um sessions that", "start": 85.36, "duration": 6.079}, {"text": "I've done performance optimization and", "start": 89.4, "duration": 5.359}, {"text": "tuning so if you're interested in the", "start": 91.439, "duration": 5.201}, {"text": "summer Institute content we have a link", "start": 94.759, "duration": 3.761}, {"text": "to it here it has also been pasted into", "start": 96.64, "duration": 4.759}, {"text": "the chat and if you want to see a full", "start": 98.52, "duration": 5.72}, {"text": "version of the presentation that I do at", "start": 101.399, "duration": 4.921}, {"text": "the summer Institute you can click on", "start": 104.24, "duration": 4.32}, {"text": "this link here the the second", "start": 106.32, "duration": 5.96}, {"text": "URL um but I think today we've you know", "start": 108.56, "duration": 5.4}, {"text": "we're just going to go through some of", "start": 112.28, "duration": 3.64}, {"text": "what I consider the important highlights", "start": 113.96, "duration": 4.24}, {"text": "of the of the longer", "start": 115.92, "duration": 4.72}, {"text": "presentation so", "start": 118.2, "duration": 3.959}, {"text": "yeah just going to start off talking a", "start": 120.64, "duration": 2.399}, {"text": "little bit", "start": 122.159, "duration": 4.721}, {"text": "about um you know why we want to write", "start": 123.039, "duration": 6.761}, {"text": "efficient scaler or serial code you know", "start": 126.88, "duration": 4.68}, {"text": "we're we're a supercomputer Center a lot", "start": 129.8, "duration": 5.24}, {"text": "of what we do is parallel Computing um", "start": 131.56, "duration": 6.12}, {"text": "but under the hood every efficient", "start": 135.04, "duration": 5.199}, {"text": "parallel program is based on efficient", "start": 137.68, "duration": 5.279}, {"text": "scaler implementation or the underlying", "start": 140.239, "duration": 6.72}, {"text": "um on underlying algorithms so you know", "start": 142.959, "duration": 7.041}, {"text": "just a few um you know practical reasons", "start": 146.959, "duration": 5.201}, {"text": "why we're trying to ready fish in code", "start": 150.0, "duration": 4.28}, {"text": "so first of all optimizing your code is", "start": 152.16, "duration": 4.4}, {"text": "going to reduce your time to solution", "start": 154.28, "duration": 4.319}, {"text": "and what we really like to see you", "start": 156.56, "duration": 3.36}, {"text": "especially if there are times when we", "start": 158.599, "duration": 4.64}, {"text": "get a big speed up is that a challenging", "start": 159.92, "duration": 5.88}, {"text": "Pro problem now becomes doable and", "start": 163.239, "duration": 4.561}, {"text": "routine calculations can be done more", "start": 165.8, "duration": 5.96}, {"text": "quickly so as many of you are domain", "start": 167.8, "duration": 5.519}, {"text": "scientists and what this means is that", "start": 171.76, "duration": 4.08}, {"text": "you'll be able to do more science in the", "start": 173.319, "duration": 4.161}, {"text": "same amount of time you can shorten the", "start": 175.84, "duration": 4.88}, {"text": "cycle between job submission and", "start": 177.48, "duration": 6.399}, {"text": "results um next computer time especially", "start": 180.72, "duration": 5.64}, {"text": "in high-end resources is limited so", "start": 183.879, "duration": 4.241}, {"text": "we're not talking about an application", "start": 186.36, "duration": 4.0}, {"text": "that you can um you know that that takes", "start": 188.12, "duration": 4.32}, {"text": "a few seconds to run where turnaround", "start": 190.36, "duration": 3.879}, {"text": "time is not really important but we're", "start": 192.44, "duration": 5.359}, {"text": "using lots and lots of um CPU or", "start": 194.239, "duration": 6.161}, {"text": "potentially GPU time so and I forgot to", "start": 197.799, "duration": 5.481}, {"text": "update this if you're running on now", "start": 200.4, "duration": 4.96}, {"text": "access allocated resources such as", "start": 203.28, "duration": 4.239}, {"text": "expans you'll need to compete with other", "start": 205.36, "duration": 4.079}, {"text": "users and if you're running on the cloud", "start": 207.519, "duration": 3.961}, {"text": "you're going to need to pay so either", "start": 209.439, "duration": 4.88}, {"text": "way you want to try to minimize the um", "start": 211.48, "duration": 5.319}, {"text": "amount of time a particular calculation", "start": 214.319, "duration": 5.961}, {"text": "takes and then finally Computing uses a", "start": 216.799, "duration": 6.041}, {"text": "lot of energy and this is probably a", "start": 220.28, "duration": 6.28}, {"text": "little bit out of date given that um", "start": 222.84, "duration": 8.319}, {"text": "Computing is is is really ramping up um", "start": 226.56, "duration": 7.64}, {"text": "and some some other um areas of energy", "start": 231.159, "duration": 5.16}, {"text": "usage say like lighting now that we've", "start": 234.2, "duration": 4.48}, {"text": "gone mostly to LEDs has has been going", "start": 236.319, "duration": 4.92}, {"text": "down so I'm going to say that this 5% of", "start": 238.68, "duration": 6.199}, {"text": "US Energy com um consumption is really a", "start": 241.239, "duration": 6.28}, {"text": "lowball", "start": 244.879, "duration": 2.64}, {"text": "estimate so already alluded to this and", "start": 247.68, "duration": 6.0}, {"text": "that is you know won't going parallel", "start": 251.519, "duration": 4.84}, {"text": "save me um and there's a there there's a", "start": 253.68, "duration": 5.16}, {"text": "few few things to keep in mind here so", "start": 256.359, "duration": 5.16}, {"text": "first of all most parallel applications", "start": 258.84, "duration": 5.0}, {"text": "have have limited scalability um I", "start": 261.519, "duration": 3.841}, {"text": "recognize a few of you a few of the", "start": 263.84, "duration": 3.24}, {"text": "names on the call I know that some of", "start": 265.36, "duration": 4.6}, {"text": "you do highly scalable Computing but a", "start": 267.08, "duration": 5.08}, {"text": "lot of applications really don't scale", "start": 269.96, "duration": 4.64}, {"text": "that far if you have an account on", "start": 272.16, "duration": 4.68}, {"text": "access and if you look at what's in the", "start": 274.6, "duration": 4.92}, {"text": "queue using the SQ command you're going", "start": 276.84, "duration": 5.079}, {"text": "to see that there are lots and lots of", "start": 279.52, "duration": 4.6}, {"text": "applications that just run within a", "start": 281.919, "duration": 5.681}, {"text": "single node or um that even use Ju Just", "start": 284.12, "duration": 5.919}, {"text": "a portion of a node you know running in", "start": 287.6, "duration": 4.76}, {"text": "a shared partition so a lot of", "start": 290.039, "duration": 4.0}, {"text": "applications you're only going to be", "start": 292.36, "duration": 5.44}, {"text": "able to scale so far and then also even", "start": 294.039, "duration": 6.201}, {"text": "if your application had perfect linear", "start": 297.8, "duration": 4.76}, {"text": "scal scalability there's always going to", "start": 300.24, "duration": 3.92}, {"text": "be something more challenging that you", "start": 302.56, "duration": 4.04}, {"text": "want to do and we want to go go go to", "start": 304.16, "duration": 5.08}, {"text": "higher resolutions um finer grids", "start": 306.6, "duration": 5.52}, {"text": "shorter time steps we want to simulate", "start": 309.24, "duration": 5.399}, {"text": "larger systems say with more atoms", "start": 312.12, "duration": 5.2}, {"text": "molecules particles we want to add in", "start": 314.639, "duration": 4.84}, {"text": "more accurate physics we want to do", "start": 317.32, "duration": 4.599}, {"text": "longer simulations or we might want to", "start": 319.479, "duration": 4.481}, {"text": "do more replicates bigger and sybols", "start": 321.919, "duration": 4.0}, {"text": "better statistics so there's always", "start": 323.96, "duration": 3.56}, {"text": "going to be reasons that we want our", "start": 325.919, "duration": 4.72}, {"text": "code to be um to be efficient and of", "start": 327.52, "duration": 5.399}, {"text": "course availability of resources and", "start": 330.639, "duration": 6.921}, {"text": "energy usage are still important", "start": 332.919, "duration": 4.641}, {"text": "considerations so I've been looking I've", "start": 338.0, "duration": 5.919}, {"text": "been trying to find a um a more recent", "start": 340.12, "duration": 5.88}, {"text": "report that this is that this is a", "start": 343.919, "duration": 3.801}, {"text": "little bit out of date so you could take", "start": 346.0, "duration": 4.52}, {"text": "these numbers and just scale them up but", "start": 347.72, "duration": 5.96}, {"text": "you know in terms of energy usage in", "start": 350.52, "duration": 6.0}, {"text": "2013 us data centers consumed an", "start": 353.68, "duration": 6.48}, {"text": "estimated 91 billion kilowatt hours so", "start": 356.52, "duration": 7.32}, {"text": "this is a um this is an enormous amount", "start": 360.16, "duration": 6.4}, {"text": "amount of energy um the projection this", "start": 363.84, "duration": 5.639}, {"text": "was projected increase to 140 billion", "start": 366.56, "duration": 5.079}, {"text": "kilowatt hours by by", "start": 369.479, "duration": 5.761}, {"text": "2020 um so you know we're Computing has", "start": 371.639, "duration": 5.96}, {"text": "a has a big environmental impact and", "start": 375.24, "duration": 5.32}, {"text": "when we do our calculations we'd like to", "start": 377.599, "duration": 8.281}, {"text": "um minimize the um minimize the energy", "start": 380.56, "duration": 8.0}, {"text": "footprint okay so a few guidelines for", "start": 385.88, "duration": 5.8}, {"text": "for optimizing software is first make", "start": 388.56, "duration": 5.079}, {"text": "sure that you don't break your code I", "start": 391.68, "duration": 5.16}, {"text": "know this sounds very obvious um but i'", "start": 393.639, "duration": 4.881}, {"text": "I've SE I've seing this done already", "start": 396.84, "duration": 5.12}, {"text": "I've done it myself um where where you", "start": 398.52, "duration": 7.84}, {"text": "make a make an algorithmic change you um", "start": 401.96, "duration": 7.32}, {"text": "Implement a clever optimization and the", "start": 406.36, "duration": 4.6}, {"text": "code runs a lot faster but now you're", "start": 409.28, "duration": 3.28}, {"text": "getting the wrong results so we want to", "start": 410.96, "duration": 3.16}, {"text": "make sure that we're not getting the", "start": 412.56, "duration": 4.8}, {"text": "wrong results quickly um second of all", "start": 414.12, "duration": 5.479}, {"text": "before you dive in profile your your", "start": 417.36, "duration": 3.959}, {"text": "code so that you know where to focus", "start": 419.599, "duration": 6.04}, {"text": "your effort so I was um did just in", "start": 421.319, "duration": 7.28}, {"text": "another meeting um before before this", "start": 425.639, "duration": 5.56}, {"text": "webinar with some the developers", "start": 428.599, "duration": 4.921}, {"text": "molecular Dynamics software and their", "start": 431.199, "duration": 5.081}, {"text": "code bases are hundreds of thousands of", "start": 433.52, "duration": 5.0}, {"text": "lines so if you were trying to trying to", "start": 436.28, "duration": 3.919}, {"text": "optimize or turn that code you couldn't", "start": 438.52, "duration": 4.0}, {"text": "just jump in start reading from top to", "start": 440.199, "duration": 4.361}, {"text": "bottom so you really need to do", "start": 442.52, "duration": 4.959}, {"text": "profiling um you don't want to obate", "start": 444.56, "duration": 5.479}, {"text": "your code unless you have a really", "start": 447.479, "duration": 4.521}, {"text": "really compelling reason and by obious", "start": 450.039, "duration": 4.121}, {"text": "skate I mean writing in a such a way", "start": 452.0, "duration": 4.4}, {"text": "that the operations that you're doing", "start": 454.16, "duration": 5.0}, {"text": "are no longer obvious um it would be", "start": 456.4, "duration": 4.56}, {"text": "hard for somebody else to", "start": 459.16, "duration": 5.479}, {"text": "interpret um you know except maybe for", "start": 460.96, "duration": 5.84}, {"text": "you know you might want to do this in", "start": 464.639, "duration": 4.12}, {"text": "like the key kernel and very very", "start": 466.8, "duration": 4.679}, {"text": "heavily used applications but if you do", "start": 468.759, "duration": 5.44}, {"text": "make sure that you document that um do", "start": 471.479, "duration": 4.28}, {"text": "document it", "start": 474.199, "duration": 4.041}, {"text": "well um one of the easiest things you", "start": 475.759, "duration": 5.0}, {"text": "can do to to write fast software is to", "start": 478.24, "duration": 4.799}, {"text": "use the optimized libraries that exist", "start": 480.759, "duration": 6.081}, {"text": "whenever possible um unless you say", "start": 483.039, "duration": 6.44}, {"text": "develop um linear algebra solvers or", "start": 486.84, "duration": 5.639}, {"text": "igen value solvers professionally that", "start": 489.479, "duration": 4.641}, {"text": "that is that that is your career that's", "start": 492.479, "duration": 4.521}, {"text": "what you do you probably want to use a", "start": 494.12, "duration": 6.799}, {"text": "library that somebody else wrote um you", "start": 497.0, "duration": 6.919}, {"text": "know this is I'm gonna say this is", "start": 500.919, "duration": 4.4}, {"text": "probably the easiest thing that you", "start": 503.919, "duration": 4.12}, {"text": "could do to to get fast code and then", "start": 505.319, "duration": 4.44}, {"text": "also you need to understand the", "start": 508.039, "duration": 3.44}, {"text": "capabilities and limitations of your", "start": 509.759, "duration": 3.441}, {"text": "compiler and I'm going to give a nice", "start": 511.479, "duration": 3.12}, {"text": "example of that a little bit later in", "start": 513.2, "duration": 2.519}, {"text": "this", "start": 514.599, "duration": 3.68}, {"text": "talk and then finally you before we get", "start": 515.719, "duration": 4.24}, {"text": "into some of the details how much effort", "start": 518.279, "duration": 4.401}, {"text": "should you put into optimizing your code", "start": 519.959, "duration": 4.121}, {"text": "um the amount of time and effort that", "start": 522.68, "duration": 3.76}, {"text": "you spend is really going to depend on a", "start": 524.08, "duration": 4.52}, {"text": "number of factors first of all is the", "start": 526.44, "duration": 5.28}, {"text": "code heavily or widely used um if this", "start": 528.6, "duration": 6.28}, {"text": "is something if it's a community code", "start": 531.72, "duration": 6.32}, {"text": "where it it it counts for for Millions", "start": 534.88, "duration": 5.079}, {"text": "tens Millions Maybe hundreds of millions", "start": 538.04, "duration": 5.039}, {"text": "of core hours or or GPU hours per per", "start": 539.959, "duration": 5.201}, {"text": "year yeah make sure that you could do", "start": 543.079, "duration": 4.561}, {"text": "everything that you can to improve the", "start": 545.16, "duration": 4.679}, {"text": "performance you know in the session that", "start": 547.64, "duration": 4.439}, {"text": "I was in earlier you know was a lot of", "start": 549.839, "duration": 4.281}, {"text": "discussion again for some very very", "start": 552.079, "duration": 4.681}, {"text": "heavily used codes of um how how they", "start": 554.12, "duration": 5.08}, {"text": "could squeeze out 10% more performance", "start": 556.76, "duration": 5.4}, {"text": "or another way to to avoid taking", "start": 559.2, "duration": 4.92}, {"text": "performance hits as they move from move", "start": 562.16, "duration": 4.48}, {"text": "from one architecture to another um does", "start": 564.12, "duration": 4.68}, {"text": "the code consume a significant amount of", "start": 566.64, "duration": 5.0}, {"text": "computer time is time to solution", "start": 568.8, "duration": 5.159}, {"text": "important so does it does it really", "start": 571.64, "duration": 4.4}, {"text": "change your research if you can get the", "start": 573.959, "duration": 5.281}, {"text": "research results more quickly um is it", "start": 576.04, "duration": 5.12}, {"text": "going to help you solve new problems", "start": 579.24, "duration": 4.039}, {"text": "that you couldn't solve before so for", "start": 581.16, "duration": 4.76}, {"text": "example it's just too consign too time", "start": 583.279, "duration": 5.361}, {"text": "consuming to do the um to do the", "start": 585.92, "duration": 4.599}, {"text": "research you really want to", "start": 588.64, "duration": 4.439}, {"text": "do um after you've been working on", "start": 590.519, "duration": 4.241}, {"text": "optimizing your code you know have you", "start": 593.079, "duration": 3.241}, {"text": "reached the point where most of the", "start": 594.76, "duration": 4.4}, {"text": "Computing occurs outside in routines", "start": 596.32, "duration": 5.04}, {"text": "outside of your control say in a linear", "start": 599.16, "duration": 4.799}, {"text": "algebra or igen value solver if so", "start": 601.36, "duration": 4.96}, {"text": "you're pretty much done and then finally", "start": 603.959, "duration": 4.841}, {"text": "you need to balance um especially if", "start": 606.32, "duration": 4.28}, {"text": "you're a domain", "start": 608.8, "duration": 4.719}, {"text": "scientist is you know how much effort", "start": 610.6, "duration": 4.679}, {"text": "should you put into your research for", "start": 613.519, "duration": 4.0}, {"text": "versus optimizing the code so so over", "start": 615.279, "duration": 4.0}, {"text": "the years since I'm employed here at the", "start": 617.519, "duration": 3.601}, {"text": "San Diego supercomputer Center and on", "start": 619.279, "duration": 4.201}, {"text": "some of my projects I was actually paid", "start": 621.12, "duration": 3.839}, {"text": "to do performance tuning and", "start": 623.48, "duration": 3.479}, {"text": "optimization I could dive in a little", "start": 624.959, "duration": 4.161}, {"text": "bit deeper um if you're a graduate", "start": 626.959, "duration": 5.081}, {"text": "student and you want to um you want to", "start": 629.12, "duration": 4.12}, {"text": "finish up you want to publish your", "start": 632.04, "duration": 3.52}, {"text": "results you want to move on um to to", "start": 633.24, "duration": 4.399}, {"text": "post stock or real job you'll probably", "start": 635.56, "duration": 3.719}, {"text": "want to spend a little bit more time on", "start": 637.639, "duration": 5.32}, {"text": "the research so again optimize your code", "start": 639.279, "duration": 5.24}, {"text": "if you think it's going to have if it's", "start": 642.959, "duration": 2.88}, {"text": "going to have an impact on your", "start": 644.519, "duration": 3.201}, {"text": "productivity or if the code is very", "start": 645.839, "duration": 3.841}, {"text": "widely", "start": 647.72, "duration": 5.0}, {"text": "used all right so I mentioned profiling", "start": 649.68, "duration": 6.04}, {"text": "there are a lot of great tools out there", "start": 652.72, "duration": 5.64}, {"text": "um there there's Intel vtune there's", "start": 655.72, "duration": 7.84}, {"text": "amd's new Prof um on gpus there's um", "start": 658.36, "duration": 8.08}, {"text": "there there's a tool call called", "start": 663.56, "duration": 4.839}, {"text": "Insight these are these are all", "start": 666.44, "duration": 3.88}, {"text": "fantastic and if you really get into", "start": 668.399, "duration": 4.24}, {"text": "performance T and optimization I do", "start": 670.32, "duration": 5.16}, {"text": "suggest that you look at these um but a", "start": 672.639, "duration": 6.161}, {"text": "great place to start with very very very", "start": 675.48, "duration": 6.12}, {"text": "little overhead is a tool called", "start": 678.8, "duration": 6.44}, {"text": "GPR now this amazes me GPR goes all the", "start": 681.6, "duration": 4.919}, {"text": "way back to", "start": 685.24, "duration": 4.68}, {"text": "1982 so in technology terms this is", "start": 686.519, "duration": 7.56}, {"text": "ancient this is a really really old tool", "start": 689.92, "duration": 6.359}, {"text": "but I'm going to say when you're", "start": 694.079, "duration": 3.88}, {"text": "profiling your code where you're trying", "start": 696.279, "duration": 4.081}, {"text": "to figure out where to focus your effort", "start": 697.959, "duration": 4.721}, {"text": "this is a great place to begin so first", "start": 700.36, "duration": 5.12}, {"text": "of all there's Universal support by all", "start": 702.68, "duration": 6.24}, {"text": "major C C++ and fortrend", "start": 705.48, "duration": 6.56}, {"text": "compilers uh to dat I have never", "start": 708.92, "duration": 6.12}, {"text": "encountered a c or for Trend compiler", "start": 712.04, "duration": 5.68}, {"text": "does that does not support", "start": 715.04, "duration": 5.919}, {"text": "GPR um it's easy to use all you have to", "start": 717.72, "duration": 6.64}, {"text": "do is compile with the- PG flag run your", "start": 720.959, "duration": 5.281}, {"text": "code you're going to it's going to", "start": 724.36, "duration": 4.44}, {"text": "produce a gm. out file and then you just", "start": 726.24, "duration": 6.839}, {"text": "run gprof a.out gm. out and it", "start": 728.8, "duration": 6.92}, {"text": "introduces virtually no overhead now", "start": 733.079, "duration": 4.56}, {"text": "every once in a while if you have a code", "start": 735.72, "duration": 5.2}, {"text": "where you're making a lot of calls to um", "start": 737.639, "duration": 6.2}, {"text": "f functions of subar teams that are not", "start": 740.92, "duration": 5.2}, {"text": "very timec consuming it can skew things", "start": 743.839, "duration": 3.56}, {"text": "a little bit it could add a little bit", "start": 746.12, "duration": 3.24}, {"text": "of overhead but for the most part it's", "start": 747.399, "duration": 5.12}, {"text": "pretty minimal now note that GPR is not", "start": 749.36, "duration": 6.039}, {"text": "what we call a tracing tool so it's not", "start": 752.519, "duration": 4.44}, {"text": "going to identify bottlenecks and", "start": 755.399, "duration": 4.361}, {"text": "parallel codes still it's a great choice", "start": 756.959, "duration": 4.201}, {"text": "for understanding behavior of the", "start": 759.76, "duration": 4.6}, {"text": "underlying serial code and you can use", "start": 761.16, "duration": 6.239}, {"text": "GPR with a um code that's been paralyzed", "start": 764.36, "duration": 5.56}, {"text": "using MPI you're just going to get a", "start": 767.399, "duration": 7.081}, {"text": "separate gmon do out file for for each", "start": 769.92, "duration": 4.56}, {"text": "process I'm just going to go through", "start": 774.56, "duration": 4.6}, {"text": "through a few more slides on on GPR and", "start": 776.56, "duration": 4.44}, {"text": "then I'll um see if we have any", "start": 779.16, "duration": 5.84}, {"text": "questions so the output from gpro is", "start": 781.0, "duration": 7.12}, {"text": "really really easy to understand um", "start": 785.0, "duration": 4.88}, {"text": "there there are two sections the top", "start": 788.12, "duration": 4.6}, {"text": "part is what we call the flat profile", "start": 789.88, "duration": 5.0}, {"text": "and this is just a listing from top to", "start": 792.72, "duration": 4.679}, {"text": "bottom of functions and sub routines", "start": 794.88, "duration": 4.44}, {"text": "ordered by their relative", "start": 797.399, "duration": 4.88}, {"text": "usage in a lot of your applications", "start": 799.32, "duration": 4.84}, {"text": "you're going to find that it's a small", "start": 802.279, "duration": 3.721}, {"text": "number of routines that account for the", "start": 804.16, "duration": 4.919}, {"text": "majority of of the runtime so this is", "start": 806.0, "duration": 4.839}, {"text": "this is a great way to identify those", "start": 809.079, "duration": 4.241}, {"text": "hot spots in your code what I'm going to", "start": 810.839, "duration": 3.8}, {"text": "be showing over the next couple of", "start": 813.32, "duration": 4.56}, {"text": "slides is a um is is a real life example", "start": 814.639, "duration": 6.521}, {"text": "from an area called flow citometry now", "start": 817.88, "duration": 5.56}, {"text": "I've also worked on codes", "start": 821.16, "duration": 5.88}, {"text": "where when i r when I ran GPR I looked", "start": 823.44, "duration": 6.8}, {"text": "at this flat profile and it was just a", "start": 827.04, "duration": 5.68}, {"text": "single function that accounted for more", "start": 830.24, "duration": 4.839}, {"text": "than 98% of the runtime and it was a", "start": 832.72, "duration": 5.039}, {"text": "very manageable function it was a 100 to", "start": 835.079, "duration": 5.601}, {"text": "a few hundred lines code so that that's", "start": 837.759, "duration": 6.041}, {"text": "really an ideal situation on the Other", "start": 840.68, "duration": 5.279}, {"text": "Extreme there was a code that I once", "start": 843.8, "duration": 5.599}, {"text": "profiled where no single routine used", "start": 845.959, "duration": 5.521}, {"text": "more than about one and a half to 2% of", "start": 849.399, "duration": 3.761}, {"text": "the time and that was kind of a", "start": 851.48, "duration": 4.719}, {"text": "nightmare to um a nightmare to optimize", "start": 853.16, "duration": 5.08}, {"text": "because he needed to focus in so many", "start": 856.199, "duration": 4.521}, {"text": "different places so getting back to this", "start": 858.24, "duration": 5.2}, {"text": "example again from area called flow", "start": 860.72, "duration": 3.799}, {"text": "citometry", "start": 863.44, "duration": 4.519}, {"text": "I ran this on the on the application and", "start": 864.519, "duration": 6.201}, {"text": "I found off the top that there were a", "start": 867.959, "duration": 4.68}, {"text": "few routines in fact three three", "start": 870.72, "duration": 4.08}, {"text": "routines that accounted for the majority", "start": 872.639, "duration": 3.88}, {"text": "of the usage there was something called", "start": 874.8, "duration": 4.88}, {"text": "get number pack data um there was main", "start": 876.519, "duration": 6.401}, {"text": "the main um the main function and then", "start": 879.68, "duration": 5.48}, {"text": "finally quick sort double so you don't", "start": 882.92, "duration": 4.2}, {"text": "have to worry about what these do but", "start": 885.16, "duration": 5.72}, {"text": "for now we're just going to focus on um", "start": 887.12, "duration": 6.24}, {"text": "on these top three let me just check the", "start": 890.88, "duration": 6.079}, {"text": "chat real quick B we do have a question", "start": 893.36, "duration": 6.56}, {"text": "yes um do you know know what fund do you", "start": 896.959, "duration": 4.56}, {"text": "know of funding requirements that", "start": 899.92, "duration": 4.52}, {"text": "incentivize optimizing software code or", "start": 901.519, "duration": 4.721}, {"text": "in What scenario have you seen", "start": 904.44, "duration": 5.8}, {"text": "supervisor support this kind of work oh", "start": 906.24, "duration": 6.12}, {"text": "okay um that that's that's a great", "start": 910.24, "duration": 4.0}, {"text": "question", "start": 912.36, "duration": 5.279}, {"text": "um as far as i' I've never seen for", "start": 914.24, "duration": 6.44}, {"text": "example an NSF solicitation that that", "start": 917.639, "duration": 5.281}, {"text": "required that that that you optimize", "start": 920.68, "duration": 6.92}, {"text": "your code and in um you know in in", "start": 922.92, "duration": 6.76}, {"text": "science", "start": 927.6, "duration": 6.039}, {"text": "oriented um proposals it's probably not", "start": 929.68, "duration": 6.159}, {"text": "not going to be a big factor but you", "start": 933.639, "duration": 4.32}, {"text": "could you could put that into your", "start": 935.839, "duration": 4.161}, {"text": "proposal as one component if the", "start": 937.959, "duration": 3.721}, {"text": "optimization of the code is really going", "start": 940.0, "duration": 4.88}, {"text": "to have a big impact on the Science Now", "start": 941.68, "duration": 5.24}, {"text": "scenarios where you've seen supervisors", "start": 944.88, "duration": 4.399}, {"text": "support this kind of work yes I I have", "start": 946.92, "duration": 6.359}, {"text": "seen this so um you know in one of my", "start": 949.279, "duration": 5.92}, {"text": "roles here at at the supercomputer", "start": 953.279, "duration": 6.321}, {"text": "Center I was actually funded off of the", "start": 955.199, "duration": 7.161}, {"text": "um few Generations ago the Gordon", "start": 959.6, "duration": 4.88}, {"text": "supercomputer I was actually funded to", "start": 962.36, "duration": 4.599}, {"text": "work with users and and to turn their", "start": 964.48, "duration": 7.24}, {"text": "applications we also had a", "start": 966.959, "duration": 7.721}, {"text": "um a big component of of the of the", "start": 971.72, "duration": 5.239}, {"text": "exceed project which landed which ended", "start": 974.68, "duration": 4.44}, {"text": "last year called extended collaborative", "start": 976.959, "duration": 6.0}, {"text": "Support Services where we were um where", "start": 979.12, "duration": 6.399}, {"text": "we actually um had a significant amount", "start": 982.959, "duration": 4.601}, {"text": "of funding to work with users for", "start": 985.519, "duration": 5.161}, {"text": "porting optimization T in paralyzation", "start": 987.56, "duration": 5.399}, {"text": "so great great question and for from", "start": 990.68, "duration": 5.92}, {"text": "Kyle well access CI match plus Premier", "start": 992.959, "duration": 4.641}, {"text": "offer", "start": 996.6, "duration": 2.719}, {"text": "funding", "start": 997.6, "duration": 4.64}, {"text": "um that that that's complicated I would", "start": 999.319, "duration": 6.241}, {"text": "defer um I would defer to the to to the", "start": 1002.24, "duration": 5.519}, {"text": "access people about that there's kind of", "start": 1005.56, "duration": 4.8}, {"text": "a more complex model where they don't", "start": 1007.759, "duration": 6.721}, {"text": "have direct funding from", "start": 1010.36, "duration": 7.0}, {"text": "um from the NSF award to do this kind of", "start": 1014.48, "duration": 5.599}, {"text": "work but they are working on some some", "start": 1017.36, "duration": 4.599}, {"text": "mechanisms where they", "start": 1020.079, "duration": 6.521}, {"text": "could um pair up researchers who have", "start": 1021.959, "duration": 8.6}, {"text": "funding to to improve their code with um", "start": 1026.6, "duration": 5.959}, {"text": "with technologists and computational", "start": 1030.559, "duration": 5.24}, {"text": "scientists who who have that expertise", "start": 1032.559, "duration": 6.76}, {"text": "so yeah we we could follow up um offline", "start": 1035.799, "duration": 6.201}, {"text": "if you if you want more details on", "start": 1039.319, "duration": 5.441}, {"text": "that okay and finally", "start": 1042.0, "duration": 5.24}, {"text": "Igor yes yes", "start": 1044.76, "duration": 4.32}, {"text": "AB yeah", "start": 1047.24, "duration": 4.96}, {"text": "good great great point eigor and um you", "start": 1049.08, "duration": 4.959}, {"text": "know I know that you you you've done a", "start": 1052.2, "duration": 4.32}, {"text": "lot of optimization on some on some", "start": 1054.039, "duration": 4.681}, {"text": "highly scalable codes I agree if you can", "start": 1056.52, "duration": 4.44}, {"text": "speed up The Code by 10x or more it it", "start": 1058.72, "duration": 6.16}, {"text": "is a game Cher um yeah surprised if a", "start": 1060.96, "duration": 6.0}, {"text": "supervisor would say no but on the other", "start": 1064.88, "duration": 5.36}, {"text": "hand you know supervisor May um only be", "start": 1066.96, "duration": 5.76}, {"text": "willing to commit a certain amount of", "start": 1070.24, "duration": 5.559}, {"text": "time again it it depends it depends on", "start": 1072.72, "duration": 5.199}, {"text": "your role if you are a professional", "start": 1075.799, "duration": 5.281}, {"text": "software developer on that project you", "start": 1077.919, "duration": 4.201}, {"text": "you'll probably have a little more", "start": 1081.08, "duration": 3.839}, {"text": "leeway as opposed if you're a graduate", "start": 1082.12, "duration": 5.64}, {"text": "student working working on a thesis but", "start": 1084.919, "duration": 4.721}, {"text": "yes you're right it's hard to tell ahead", "start": 1087.76, "duration": 3.0}, {"text": "of time if you're going to be able to", "start": 1089.64, "duration": 2.44}, {"text": "get that kind of speed", "start": 1090.76, "duration": 3.48}, {"text": "up all right with that so I'm going to", "start": 1092.08, "duration": 4.28}, {"text": "move on um getting back to", "start": 1094.24, "duration": 7.04}, {"text": "GPR so there's also the GPR call graph", "start": 1096.36, "duration": 7.12}, {"text": "and this gives you additional levels of", "start": 1101.28, "duration": 4.56}, {"text": "detail such as the exclusive time spent", "start": 1103.48, "duration": 5.199}, {"text": "in a function and the time spent in the", "start": 1105.84, "duration": 5.04}, {"text": "children the functions that are called", "start": 1108.679, "duration": 3.681}, {"text": "and statistics and calls from the", "start": 1110.88, "duration": 4.6}, {"text": "parents so here we're going to um look", "start": 1112.36, "duration": 5.679}, {"text": "start at the top we have function main", "start": 1115.48, "duration": 5.96}, {"text": "so main itself plus all of the routines", "start": 1118.039, "duration": 7.321}, {"text": "that it calls account for 97% of the 97%", "start": 1121.44, "duration": 6.08}, {"text": "of the time you'll notice this isn't", "start": 1125.36, "duration": 5.48}, {"text": "quite 100% there will be some um some", "start": 1127.52, "duration": 6.0}, {"text": "rounding errors in GPR but you could see", "start": 1130.84, "duration": 5.0}, {"text": "that it calls um that it calls get", "start": 1133.52, "duration": 5.72}, {"text": "number pack data is hump and so on", "start": 1135.84, "duration": 7.199}, {"text": "um and get number pack data you'll see", "start": 1139.24, "duration": 7.72}, {"text": "accounts for 574 seconds of the of the", "start": 1143.039, "duration": 6.161}, {"text": "time whereas main what we call the", "start": 1146.96, "duration": 4.839}, {"text": "exclusive time spent in main not the", "start": 1149.2, "duration": 5.08}, {"text": "function that calls was about 112", "start": 1151.799, "duration": 4.841}, {"text": "seconds we go down to get number pack", "start": 1154.28, "duration": 4.879}, {"text": "data we see that it's called by main we", "start": 1156.64, "duration": 4.2}, {"text": "go down to is hump we see that it's", "start": 1159.159, "duration": 4.161}, {"text": "called by Main and that it calls um the", "start": 1160.84, "duration": 5.839}, {"text": "three other functions so I don't find", "start": 1163.32, "duration": 5.239}, {"text": "this I don't find that it have to go the", "start": 1166.679, "duration": 4.041}, {"text": "call graph quite as often but if you're", "start": 1168.559, "duration": 4.641}, {"text": "doing what we call interprocedural", "start": 1170.72, "duration": 6.12}, {"text": "optimization sometimes this is", "start": 1173.2, "duration": 3.64}, {"text": "helpful so value of reprofiling your", "start": 1176.919, "duration": 5.681}, {"text": "code be sure to rofile your code after", "start": 1179.72, "duration": 4.8}, {"text": "you've done a round of optimization", "start": 1182.6, "duration": 4.72}, {"text": "since new hotspots May emerge so when I", "start": 1184.52, "duration": 5.68}, {"text": "started working on this code I got into", "start": 1187.32, "duration": 5.479}, {"text": "I started working on get number pack", "start": 1190.2, "duration": 5.52}, {"text": "data and I found that I was able to", "start": 1192.799, "duration": 5.601}, {"text": "Speed it speed it up so much that after", "start": 1195.72, "duration": 5.72}, {"text": "was done it now only accounted for 26%", "start": 1198.4, "duration": 5.92}, {"text": "of the time but now function main", "start": 1201.44, "duration": 6.0}, {"text": "accounts for 41% so it's not that main", "start": 1204.32, "duration": 5.68}, {"text": "got any slower it's just that get number", "start": 1207.44, "duration": 5.719}, {"text": "pack data got so much faster that main", "start": 1210.0, "duration": 5.32}, {"text": "now proportionally accounts for a larger", "start": 1213.159, "duration": 5.52}, {"text": "amount of time so definitely you want to", "start": 1215.32, "duration": 5.359}, {"text": "profile if you're going to optimize your", "start": 1218.679, "duration": 5.041}, {"text": "code you want to go back and and", "start": 1220.679, "duration": 5.441}, {"text": "rofile and then finally it's been 40", "start": 1223.72, "duration": 5.079}, {"text": "years since gprof is there anything new", "start": 1226.12, "duration": 5.28}, {"text": "so I mentioned the amdu tool which we", "start": 1228.799, "duration": 6.161}, {"text": "have installed on um install and expans", "start": 1231.4, "duration": 5.56}, {"text": "gives you a lot of lowlevel information", "start": 1234.96, "duration": 4.76}, {"text": "on things like cash misses Branch Miss", "start": 1236.96, "duration": 4.88}, {"text": "predictions and so on um but this is", "start": 1239.72, "duration": 6.199}, {"text": "going to be covered in a in another", "start": 1241.84, "duration": 4.079}, {"text": "session and with that I'm G to see", "start": 1246.559, "duration": 4.881}, {"text": "there's a couple more questions in the", "start": 1249.159, "duration": 7.041}, {"text": "chat um oh great great great question um", "start": 1251.44, "duration": 10.119}, {"text": "Joe MPR or U Prof it's actually both um", "start": 1256.2, "duration": 6.44}, {"text": "if", "start": 1261.559, "duration": 5.0}, {"text": "we um if if you do a Google sech Google", "start": 1262.64, "duration": 8.44}, {"text": "search you can search on both U Prof and", "start": 1266.559, "duration": 8.6}, {"text": "MPR um they'll both work except you", "start": 1271.08, "duration": 7.839}, {"text": "might get some different materials and", "start": 1275.159, "duration": 5.64}, {"text": "um AMD", "start": 1278.919, "duration": 5.321}, {"text": "actually you uses both interchangeably", "start": 1280.799, "duration": 5.161}, {"text": "in their", "start": 1284.24, "duration": 4.08}, {"text": "materials um and I see a question here", "start": 1285.96, "duration": 3.76}, {"text": "for from", "start": 1288.32, "duration": 4.599}, {"text": "Juliet can GPR be used to help identify", "start": 1289.72, "duration": 5.76}, {"text": "parts of the code that use more memory", "start": 1292.919, "duration": 5.401}, {"text": "no um gprof all it does is add some", "start": 1295.48, "duration": 5.24}, {"text": "instrumentation to your code um and", "start": 1298.32, "duration": 4.92}, {"text": "keeps track um roughly of how much time", "start": 1300.72, "duration": 5.76}, {"text": "you're spending in that", "start": 1303.24, "duration": 3.24}, {"text": "code all right so um get getting into um", "start": 1307.32, "duration": 7.2}, {"text": "I I think one one of the most important", "start": 1312.24, "duration": 4.439}, {"text": "topics in performance tning", "start": 1314.52, "duration": 5.08}, {"text": "optimization is is I'm starting with a", "start": 1316.679, "duration": 5.0}, {"text": "distinction between what we call compute", "start": 1319.6, "duration": 4.8}, {"text": "bound versus memory bound codes so", "start": 1321.679, "duration": 5.88}, {"text": "there's a lot of attention focus on how", "start": 1324.4, "duration": 5.8}, {"text": "fast is your CPU you know what what what", "start": 1327.559, "duration": 5.041}, {"text": "what is the clock speed um and that's", "start": 1330.2, "duration": 4.599}, {"text": "important for some applications but for", "start": 1332.6, "duration": 5.8}, {"text": "lots of HPC applications they're going", "start": 1334.799, "duration": 5.88}, {"text": "to be Memory bound and what this means", "start": 1338.4, "duration": 4.32}, {"text": "is that the rate at which data can be", "start": 1340.679, "duration": 4.721}, {"text": "delivered to the CPU is the limiting", "start": 1342.72, "duration": 4.64}, {"text": "factor and we're going to be trying to", "start": 1345.4, "duration": 4.399}, {"text": "apply cach level optimization so that", "start": 1347.36, "duration": 6.16}, {"text": "the CPU is not star for data now we also", "start": 1349.799, "duration": 6.041}, {"text": "have what we call compute bound codes", "start": 1353.52, "duration": 4.12}, {"text": "where the performance of the processor", "start": 1355.84, "duration": 4.68}, {"text": "is the limiting factor so if you've W", "start": 1357.64, "duration": 5.76}, {"text": "written your code really well um to to", "start": 1360.52, "duration": 5.08}, {"text": "take advantage of of data locality which", "start": 1363.4, "duration": 4.92}, {"text": "we'll be talking about shortly um there", "start": 1365.6, "duration": 3.64}, {"text": "you can", "start": 1368.32, "duration": 3.68}, {"text": "actually um get get better performance", "start": 1369.24, "duration": 5.039}, {"text": "by running on a CPU with a faster clock", "start": 1372.0, "duration": 4.72}, {"text": "speed so in this case data can be", "start": 1374.279, "duration": 4.76}, {"text": "delivered fast enough but the processor", "start": 1376.72, "duration": 4.88}, {"text": "can't keep up so here our goal is going", "start": 1379.039, "duration": 3.961}, {"text": "to be to reduce the amount of", "start": 1381.6, "duration": 3.72}, {"text": "computation done on a given piece of", "start": 1383.0, "duration": 5.2}, {"text": "data now in a real application though", "start": 1385.32, "duration": 4.64}, {"text": "we're often going to find a combination", "start": 1388.2, "duration": 4.959}, {"text": "of compute and memory bound", "start": 1389.96, "duration": 7.68}, {"text": "kernels on the chat", "start": 1393.159, "duration": 4.481}, {"text": "um so a question here from snik as a", "start": 1397.679, "duration": 6.0}, {"text": "competitional researcher who assists", "start": 1402.0, "duration": 4.12}, {"text": "domain specific users what are the main", "start": 1403.679, "duration": 4.961}, {"text": "f functionalities one should invest time", "start": 1406.12, "duration": 4.28}, {"text": "in in", "start": 1408.64, "duration": 6.48}, {"text": "U oh um I I think the roof line model is", "start": 1410.4, "duration": 7.72}, {"text": "is probably the to to me the mo the most", "start": 1415.12, "duration": 4.36}, {"text": "important thing that you have now have", "start": 1418.12, "duration": 4.559}, {"text": "in UPR the other thing that I use it for", "start": 1419.48, "duration": 7.04}, {"text": "is um for for analyzing cash Behavior to", "start": 1422.679, "duration": 7.48}, {"text": "to see if we if we have lots of cash", "start": 1426.52, "duration": 7.96}, {"text": "messes all right so in order to", "start": 1430.159, "duration": 7.201}, {"text": "um in in order to um speed up the", "start": 1434.48, "duration": 5.36}, {"text": "performance of of memory bound kernels", "start": 1437.36, "duration": 4.76}, {"text": "or applications we need to understand", "start": 1439.84, "duration": 4.64}, {"text": "the computer memory hierarchy so I think", "start": 1442.12, "duration": 4.76}, {"text": "a lot of you may have seen um may have", "start": 1444.48, "duration": 5.24}, {"text": "seen figures like this at some time so", "start": 1446.88, "duration": 5.159}, {"text": "it's it's usually shown as a pyramid", "start": 1449.72, "duration": 3.8}, {"text": "where at the very top we have the", "start": 1452.039, "duration": 4.88}, {"text": "registers this is where we store data um", "start": 1453.52, "duration": 5.48}, {"text": "or yeah pieces of data that are", "start": 1456.919, "duration": 5.64}, {"text": "available immediately for use by the CPU", "start": 1459.0, "duration": 6.279}, {"text": "so if something is in register it's", "start": 1462.559, "duration": 5.0}, {"text": "available on the next clock cycle we", "start": 1465.279, "duration": 5.601}, {"text": "then have L1 cache which is on the order", "start": 1467.559, "duration": 7.0}, {"text": "of tens of kilobytes which is on chip um", "start": 1470.88, "duration": 5.56}, {"text": "so this is done in insicon you could", "start": 1474.559, "duration": 4.681}, {"text": "think of this as being a place very very", "start": 1476.44, "duration": 5.04}, {"text": "close to the CPU for storing for for", "start": 1479.24, "duration": 5.72}, {"text": "storing data um we then have an L2 cache", "start": 1481.48, "duration": 4.88}, {"text": "which is on the order of hundreds of", "start": 1484.96, "duration": 4.439}, {"text": "kilobytes and an L3 cache which is tens", "start": 1486.36, "duration": 6.4}, {"text": "of megabytes um and some processors it's", "start": 1489.399, "duration": 6.28}, {"text": "it's actually getting up to around um a", "start": 1492.76, "duration": 4.56}, {"text": "gigabyte but but that's going to be", "start": 1495.679, "duration": 3.6}, {"text": "shared AC trust multiple cores and then", "start": 1497.32, "duration": 4.479}, {"text": "finally um further down on the hierarchy", "start": 1499.279, "duration": 5.28}, {"text": "we have dram and disk and I'm just going", "start": 1501.799, "duration": 3.721}, {"text": "to", "start": 1504.559, "duration": 4.84}, {"text": "show um show show some numbers um for", "start": 1505.52, "duration": 5.96}, {"text": "from that that are relevant to", "start": 1509.399, "duration": 5.52}, {"text": "expense so these are I think a little", "start": 1511.48, "duration": 7.0}, {"text": "approximate but if data is an L1 cache", "start": 1514.919, "duration": 5.961}, {"text": "it's available in four Cycles if it's an", "start": 1518.48, "duration": 6.76}, {"text": "L2 cache 12 Cycles L3 cache 34 cycles", "start": 1520.88, "duration": 7.76}, {"text": "and if it's in Dam 270 Cycles so the", "start": 1525.24, "duration": 5.64}, {"text": "further we go down in the in the memory", "start": 1528.64, "duration": 4.48}, {"text": "hierarchy the more latency we're going", "start": 1530.88, "duration": 4.84}, {"text": "to have to work on that on that piece of", "start": 1533.12, "duration": 5.24}, {"text": "data now if you look at the absolute", "start": 1535.72, "duration": 6.72}, {"text": "times you know you go to Damm 120 NCS", "start": 1538.36, "duration": 6.76}, {"text": "doesn't sound like a long time but", "start": 1542.44, "duration": 6.359}, {"text": "relative to the clock speed that is um", "start": 1545.12, "duration": 6.0}, {"text": "that that that's very very far away so", "start": 1548.799, "duration": 4.36}, {"text": "what we're going to try to do is manage", "start": 1551.12, "duration": 6.24}, {"text": "our data in such a way that um that that", "start": 1553.159, "duration": 6.24}, {"text": "we can take that we can take better", "start": 1557.36, "duration": 5.36}, {"text": "advantage of cash and I'll explain that", "start": 1559.399, "duration": 6.801}, {"text": "next slide or two so again for memory", "start": 1562.72, "duration": 5.8}, {"text": "bound codes we're really really", "start": 1566.2, "duration": 4.719}, {"text": "concerned about um exploiting the memory", "start": 1568.52, "duration": 5.84}, {"text": "hierarchy and to make best use of cash", "start": 1570.919, "duration": 6.24}, {"text": "we're going to keep two concepts in mind", "start": 1574.36, "duration": 4.919}, {"text": "and these are temporal locality and", "start": 1577.159, "duration": 3.481}, {"text": "spatial", "start": 1579.279, "duration": 3.801}, {"text": "locality so just going back to our", "start": 1580.64, "duration": 3.72}, {"text": "figure", "start": 1583.08, "duration": 3.8}, {"text": "again when we when we need data that's", "start": 1584.36, "duration": 5.48}, {"text": "in damm it actually gets loaded into L3", "start": 1586.88, "duration": 5.88}, {"text": "cach into L2 and into into L1 so it", "start": 1589.84, "duration": 5.439}, {"text": "always has to move move into the cach", "start": 1592.76, "duration": 4.519}, {"text": "first", "start": 1595.279, "duration": 5.081}, {"text": "um so temporal locality is the idea is", "start": 1597.279, "duration": 5.64}, {"text": "that data that was recently accessed is", "start": 1600.36, "duration": 4.36}, {"text": "likely to be used again in the near", "start": 1602.919, "duration": 4.321}, {"text": "future so to take advantage of temporal", "start": 1604.72, "duration": 5.04}, {"text": "locality once data is loaded Into Cash", "start": 1607.24, "duration": 4.08}, {"text": "it's generally going to remain there", "start": 1609.76, "duration": 3.6}, {"text": "until it has to be purged to make room", "start": 1611.32, "duration": 4.359}, {"text": "for new data now why would it have to be", "start": 1613.36, "duration": 4.919}, {"text": "purged we go back again and look at the", "start": 1615.679, "duration": 5.641}, {"text": "sizes of of the caches and Dam let's say", "start": 1618.279, "duration": 5.161}, {"text": "we're working working on a large problem", "start": 1621.32, "duration": 5.239}, {"text": "data structures that that are um that", "start": 1623.44, "duration": 5.32}, {"text": "that are gigabytes or or tens gigabytes", "start": 1626.559, "duration": 4.681}, {"text": "or hundreds gigabytes you can see that", "start": 1628.76, "duration": 5.279}, {"text": "is much much larger than cash only a", "start": 1631.24, "duration": 5.2}, {"text": "small fraction of that data can fit into", "start": 1634.039, "duration": 5.841}, {"text": "cash at any one time so with temporal", "start": 1636.44, "duration": 5.56}, {"text": "locality again once we've done all the", "start": 1639.88, "duration": 4.24}, {"text": "hard work of getting data loaded Into", "start": 1642.0, "duration": 5.799}, {"text": "Cash um we we'd like to use it before", "start": 1644.12, "duration": 5.159}, {"text": "pushed out to make room for something", "start": 1647.799, "duration": 4.0}, {"text": "else um if you're a computer scientist", "start": 1649.279, "duration": 5.28}, {"text": "you've probably um take taken a course", "start": 1651.799, "duration": 5.841}, {"text": "in um in computer architecture where", "start": 1654.559, "duration": 6.881}, {"text": "they go into very very deep detail of of", "start": 1657.64, "duration": 6.159}, {"text": "cash management strategies but generally", "start": 1661.44, "duration": 4.119}, {"text": "there'll be some variation what they", "start": 1663.799, "duration": 4.641}, {"text": "call the least recently used algorithm", "start": 1665.559, "duration": 5.281}, {"text": "so pretty much the data that's stalis", "start": 1668.44, "duration": 3.76}, {"text": "that hasn't been used in the longest", "start": 1670.84, "duration": 4.0}, {"text": "time is going to be pushed out now the", "start": 1672.2, "duration": 5.4}, {"text": "idea behind spatial locality is that if", "start": 1674.84, "duration": 5.719}, {"text": "a piece of data is accessed it's likely", "start": 1677.6, "duration": 4.84}, {"text": "that neighboring data elements in memory", "start": 1680.559, "duration": 4.401}, {"text": "will also be needed so to take advantage", "start": 1682.44, "duration": 5.32}, {"text": "of spatial locality cach is organized", "start": 1684.96, "duration": 6.12}, {"text": "into lines I say here typically 64 bytes", "start": 1687.76, "duration": 7.88}, {"text": "I should say um at least for you know", "start": 1691.08, "duration": 6.88}, {"text": "standard standard Hardware I've never", "start": 1695.64, "duration": 5.279}, {"text": "seen anything other than 64 bytes and an", "start": 1697.96, "duration": 6.64}, {"text": "entire line is loaded at once so if", "start": 1700.919, "duration": 7.921}, {"text": "I um if I load an element from memory I", "start": 1704.6, "duration": 6.959}, {"text": "don't just get that element I'll get um", "start": 1708.84, "duration": 5.079}, {"text": "I'll get an entire line of 64 bytes", "start": 1711.559, "duration": 5.12}, {"text": "containing that element so our goal in", "start": 1713.919, "duration": 4.401}, {"text": "the cach level optimization is going to", "start": 1716.679, "duration": 3.921}, {"text": "be simple we're going to try to exploit", "start": 1718.32, "duration": 4.52}, {"text": "these two principles the temporal and", "start": 1720.6, "duration": 5.0}, {"text": "spatial spatial locality to minimize", "start": 1722.84, "duration": 5.52}, {"text": "data access", "start": 1725.6, "duration": 5.76}, {"text": "times now if you're working with 1D", "start": 1728.36, "duration": 5.48}, {"text": "arrays um you're probably going to write", "start": 1731.36, "duration": 5.799}, {"text": "pretty good code um with that without", "start": 1733.84, "duration": 5.92}, {"text": "even try so one-dimensional arrays are", "start": 1737.159, "duration": 5.36}, {"text": "stored as blocks of contiguous data in", "start": 1739.76, "duration": 5.519}, {"text": "memory so if we look look at a small", "start": 1742.519, "duration": 6.0}, {"text": "snippet here of C or C++ code um we're", "start": 1745.279, "duration": 7.361}, {"text": "allocating an array of 100", "start": 1748.519, "duration": 5.88}, {"text": "integers the way this is going to be", "start": 1752.64, "duration": 3.519}, {"text": "laid out in memory assuming these are", "start": 1754.399, "duration": 4.12}, {"text": "four byte integers is we're going to", "start": 1756.159, "duration": 4.161}, {"text": "have we're going to start with an offset", "start": 1758.519, "duration": 4.441}, {"text": "of zero we don't know exactly where in", "start": 1760.32, "duration": 5.12}, {"text": "memory is going to be um but what we do", "start": 1762.96, "duration": 5.559}, {"text": "know that this is going to be allocated", "start": 1765.44, "duration": 4.719}, {"text": "continuously", "start": 1768.519, "duration": 4.241}, {"text": "so um element zero is going to have an", "start": 1770.159, "duration": 5.201}, {"text": "offset of zerob bytes element one is", "start": 1772.76, "duration": 4.12}, {"text": "going to have an offset of four bytes", "start": 1775.36, "duration": 4.08}, {"text": "element two eight bytes three 12 bytes", "start": 1776.88, "duration": 5.48}, {"text": "and so on and so on so if we're trying", "start": 1779.44, "duration": 6.239}, {"text": "to um write good code here working with", "start": 1782.36, "duration": 6.36}, {"text": "1D arrays it's pretty simple just access", "start": 1785.679, "duration": 5.88}, {"text": "those elements in order so in the", "start": 1788.72, "duration": 4.199}, {"text": "snippet that I have at the bottom of", "start": 1791.559, "duration": 4.0}, {"text": "this slide would just show on the", "start": 1792.919, "duration": 5.12}, {"text": "process of incrementing each array", "start": 1795.559, "duration": 5.881}, {"text": "element by", "start": 1798.039, "duration": 3.401}, {"text": "100 all right so what's going on with", "start": 1802.48, "duration": 5.559}, {"text": "regards cache so as I'm executing this", "start": 1805.12, "duration": 5.64}, {"text": "loop we're going to assume again 64 byte", "start": 1808.039, "duration": 5.36}, {"text": "cach lines and four byte integers we're", "start": 1810.76, "duration": 5.68}, {"text": "going to load elements 0 through 15 into", "start": 1813.399, "duration": 6.0}, {"text": "cache so that's 16 4 byte elements", "start": 1816.44, "duration": 5.68}, {"text": "filling up that cach line and then we're", "start": 1819.399, "duration": 5.041}, {"text": "going to increment element zero element", "start": 1822.12, "duration": 6.0}, {"text": "one element two through element 15", "start": 1824.44, "duration": 5.28}, {"text": "then when we're", "start": 1828.12, "duration": 4.159}, {"text": "done um the processor is going to be", "start": 1829.72, "duration": 5.04}, {"text": "looking for element 16 it's not", "start": 1832.279, "duration": 5.24}, {"text": "available so now we're going to load", "start": 1834.76, "duration": 5.88}, {"text": "elements 16 through 31 into cache and", "start": 1837.519, "duration": 4.921}, {"text": "we're going to increment elements 16", "start": 1840.64, "duration": 5.2}, {"text": "through 31 now in reality the processor", "start": 1842.44, "duration": 5.2}, {"text": "is going to recognize the pattern of", "start": 1845.84, "duration": 4.36}, {"text": "data access and it's going to prefetch", "start": 1847.64, "duration": 5.12}, {"text": "the next cach line before it's", "start": 1850.2, "duration": 5.839}, {"text": "needed so a question that um that that", "start": 1852.76, "duration": 4.72}, {"text": "usually comes up at this point point of", "start": 1856.039, "duration": 5.841}, {"text": "the talk is do I have control over cash", "start": 1857.48, "duration": 6.48}, {"text": "so can I be really clever and say I want", "start": 1861.88, "duration": 5.72}, {"text": "to load this particular um chunk of data", "start": 1863.96, "duration": 7.36}, {"text": "into cache and there are no programming", "start": 1867.6, "duration": 5.799}, {"text": "constructs that I'm that I'm aware of", "start": 1871.32, "duration": 4.599}, {"text": "that give you direct control over", "start": 1873.399, "duration": 5.561}, {"text": "cash um modern processes though directly", "start": 1875.919, "duration": 4.88}, {"text": "Implement Advanced cash replacement", "start": 1878.96, "duration": 3.559}, {"text": "strategies Branch prediction and", "start": 1880.799, "duration": 3.72}, {"text": "prefetch mechanisms so I'm going to say", "start": 1882.519, "duration": 3.921}, {"text": "the best you can do is to follow the", "start": 1884.519, "duration": 3.16}, {"text": "standard practice", "start": 1886.44, "duration": 4.28}, {"text": "of of exploiting temporal and spatial", "start": 1887.679, "duration": 5.281}, {"text": "locality and in some instances you might", "start": 1890.72, "duration": 4.679}, {"text": "want to choose optimal parameters based", "start": 1892.96, "duration": 5.599}, {"text": "on the based on the cache", "start": 1895.399, "duration": 5.841}, {"text": "sizes so it's going to check okay no", "start": 1898.559, "duration": 4.72}, {"text": "questions in the chat", "start": 1901.24, "duration": 4.799}, {"text": "good all right here's where things get a", "start": 1903.279, "duration": 4.76}, {"text": "get a little complicated and that's when", "start": 1906.039, "duration": 4.12}, {"text": "we start working with multi-dimensional", "start": 1908.039, "duration": 6.041}, {"text": "arrays actually I do see a", "start": 1910.159, "duration": 3.921}, {"text": "question ah compilers we have pre", "start": 1915.36, "duration": 6.48}, {"text": "prefetch function so so eigor um do you", "start": 1918.0, "duration": 5.559}, {"text": "just want to chime in and comment on", "start": 1921.84, "duration": 3.559}, {"text": "that yeah", "start": 1923.559, "duration": 5.761}, {"text": "so uh most compilers have the prefetch", "start": 1925.399, "duration": 7.601}, {"text": "uh I think it's pretty standard by now", "start": 1929.32, "duration": 6.92}, {"text": "uh you usually don't need it unless you", "start": 1933.0, "duration": 6.2}, {"text": "are jumping around the memory randomly", "start": 1936.24, "duration": 5.76}, {"text": "uh and you can compute uh what the next", "start": 1939.2, "duration": 7.199}, {"text": "access will be way well ahead of time uh", "start": 1942.0, "duration": 6.76}, {"text": "I I was able to speit codes by factor of", "start": 1946.399, "duration": 7.0}, {"text": "10 that way but it's hard okay but yes", "start": 1948.76, "duration": 6.12}, {"text": "there there there are options when you", "start": 1953.399, "duration": 6.041}, {"text": "can say look I know I will use this uh", "start": 1954.88, "duration": 7.96}, {"text": "uh this address 10 steps down the line", "start": 1959.44, "duration": 6.92}, {"text": "load it now uh if you can do that but", "start": 1962.84, "duration": 5.76}, {"text": "yeah it's only advantageous if you can", "start": 1966.36, "duration": 5.12}, {"text": "do it at least 10 possibly hundred of", "start": 1968.6, "duration": 4.919}, {"text": "steps ahead of the uh of the time when", "start": 1971.48, "duration": 5.199}, {"text": "you use it okay great there thank you", "start": 1973.519, "duration": 5.0}, {"text": "thank you and I would I would consider", "start": 1976.679, "duration": 6.561}, {"text": "that to be a um a rather Advanced", "start": 1978.519, "duration": 4.721}, {"text": "optimization all right see if there's", "start": 1984.639, "duration": 5.201}, {"text": "any more comment all right so once we", "start": 1986.72, "duration": 5.559}, {"text": "get to multi-dimensional arrays this is", "start": 1989.84, "duration": 4.48}, {"text": "where things get a little more", "start": 1992.279, "duration": 4.4}, {"text": "complicated so from the computer's point", "start": 1994.32, "duration": 5.64}, {"text": "of view there is no such thing as a as a", "start": 1996.679, "duration": 5.441}, {"text": "two-dimensional array this is what we", "start": 1999.96, "duration": 4.76}, {"text": "call syntactic Sugar it's provided as a", "start": 2002.12, "duration": 5.08}, {"text": "convenience in the programmer so under", "start": 2004.72, "duration": 4.76}, {"text": "Hood the array is stored as a linear", "start": 2007.2, "duration": 5.319}, {"text": "block of data and here's where things", "start": 2009.48, "duration": 6.439}, {"text": "get just a little ugly um just like the", "start": 2012.519, "duration": 5.76}, {"text": "entire world hasn't been able to agree", "start": 2015.919, "duration": 4.72}, {"text": "on which side of the which side of the", "start": 2018.279, "duration": 5.801}, {"text": "street to drive on you know so in the in", "start": 2020.639, "duration": 5.961}, {"text": "the US the the mo most of Europe we we", "start": 2024.08, "duration": 6.68}, {"text": "drive on the right side in the UK and um", "start": 2026.6, "duration": 5.919}, {"text": "commonwealth countries they drive on the", "start": 2030.76, "duration": 4.84}, {"text": "left and that's pretty much locked in um", "start": 2032.519, "duration": 4.921}, {"text": "I don't think we're going to consider", "start": 2035.6, "duration": 4.039}, {"text": "you we're going to convince the UK and", "start": 2037.44, "duration": 4.719}, {"text": "Australia and India to start driving on", "start": 2039.639, "duration": 4.321}, {"text": "the right and they won't do the same", "start": 2042.159, "duration": 5.881}, {"text": "with us we have the same issue with um", "start": 2043.96, "duration": 7.719}, {"text": "with with programming languages so there", "start": 2048.04, "duration": 5.2}, {"text": "are two conventions there's we call", "start": 2051.679, "duration": 4.121}, {"text": "column major order and row major order", "start": 2053.24, "duration": 4.679}, {"text": "so in column major order the first or", "start": 2055.8, "duration": 4.68}, {"text": "leftmost index varies the fastest this", "start": 2057.919, "duration": 5.121}, {"text": "is what's done in Fortran R in mat lab", "start": 2060.48, "duration": 4.679}, {"text": "so if we have the this small array here", "start": 2063.04, "duration": 5.039}, {"text": "of nine elements let labeled one through", "start": 2065.159, "duration": 4.281}, {"text": "nine the way that they're going to be", "start": 2068.079, "duration": 5.76}, {"text": "stored in memory is 147 258 369 going", "start": 2069.44, "duration": 7.6}, {"text": "down the columns row major order is", "start": 2073.839, "duration": 6.721}, {"text": "what's used in Python Mathematica C C++", "start": 2077.04, "duration": 6.76}, {"text": "and C like languages here the last or", "start": 2080.56, "duration": 5.88}, {"text": "rightmost index varies fastest so for", "start": 2083.8, "duration": 4.799}, {"text": "this same array the the ordering is", "start": 2086.44, "duration": 4.84}, {"text": "going to be going across each row one 2", "start": 2088.599, "duration": 7.76}, {"text": "3 4 5 6 7 8 n so what this means is that", "start": 2091.28, "duration": 7.599}, {"text": "when we", "start": 2096.359, "duration": 2.52}, {"text": "um is that when we want to write optimal", "start": 2099.88, "duration": 4.64}, {"text": "code working with multiple dimensional", "start": 2102.48, "duration": 4.76}, {"text": "Rays it's really really important that", "start": 2104.52, "duration": 5.28}, {"text": "we're accessing elements in the in the", "start": 2107.24, "duration": 5.8}, {"text": "correct order so a properly written for", "start": 2109.8, "duration": 5.799}, {"text": "Trend code if we wanted to add two", "start": 2113.04, "duration": 5.12}, {"text": "arrays element by element is we Loop", "start": 2115.599, "duration": 6.76}, {"text": "over J we Loop over i z Jal xig J plus", "start": 2118.16, "duration": 8.28}, {"text": "yig J properly written C code we're", "start": 2122.359, "duration": 5.921}, {"text": "going to do the opposite here we're", "start": 2126.44, "duration": 3.36}, {"text": "going to have the loop over I on the", "start": 2128.28, "duration": 3.96}, {"text": "outside the loop over J on the inside", "start": 2129.8, "duration": 7.52}, {"text": "and here Z Jal XI plus Yi", "start": 2132.24, "duration": 5.08}, {"text": "J right so I encourage everybody to um", "start": 2137.88, "duration": 7.44}, {"text": "to go to the examples that I have in", "start": 2143.2, "duration": 4.08}, {"text": "GitHub that I posted", "start": 2145.32, "duration": 4.84}, {"text": "earlier and if we were doing this as a", "start": 2147.28, "duration": 4.4}, {"text": "summer Institute we would actually do a", "start": 2150.16, "duration": 3.12}, {"text": "Hands-On I'm just going to run through", "start": 2151.68, "duration": 3.36}, {"text": "the results though so we're going to", "start": 2153.28, "duration": 4.44}, {"text": "compile C and for Trend code using the", "start": 2155.04, "duration": 4.92}, {"text": "Intel and the AMD", "start": 2157.72, "duration": 5.119}, {"text": "compilers um we're mainly concerned here", "start": 2159.96, "duration": 4.92}, {"text": "with compiler flags that control the", "start": 2162.839, "duration": 3.401}, {"text": "overall", "start": 2164.88, "duration": 5.84}, {"text": "optimization so um when we compile code", "start": 2166.24, "duration": 7.839}, {"text": "we can either specify no optimization -", "start": 2170.72, "duration": 6.119}, {"text": "o1 2 and three and these are pretty much", "start": 2174.079, "duration": 5.401}, {"text": "standard across across all", "start": 2176.839, "duration": 6.441}, {"text": "compilers um o0 means no optimization", "start": 2179.48, "duration": 7.04}, {"text": "o01 is limited O2 is moderate so pretty", "start": 2183.28, "duration": 5.44}, {"text": "much any change that we could do that", "start": 2186.52, "duration": 5.36}, {"text": "can would not potentially affect the", "start": 2188.72, "duration": 6.119}, {"text": "floating Point results and 03 is where", "start": 2191.88, "duration": 4.68}, {"text": "we're doing aggressive", "start": 2194.839, "duration": 4.24}, {"text": "optimization and we want to make sure if", "start": 2196.56, "duration": 4.08}, {"text": "we're doing this on expanse that we", "start": 2199.079, "duration": 4.04}, {"text": "target the architecture so if we're", "start": 2200.64, "duration": 7.04}, {"text": "using the AMD um aocc compilers we need", "start": 2203.119, "duration": 9.281}, {"text": "to specify the um architecture is ZN", "start": 2207.68, "duration": 9.159}, {"text": "vertu so this is for for the um zen zen", "start": 2212.4, "duration": 7.76}, {"text": "two core AMD cores um Intel we need to", "start": 2216.839, "duration": 5.201}, {"text": "specify core equals", "start": 2220.16, "duration": 6.08}, {"text": "avx2 now the reason I bring this up is", "start": 2222.04, "duration": 5.559}, {"text": "um I want to talk a little bit about", "start": 2226.24, "duration": 3.68}, {"text": "what the compilers can and cannot do for", "start": 2227.599, "duration": 6.161}, {"text": "you so is data access order really that", "start": 2229.92, "duration": 6.56}, {"text": "important so I looked at some timings", "start": 2233.76, "duration": 5.319}, {"text": "for adding together two matrices of size", "start": 2236.48, "duration": 6.839}, {"text": "30,000 by 30,000 you using Fortran code", "start": 2239.079, "duration": 6.481}, {"text": "with boops nested in the proper and", "start": 2243.319, "duration": 5.481}, {"text": "improper orders so basically going going", "start": 2245.56, "duration": 5.559}, {"text": "back here taking that block of four", "start": 2248.8, "duration": 5.6}, {"text": "Trend code um looking at the performance", "start": 2251.119, "duration": 5.841}, {"text": "with the proper nesting and with the", "start": 2254.4, "duration": 5.16}, {"text": "nesting with with the nesting swapped", "start": 2256.96, "duration": 6.96}, {"text": "now notice that if I swap the order of", "start": 2259.56, "duration": 7.36}, {"text": "the nesting if I have do I equals 1 on", "start": 2263.92, "duration": 5.04}, {"text": "the outside now I'm going to be going", "start": 2266.92, "duration": 4.04}, {"text": "through that array with a very large", "start": 2268.96, "duration": 6.119}, {"text": "stride in this case stride", "start": 2270.96, "duration": 4.119}, {"text": "30,000 and um we we we see some um some", "start": 2275.599, "duration": 9.841}, {"text": "very different behavior on the", "start": 2280.8, "duration": 9.4}, {"text": "um uh when we use the afcc um the the", "start": 2285.44, "duration": 7.84}, {"text": "AMD um compilers and the the Intel", "start": 2290.2, "duration": 6.919}, {"text": "compilers so we'll start with", "start": 2293.28, "duration": 7.24}, {"text": "the we'll start with the", "start": 2297.119, "duration": 6.72}, {"text": "aocc um here what we'll notice that when", "start": 2300.52, "duration": 6.559}, {"text": "we had um when we used", "start": 2303.839, "duration": 6.681}, {"text": "default optimization and the proper Loop", "start": 2307.079, "duration": 7.76}, {"text": "nesting that the um that that the code", "start": 2310.52, "duration": 7.12}, {"text": "was a lot faster almost three times", "start": 2314.839, "duration": 7.721}, {"text": "faster when we did- o z um Pro proper", "start": 2317.64, "duration": 7.12}, {"text": "Loop nesting was still faster and as we", "start": 2322.56, "duration": 5.12}, {"text": "go to um higher optimization levels", "start": 2324.76, "duration": 5.2}, {"text": "we'll see that the code code continues", "start": 2327.68, "duration": 4.919}, {"text": "to improve um going from 02 to 03 really", "start": 2329.96, "duration": 4.399}, {"text": "doesn't help because there's not much", "start": 2332.599, "duration": 3.641}, {"text": "that the compiler can do with this chunk", "start": 2334.359, "duration": 4.041}, {"text": "code but you'll see that there's always", "start": 2336.24, "duration": 4.879}, {"text": "a significant difference you know a fact", "start": 2338.4, "duration": 4.76}, {"text": "typically a factor of three or more", "start": 2341.119, "duration": 3.72}, {"text": "between using the proper and the", "start": 2343.16, "duration": 4.52}, {"text": "improper Loop nesting so we see improper", "start": 2344.839, "duration": 4.921}, {"text": "Loop nesting is always slower than", "start": 2347.68, "duration": 6.24}, {"text": "proper Loop nesting at all optimization", "start": 2349.76, "duration": 4.16}, {"text": "levels um so question here from Joe", "start": 2355.64, "duration": 9.679}, {"text": "helmers how about G4 Trend regarding", "start": 2360.52, "duration": 4.799}, {"text": "regarding", "start": 2365.44, "duration": 5.56}, {"text": "um so actually Joe let let me get to", "start": 2368.44, "duration": 6.0}, {"text": "that and then snik um I'll talk very", "start": 2371.0, "duration": 6.359}, {"text": "quickly then about the downside of going", "start": 2374.44, "duration": 6.2}, {"text": "got going- 03 all the", "start": 2377.359, "duration": 6.561}, {"text": "time oh and Igor was asking how big of", "start": 2380.64, "duration": 5.479}, {"text": "an N were're using that this was n", "start": 2383.92, "duration": 5.12}, {"text": "equals 30,000 so it was a 30,000 by", "start": 2386.119, "duration": 5.361}, {"text": "30,000", "start": 2389.04, "duration": 4.799}, {"text": "Matrix okay so now we're going to go to", "start": 2391.48, "duration": 3.92}, {"text": "the Intel", "start": 2393.839, "duration": 4.52}, {"text": "compiler and here here was really", "start": 2395.4, "duration": 5.679}, {"text": "interesting we'll see that the default", "start": 2398.359, "duration": 5.561}, {"text": "optimization is the same as appears to", "start": 2401.079, "duration": 4.201}, {"text": "be the same", "start": 2403.92, "duration": 5.56}, {"text": "as-2 and also in this case the Intel", "start": 2405.28, "duration": 7.6}, {"text": "compiler was smart enough to recognized", "start": 2409.48, "duration": 6.8}, {"text": "that I had those Loops improperly nested", "start": 2412.88, "duration": 6.12}, {"text": "and it actually rewrote the code to to", "start": 2416.28, "duration": 4.799}, {"text": "reorder the nesting and get better", "start": 2419.0, "duration": 4.64}, {"text": "performance so", "start": 2421.079, "duration": 6.76}, {"text": "um you know getting back to", "start": 2423.64, "duration": 7.679}, {"text": "um back to Joe's question so I haven't", "start": 2427.839, "duration": 5.48}, {"text": "um I haven't tried G4 Trend but that", "start": 2431.319, "duration": 4.401}, {"text": "would be a would be a good experiment", "start": 2433.319, "duration": 6.561}, {"text": "I'm not sure if G4 Tren will um will", "start": 2435.72, "duration": 6.68}, {"text": "will recognize the improperly written", "start": 2439.88, "duration": 6.959}, {"text": "code and renest Loops um the downside of", "start": 2442.4, "duration": 7.439}, {"text": "going 03 all the time", "start": 2446.839, "duration": 5.601}, {"text": "um right so there's commment in here", "start": 2449.839, "duration": 5.361}, {"text": "that um that that it can break some", "start": 2452.44, "duration": 5.52}, {"text": "packages the other thing about 03 is it", "start": 2455.2, "duration": 4.639}, {"text": "does what we call more aggressive", "start": 2457.96, "duration": 4.28}, {"text": "optimization so if you're familiar with", "start": 2459.839, "duration": 4.201}, {"text": "floating Point arithmetic you need to", "start": 2462.24, "duration": 4.68}, {"text": "keep in mind that the algebraic", "start": 2464.04, "duration": 4.72}, {"text": "identities that you learned for from", "start": 2466.92, "duration": 4.88}, {"text": "math when you're growing up in school um", "start": 2468.76, "duration": 6.839}, {"text": "you know say a A plus b in parentheses", "start": 2471.8, "duration": 7.16}, {"text": "times c um we know algebraically that's", "start": 2475.599, "duration": 7.641}, {"text": "equivalent to a Time C plus b time C but", "start": 2478.96, "duration": 6.44}, {"text": "when we do floating Point arithmetic", "start": 2483.24, "duration": 4.119}, {"text": "with um", "start": 2485.4, "duration": 3.48}, {"text": "with with", "start": 2487.359, "duration": 4.72}, {"text": "with a finite finite", "start": 2488.88, "duration": 5.68}, {"text": "Precision um fo for the mathematics we", "start": 2492.079, "duration": 4.841}, {"text": "can get very very small roundoff errs", "start": 2494.56, "duration": 5.68}, {"text": "now if you compile your code with D3", "start": 2496.92, "duration": 6.399}, {"text": "often it will be faster you might get", "start": 2500.24, "duration": 5.24}, {"text": "very very very small differences you", "start": 2503.319, "duration": 4.161}, {"text": "need to judge whether or not those", "start": 2505.48, "duration": 4.92}, {"text": "differences are are significant um I've", "start": 2507.48, "duration": 4.24}, {"text": "actually worked in codes though where", "start": 2510.4, "duration": 4.679}, {"text": "going from -02 to 03 gave a completely", "start": 2511.72, "duration": 7.2}, {"text": "different result but that was a um", "start": 2515.079, "duration": 7.361}, {"text": "extremely badly written code where there", "start": 2518.92, "duration": 7.48}, {"text": "was um I'm G to say a highly unstable", "start": 2522.44, "duration": 6.48}, {"text": "numerical", "start": 2526.4, "duration": 2.52}, {"text": "method okay yep yep and you y e", "start": 2529.119, "duration": 4.2}, {"text": "mentioned the same thing you usually", "start": 2531.8, "duration": 2.96}, {"text": "buggy", "start": 2533.319, "duration": 3.841}, {"text": "code um and that that's what we ran into", "start": 2534.76, "duration": 4.76}, {"text": "in that", "start": 2537.16, "duration": 2.36}, {"text": "application um so so eigor I", "start": 2542.04, "duration": 4.64}, {"text": "think", "start": 2545.16, "duration": 6.56}, {"text": "if we do um 30 30,000 by by by 30,000 um", "start": 2546.68, "duration": 7.0}, {"text": "that that I could do the math but that's", "start": 2551.72, "duration": 6.28}, {"text": "not going to fit into l c L3", "start": 2553.68, "duration": 7.04}, {"text": "cach um and a question from Kenneth I", "start": 2558.0, "duration": 5.119}, {"text": "thought O2 and 03 didn't change", "start": 2560.72, "duration": 5.56}, {"text": "semantics order of operations um it that", "start": 2563.119, "duration": 7.841}, {"text": "going from dash2 to 03 actually could um", "start": 2566.28, "duration": 6.559}, {"text": "could could could rearrange um floating", "start": 2570.96, "duration": 4.599}, {"text": "Point operations to taking advantage of", "start": 2572.839, "duration": 4.841}, {"text": "algebraic identities that may not", "start": 2575.559, "duration": 4.121}, {"text": "necessarily be floating Point", "start": 2577.68, "duration": 5.439}, {"text": "identities with that let me move", "start": 2579.68, "duration": 7.2}, {"text": "on okay so a few lessons um making", "start": 2583.119, "duration": 5.601}, {"text": "optimal use of cache is particularly", "start": 2586.88, "duration": 4.0}, {"text": "important in memory bound codes", "start": 2588.72, "duration": 4.08}, {"text": "sometimes the compiler will help you in", "start": 2590.88, "duration": 4.439}, {"text": "this case Intel sometimes it won't and", "start": 2592.8, "duration": 4.84}, {"text": "I'd really like to see um what what", "start": 2595.319, "duration": 7.641}, {"text": "happens with um with with with the um I", "start": 2597.64, "duration": 10.439}, {"text": "think it was the GCC for Trend compiler", "start": 2602.96, "duration": 5.119}, {"text": "okay so one more thing in the chat um", "start": 2608.24, "duration": 6.4}, {"text": "okay I think we're up to speed", "start": 2612.24, "duration": 5.0}, {"text": "now", "start": 2614.64, "duration": 7.52}, {"text": "ah okay um so we're getting a little um", "start": 2617.24, "duration": 6.2}, {"text": "a little short on time I'm going to go", "start": 2622.16, "duration": 3.12}, {"text": "through these pretty quickly talk about", "start": 2623.44, "duration": 3.6}, {"text": "some of the other optimizations that you", "start": 2625.28, "duration": 4.839}, {"text": "can do in your code um lot what we call", "start": 2627.04, "duration": 5.48}, {"text": "Loop level optimizations well one of", "start": 2630.119, "duration": 5.0}, {"text": "them is Loop Fusion this is one of the", "start": 2632.52, "duration": 4.599}, {"text": "most basic Loop level optimizations and", "start": 2635.119, "duration": 3.72}, {"text": "this is where we take two loops and we", "start": 2637.119, "duration": 3.681}, {"text": "fuse them together for example if you", "start": 2638.839, "duration": 3.801}, {"text": "have two loops with the same range of", "start": 2640.8, "duration": 3.96}, {"text": "iterations we combine them into a single", "start": 2642.64, "duration": 4.679}, {"text": "Loop fusing simple Loops give the", "start": 2644.76, "duration": 4.76}, {"text": "compiler more opportunities to rearrange", "start": 2647.319, "duration": 4.481}, {"text": "instructions and get better performance", "start": 2649.52, "duration": 4.079}, {"text": "and it's even more beneficial if the", "start": 2651.8, "duration": 4.92}, {"text": "fuse Loops use the same data streams so", "start": 2653.599, "duration": 4.96}, {"text": "since it allows for for better data", "start": 2656.72, "duration": 5.72}, {"text": "reuse so in this case when I um fuse", "start": 2658.559, "duration": 7.201}, {"text": "these two Loops both Loops were using um", "start": 2662.44, "duration": 5.879}, {"text": "where accessing elements of arrays a X", "start": 2665.76, "duration": 4.88}, {"text": "and Y um here this is going to be", "start": 2668.319, "duration": 4.401}, {"text": "considerably faster because when we do", "start": 2670.64, "duration": 5.0}, {"text": "the operation calculating Z ofi we", "start": 2672.72, "duration": 6.52}, {"text": "already have x subi y subi and as subi", "start": 2675.64, "duration": 5.24}, {"text": "um not not only in Cache they're going", "start": 2679.24, "duration": 3.28}, {"text": "to be in register and they're going to", "start": 2680.88, "duration": 4.4}, {"text": "be immediately available for use in the", "start": 2682.52, "duration": 4.799}, {"text": "in the next", "start": 2685.28, "duration": 4.279}, {"text": "calculation um just showing here an", "start": 2687.319, "duration": 6.161}, {"text": "example again for the um aocc compiler", "start": 2689.559, "duration": 5.241}, {"text": "and Intel", "start": 2693.48, "duration": 4.119}, {"text": "compiler that we do get some definite", "start": 2694.8, "duration": 6.4}, {"text": "benefits from um for for from fusing", "start": 2697.599, "duration": 6.561}, {"text": "these Loops um here it's it's kind of", "start": 2701.2, "duration": 6.8}, {"text": "modest um you know going assuming that", "start": 2704.16, "duration": 7.08}, {"text": "we're using um de Dash O2 or 03", "start": 2708.0, "duration": 5.44}, {"text": "optimization but but still noticeable", "start": 2711.24, "duration": 6.04}, {"text": "it's about a 30%", "start": 2713.44, "duration": 3.84}, {"text": "boost okay Loop Vision I'm going to go", "start": 2717.76, "duration": 4.72}, {"text": "through these pretty quickly you could", "start": 2720.8, "duration": 3.559}, {"text": "think of this as the opposite of loop", "start": 2722.48, "duration": 4.359}, {"text": "Fusion sometimes the loop body is too", "start": 2724.359, "duration": 4.081}, {"text": "complex it contains too many data", "start": 2726.839, "duration": 4.0}, {"text": "streams splitting can improve", "start": 2728.44, "duration": 4.639}, {"text": "performance sometimes it's def difficult", "start": 2730.839, "duration": 4.201}, {"text": "to decide if Loop should be fused or", "start": 2733.079, "duration": 4.04}, {"text": "split if and doubt you can always try", "start": 2735.04, "duration": 5.16}, {"text": "both versions if this is a you know", "start": 2737.119, "duration": 5.841}, {"text": "really if this Curves in a really um", "start": 2740.2, "duration": 5.04}, {"text": "computationally demanding function and", "start": 2742.96, "duration": 3.92}, {"text": "see which is", "start": 2745.24, "duration": 4.04}, {"text": "faster um one of my favorite", "start": 2746.88, "duration": 4.52}, {"text": "optimizations is something called Loop", "start": 2749.28, "duration": 4.76}, {"text": "invariant code motion and this is where", "start": 2751.4, "duration": 5.439}, {"text": "you take a um", "start": 2754.04, "duration": 4.2}, {"text": "a", "start": 2756.839, "duration": 4.0}, {"text": "calculation um that outside of a loop", "start": 2758.24, "duration": 5.64}, {"text": "basically that doesn't re rely on on the", "start": 2760.839, "duration": 6.24}, {"text": "iteration pre-calculate it and use that", "start": 2763.88, "duration": 5.84}, {"text": "result in its place so again if it's", "start": 2767.079, "duration": 5.0}, {"text": "simple enough some compilers can do this", "start": 2769.72, "duration": 4.28}, {"text": "can do this for you but we'd recommend", "start": 2772.079, "duration": 4.201}, {"text": "doing this yourself I don't see any", "start": 2774.0, "duration": 4.68}, {"text": "downsides in those potentially um", "start": 2776.28, "duration": 5.279}, {"text": "potentially very big savings", "start": 2778.68, "duration": 6.639}, {"text": "so um in in this case um again this a", "start": 2781.559, "duration": 5.8}, {"text": "little control but We're looping over", "start": 2785.319, "duration": 5.121}, {"text": "elements of an array setting Z of IAL X", "start": 2787.359, "duration": 6.281}, {"text": "of I plus root of C there's no reason", "start": 2790.44, "duration": 4.96}, {"text": "that we need to do that square root", "start": 2793.64, "duration": 4.6}, {"text": "calculation for every iteration we can", "start": 2795.4, "duration": 5.28}, {"text": "do that", "start": 2798.24, "duration": 2.44}, {"text": "once we we can pull that", "start": 2801.44, "duration": 5.119}, {"text": "out calculate it before the loop and", "start": 2803.839, "duration": 5.201}, {"text": "then use that use that result over and", "start": 2806.559, "duration": 7.401}, {"text": "over um we can also do this for um there", "start": 2809.04, "duration": 7.079}, {"text": "there are more complex examples of this", "start": 2813.96, "duration": 7.159}, {"text": "so this is adapted from a um cut code", "start": 2816.119, "duration": 7.96}, {"text": "that I worked on a few years ago for", "start": 2821.119, "duration": 5.761}, {"text": "constructing animal home ranges from GPS", "start": 2824.079, "duration": 5.161}, {"text": "tracking data modified a little bit for", "start": 2826.88, "duration": 5.76}, {"text": "for this example so we had trip nested", "start": 2829.24, "duration": 5.96}, {"text": "Loops sometimes the VAR variants are", "start": 2832.64, "duration": 4.479}, {"text": "going to be a little less obvious and", "start": 2835.2, "duration": 5.24}, {"text": "may even be vectors results for example", "start": 2837.119, "duration": 6.281}, {"text": "here we we notice that X2", "start": 2840.44, "duration": 7.399}, {"text": "Y2 does not depend on the index K so on", "start": 2843.4, "duration": 6.919}, {"text": "that on that innermost Loop this is a", "start": 2847.839, "duration": 4.24}, {"text": "calculation that we don't need to do", "start": 2850.319, "duration": 3.76}, {"text": "over and", "start": 2852.079, "duration": 6.601}, {"text": "over square root of B times X2 Y2", "start": 2854.079, "duration": 6.28}, {"text": "obviously also does not depend on the", "start": 2858.68, "duration": 3.919}, {"text": "index", "start": 2860.359, "duration": 5.441}, {"text": "K so what we could do is we could take", "start": 2862.599, "duration": 4.96}, {"text": "calculations that don't need to be done", "start": 2865.8, "duration": 4.039}, {"text": "in those innermost Loops move them", "start": 2867.559, "duration": 5.201}, {"text": "outside so for example here I took the", "start": 2869.839, "duration": 5.52}, {"text": "calculation of X2 I moved it to the", "start": 2872.76, "duration": 6.76}, {"text": "outermost most Lo loop I took the um x^2", "start": 2875.359, "duration": 9.161}, {"text": "+ y^2 and the square root of X2 Y2", "start": 2879.52, "duration": 7.079}, {"text": "calculation move that outside of the", "start": 2884.52, "duration": 5.319}, {"text": "innermost Loop and now I use that um I", "start": 2886.599, "duration": 5.641}, {"text": "use that result repeatedly with within", "start": 2889.839, "duration": 4.081}, {"text": "the innermost", "start": 2892.24, "duration": 3.72}, {"text": "Loop and we can go even a little bit", "start": 2893.92, "duration": 5.439}, {"text": "further we notice that Z that that Z2", "start": 2895.96, "duration": 6.56}, {"text": "does not depend on the indices I or", "start": 2899.359, "duration": 7.24}, {"text": "J and of course um calculating the", "start": 2902.52, "duration": 7.559}, {"text": "exponent of minus a * Z2 also does not", "start": 2906.599, "duration": 5.361}, {"text": "depend on indices I and", "start": 2910.079, "duration": 6.24}, {"text": "J so we could take an entire um Vector", "start": 2911.96, "duration": 6.68}, {"text": "of these invariance calculate them", "start": 2916.319, "duration": 4.401}, {"text": "outside and", "start": 2918.64, "duration": 4.959}, {"text": "now in the innermost Loop instead of", "start": 2920.72, "duration": 5.48}, {"text": "doing that expensive um exponential", "start": 2923.599, "duration": 5.641}, {"text": "evaluation we can instead just access", "start": 2926.2, "duration": 5.599}, {"text": "the element of the vector and this", "start": 2929.24, "duration": 5.24}, {"text": "resulted in a really really big speed up", "start": 2931.799, "duration": 7.681}, {"text": "of this code let me take a look at the", "start": 2934.48, "duration": 5.0}, {"text": "chat okay what is your thought on", "start": 2940.76, "duration": 7.76}, {"text": "reusing an increment variable say um", "start": 2943.319, "duration": 7.321}, {"text": "multiple times in a sub routine instead", "start": 2948.52, "duration": 6.4}, {"text": "of i j k so I'm not quite sure I", "start": 2950.64, "duration": 5.199}, {"text": "understand the question are you", "start": 2954.92, "duration": 4.159}, {"text": "referring to maybe taking your your", "start": 2955.839, "duration": 5.72}, {"text": "multi-dimensional Loop and then", "start": 2959.079, "duration": 5.441}, {"text": "flattening it out into into", "start": 2961.559, "duration": 5.961}, {"text": "1D", "start": 2964.52, "duration": 3.0}, {"text": "and while you working an answer I'm just", "start": 2969.0, "duration": 5.2}, {"text": "going to move on because we're", "start": 2970.88, "duration": 3.32}, {"text": "getting okay and then um question here", "start": 2977.76, "duration": 7.079}, {"text": "from Joe in the loop and Varian code", "start": 2982.0, "duration": 5.119}, {"text": "motion is this increasing the memory", "start": 2984.839, "duration": 6.401}, {"text": "requirement yeah in in a sense it is um", "start": 2987.119, "duration": 6.081}, {"text": "you know if we go if we go all the way", "start": 2991.24, "duration": 4.72}, {"text": "back here um we we do we do need need a", "start": 2993.2, "duration": 6.0}, {"text": "variable to um variable to sore square", "start": 2995.96, "duration": 7.52}, {"text": "root of c um and if we go to the example", "start": 2999.2, "duration": 8.08}, {"text": "I just showed we did have to allocate we", "start": 3003.48, "duration": 5.839}, {"text": "did have to allocate space to to hold", "start": 3007.28, "duration": 4.839}, {"text": "that Vector but keep in mind though if", "start": 3009.319, "duration": 5.04}, {"text": "we're working with with um", "start": 3012.119, "duration": 4.801}, {"text": "threedimensional arrays in this case the", "start": 3014.359, "duration": 6.44}, {"text": "space that we need for that Vector is um", "start": 3016.92, "duration": 6.48}, {"text": "it's it's really minuscule compared to", "start": 3020.799, "duration": 5.121}, {"text": "the size of our data structure so here", "start": 3023.4, "duration": 5.52}, {"text": "I'm going to call this a um time space", "start": 3025.92, "duration": 6.919}, {"text": "tradeoff that we were able to use a", "start": 3028.92, "duration": 6.919}, {"text": "little more memory but to save a lot of", "start": 3032.839, "duration": 5.76}, {"text": "computation", "start": 3035.839, "duration": 2.76}, {"text": "time oh so um seg let me um let let me", "start": 3042.88, "duration": 6.04}, {"text": "get back to your question later I just", "start": 3046.839, "duration": 3.441}, {"text": "want to get through a little bit more", "start": 3048.92, "duration": 4.72}, {"text": "material we can follow up on", "start": 3050.28, "duration": 3.36}, {"text": "that", "start": 3054.44, "duration": 5.359}, {"text": "okay all right another common technique", "start": 3057.079, "duration": 4.801}, {"text": "is something called Loop peeling this is", "start": 3059.799, "duration": 4.0}, {"text": "where we take one or more iterations and", "start": 3061.88, "duration": 4.239}, {"text": "we pull them outside of the loop um I've", "start": 3063.799, "duration": 5.8}, {"text": "used this a few times it's um you can", "start": 3066.119, "duration": 5.96}, {"text": "you can often speed up key kernels um by", "start": 3069.599, "duration": 5.081}, {"text": "by doing this so if we look on the block", "start": 3072.079, "duration": 4.72}, {"text": "of code here on the left where we're", "start": 3074.68, "duration": 4.32}, {"text": "iterating over over the elements uh", "start": 3076.799, "duration": 4.721}, {"text": "elements of Z but you'll notice that", "start": 3079.0, "duration": 4.839}, {"text": "very first iteration is a little", "start": 3081.52, "duration": 4.36}, {"text": "different um here", "start": 3083.839, "duration": 4.0}, {"text": "again contrived example we're", "start": 3085.88, "duration": 4.959}, {"text": "calculating Z of I equals x of I / y of", "start": 3087.839, "duration": 7.52}, {"text": "I only if I equals z otherwise um we", "start": 3090.839, "duration": 6.0}, {"text": "were going to we're going to sum the", "start": 3095.359, "duration": 3.601}, {"text": "elements again these are very very", "start": 3096.839, "duration": 4.401}, {"text": "simple examples sometimes the compiler", "start": 3098.96, "duration": 3.96}, {"text": "will be able to do this for you", "start": 3101.24, "duration": 3.879}, {"text": "sometimes it won't having that logical", "start": 3102.92, "duration": 3.919}, {"text": "test in there", "start": 3105.119, "duration": 4.361}, {"text": "will um I'll say it's going to break the", "start": 3106.839, "duration": 4.52}, {"text": "performance the loop you're not you're", "start": 3109.48, "duration": 3.24}, {"text": "not going to be able to take advantage", "start": 3111.359, "duration": 4.72}, {"text": "full advantage of say the um the the the", "start": 3112.72, "duration": 5.96}, {"text": "vector instructions available in modern", "start": 3116.079, "duration": 5.361}, {"text": "processors um but by taking that out", "start": 3118.68, "duration": 5.639}, {"text": "treat treating it separately um we can", "start": 3121.44, "duration": 4.879}, {"text": "often get a big speed up and here I", "start": 3124.319, "duration": 3.681}, {"text": "actually showed this combined with the", "start": 3126.319, "duration": 5.48}, {"text": "tech um combined with Loop", "start": 3128.0, "duration": 3.799}, {"text": "Fusion okay and one more Loop level", "start": 3132.599, "duration": 3.96}, {"text": "technique I'm going to talk about is", "start": 3135.24, "duration": 4.0}, {"text": "something called Loop unrolling this is", "start": 3136.559, "duration": 4.8}, {"text": "where the loop body is replicated and", "start": 3139.24, "duration": 5.2}, {"text": "the stride is modified accordingly and", "start": 3141.359, "duration": 5.48}, {"text": "this can help the processor make better", "start": 3144.44, "duration": 5.32}, {"text": "use of the arithmetical functional units", "start": 3146.839, "duration": 4.881}, {"text": "so we often hear", "start": 3149.76, "duration": 5.0}, {"text": "that um you know that that processors", "start": 3151.72, "duration": 6.0}, {"text": "could do eight or 16 or 32 floating", "start": 3154.76, "duration": 7.12}, {"text": "Point operations um per per core per per", "start": 3157.72, "duration": 5.119}, {"text": "clock", "start": 3161.88, "duration": 4.36}, {"text": "cycle but what we often neglect is that", "start": 3162.839, "duration": 6.441}, {"text": "it typically takes four clock Cycles to", "start": 3166.24, "duration": 7.44}, {"text": "get that first result um if", "start": 3169.28, "duration": 6.96}, {"text": "we we put it if if we don't if we don't", "start": 3173.68, "duration": 4.8}, {"text": "have enough loading point operations for", "start": 3176.24, "duration": 4.2}, {"text": "the compiler to work with we often get", "start": 3178.48, "duration": 4.2}, {"text": "bubbles in those pipelines so Loop", "start": 3180.44, "duration": 4.76}, {"text": "unrolling or we take the loop body we", "start": 3182.68, "duration": 4.439}, {"text": "replicate it and then we change the", "start": 3185.2, "duration": 4.639}, {"text": "stride of that Loop can um give the", "start": 3187.119, "duration": 6.761}, {"text": "compiler additional um opportunities for", "start": 3189.839, "duration": 6.76}, {"text": "optimization this was a particularly um", "start": 3193.88, "duration": 4.679}, {"text": "a particularly simple example and I", "start": 3196.599, "duration": 3.921}, {"text": "should also say that this is an", "start": 3198.559, "duration": 4.76}, {"text": "optimization that the compiler generally", "start": 3200.52, "duration": 5.72}, {"text": "does very well um", "start": 3203.319, "duration": 5.0}, {"text": "also when you manually unroll your loop", "start": 3206.24, "duration": 3.76}, {"text": "it's going to make your code ugly and", "start": 3208.319, "duration": 3.8}, {"text": "difficult to maintain one thing that I", "start": 3210.0, "duration": 6.24}, {"text": "didn't show here was if the loop had a", "start": 3212.119, "duration": 6.68}, {"text": "um iteration count that wasn't divisible", "start": 3216.24, "duration": 4.52}, {"text": "by four that I would have had to have a", "start": 3218.799, "duration": 4.441}, {"text": "cleanup loop at the end or some cleanup", "start": 3220.76, "duration": 5.72}, {"text": "Cod at the end to um pick up the rest of", "start": 3223.24, "duration": 4.48}, {"text": "those", "start": 3226.48, "duration": 3.599}, {"text": "iterations now the reason I brought this", "start": 3227.72, "duration": 6.56}, {"text": "up though is that in rare cases you", "start": 3230.079, "duration": 6.081}, {"text": "might be able to beat the compiler in", "start": 3234.28, "duration": 3.839}, {"text": "years of doing this this was the only", "start": 3236.16, "duration": 4.0}, {"text": "time when I actually did better the", "start": 3238.119, "duration": 4.48}, {"text": "better than the compiler and this was", "start": 3240.16, "duration": 4.8}, {"text": "because the loop body and here I", "start": 3242.599, "duration": 7.161}, {"text": "simplified it it was actually um pages", "start": 3244.96, "duration": 7.8}, {"text": "of um P pages of statements within Loop", "start": 3249.76, "duration": 6.839}, {"text": "body This was um automatically generated", "start": 3252.76, "duration": 6.44}, {"text": "code for a molecular Dynamics", "start": 3256.599, "duration": 4.841}, {"text": "application I didn't do this manually I", "start": 3259.2, "duration": 4.68}, {"text": "wrote essentially a python script to to", "start": 3261.44, "duration": 7.159}, {"text": "rewrite the code and I was able to do um", "start": 3263.88, "duration": 7.479}, {"text": "for for this Loop um by unrolling by", "start": 3268.599, "duration": 4.361}, {"text": "Forex I believe I was able to get about", "start": 3271.359, "duration": 4.081}, {"text": "a 25% speed up but something you're not", "start": 3272.96, "duration": 5.08}, {"text": "going to get um very often and let me", "start": 3275.44, "duration": 5.24}, {"text": "just look at the", "start": 3278.04, "duration": 6.24}, {"text": "chat yes and eigor wrote", "start": 3280.68, "duration": 6.439}, {"text": "um you know in my experience trivial", "start": 3284.28, "duration": 4.519}, {"text": "Loop unrolling shown here is not", "start": 3287.119, "duration": 5.321}, {"text": "effective yes I agree um but if you have", "start": 3288.799, "duration": 5.361}, {"text": "complex logic in the loop to make good", "start": 3292.44, "duration": 5.6}, {"text": "use of memory Lo ities most y so eag I", "start": 3294.16, "duration": 6.08}, {"text": "would I would love to see that um this", "start": 3298.04, "duration": 4.0}, {"text": "was the only that was the only time when", "start": 3300.24, "duration": 4.48}, {"text": "I was actually able to um to get better", "start": 3302.04, "duration": 4.799}, {"text": "performance but I would love to see a", "start": 3304.72, "duration": 5.28}, {"text": "example where you did um where you did", "start": 3306.839, "duration": 7.081}, {"text": "Loop unrolling and and got to speed", "start": 3310.0, "duration": 3.92}, {"text": "up okay so we're almost out of time and", "start": 3314.599, "duration": 6.96}, {"text": "I think I'm just gonna finish with", "start": 3317.52, "duration": 7.12}, {"text": "um W with with one last lesson and", "start": 3321.559, "duration": 4.881}, {"text": "that's when call optimizing for the", "start": 3324.64, "duration": 4.28}, {"text": "common case this was an application I", "start": 3326.44, "duration": 4.879}, {"text": "had worked on years ago um collaboration", "start": 3328.92, "duration": 5.52}, {"text": "with enar on a code called Mass model", "start": 3331.319, "duration": 6.52}, {"text": "for prediction across scales this is a", "start": 3334.44, "duration": 7.399}, {"text": "um Global atmospheric ocean um", "start": 3337.839, "duration": 6.48}, {"text": "code um it's based on an unstructured", "start": 3341.839, "duration": 5.641}, {"text": "grid which is overwhelmingly hexagons of", "start": 3344.319, "duration": 5.841}, {"text": "different sizes plus a small number of", "start": 3347.48, "duration": 4.559}, {"text": "pentagons and heptagons it's actually", "start": 3350.16, "duration": 4.28}, {"text": "impossible to completely cover a cover a", "start": 3352.039, "duration": 3.52}, {"text": "sphere with he", "start": 3354.44, "duration": 3.599}, {"text": "exagon", "start": 3355.559, "duration": 5.48}, {"text": "um and we noticed what within this code", "start": 3358.039, "duration": 5.08}, {"text": "and I won't go into the details too much", "start": 3361.039, "duration": 5.161}, {"text": "but they treated each cell going into it", "start": 3363.119, "duration": 4.561}, {"text": "like they weren't sure how many", "start": 3366.2, "duration": 4.0}, {"text": "neighbors it would have so what I did", "start": 3367.68, "duration": 5.159}, {"text": "was I optimize the code I basically", "start": 3370.2, "duration": 4.96}, {"text": "rewrote a block of code for the special", "start": 3372.839, "duration": 5.121}, {"text": "case where the cell is a hexagon which", "start": 3375.16, "duration": 5.879}, {"text": "was true in about", "start": 3377.96, "duration": 6.399}, {"text": "99.99% of the percent of the times and", "start": 3381.039, "duration": 4.681}, {"text": "then create", "start": 3384.359, "duration": 5.081}, {"text": "um alternative code for looping over", "start": 3385.72, "duration": 6.0}, {"text": "cells which which are not hexagons and", "start": 3389.44, "duration": 4.48}, {"text": "here we're able to get a more optimal", "start": 3391.72, "duration": 5.28}, {"text": "chunk of code again in this really key", "start": 3393.92, "duration": 7.199}, {"text": "kernel led to I think about a what led", "start": 3397.0, "duration": 7.359}, {"text": "to about a 25% 30% speed up of this", "start": 3401.119, "duration": 6.321}, {"text": "kernel and overall impact on the entire", "start": 3404.359, "duration": 5.281}, {"text": "application so with that I am going to", "start": 3407.44, "duration": 3.879}, {"text": "wrap up we are at the top of the hour", "start": 3409.64, "duration": 3.8}, {"text": "there's a lot more in here even in the", "start": 3411.319, "duration": 4.081}, {"text": "shorter version of the", "start": 3413.44, "duration": 4.04}, {"text": "presentation we talk about Force", "start": 3415.4, "duration": 3.959}, {"text": "reductions where you", "start": 3417.48, "duration": 5.16}, {"text": "replace um more expensive operations", "start": 3419.359, "duration": 6.2}, {"text": "with equivalent less expensive", "start": 3422.64, "duration": 6.439}, {"text": "ones um inner procedural optimization", "start": 3425.559, "duration": 5.361}, {"text": "where you take a higher level VI view of", "start": 3429.079, "duration": 3.76}, {"text": "the code see if there are results that", "start": 3430.92, "duration": 4.08}, {"text": "are calculated that could be used across", "start": 3432.839, "duration": 5.641}, {"text": "multiple function calls and so on and", "start": 3435.0, "duration": 5.96}, {"text": "with that I am just going to stop here", "start": 3438.48, "duration": 5.319}, {"text": "with my summary", "start": 3440.96, "duration": 4.639}, {"text": "slide", "start": 3443.799, "duration": 4.721}, {"text": "and happy to take", "start": 3445.599, "duration": 5.2}, {"text": "any any more", "start": 3448.52, "duration": 4.88}, {"text": "questions so yes eigor I see the comment", "start": 3450.799, "duration": 4.481}, {"text": "there your your codes must be Memory", "start": 3453.4, "duration": 6.8}, {"text": "bound um you know in that case I was not", "start": 3455.28, "duration": 7.88}, {"text": "sure um if it was if it was memory bound", "start": 3460.2, "duration": 5.639}, {"text": "or not um but yes some of these are and", "start": 3463.16, "duration": 5.24}, {"text": "I know that that your philosophy is that", "start": 3465.839, "duration": 5.601}, {"text": "that well written codes should be um", "start": 3468.4, "duration": 5.399}, {"text": "should be compute bound but sometimes", "start": 3471.44, "duration": 5.159}, {"text": "you you work with what you", "start": 3473.799, "duration": 6.721}, {"text": "have um and from Salah are there any", "start": 3476.599, "duration": 5.921}, {"text": "resources that are good for just plain", "start": 3480.52, "duration": 4.12}, {"text": "practice problems regarding these Loop", "start": 3482.52, "duration": 4.44}, {"text": "optimizations you know now that I'm", "start": 3484.64, "duration": 5.0}, {"text": "aware of I have a few examples in my in", "start": 3486.96, "duration": 4.56}, {"text": "my GitHub repos but yeah we could", "start": 3489.64, "duration": 4.8}, {"text": "definitely use um use some", "start": 3491.52, "duration": 7.0}, {"text": "more and oh and thank you Joe um so with", "start": 3494.44, "duration": 6.599}, {"text": "that I'm going to stop sharing and I'm", "start": 3498.52, "duration": 5.16}, {"text": "happy to take um any questions I know", "start": 3501.039, "duration": 5.08}, {"text": "that was a lot stuff um even with the", "start": 3503.68, "duration": 5.32}, {"text": "abbreviated version and thank you for", "start": 3506.119, "duration": 5.0}, {"text": "sticking with me", "start": 3509.0, "duration": 5.88}, {"text": "oh and I see a question here from", "start": 3511.119, "duration": 6.68}, {"text": "sart I'm having memory leak while", "start": 3514.88, "duration": 5.239}, {"text": "training neural networks on GPU but not", "start": 3517.799, "duration": 5.961}, {"text": "on CPU are there any tools to debug", "start": 3520.119, "duration": 7.401}, {"text": "optimize GPU memory um I really don't do", "start": 3523.76, "duration": 5.44}, {"text": "much GPU", "start": 3527.52, "duration": 4.2}, {"text": "programming um I know Nvidia has some", "start": 3529.2, "duration": 4.76}, {"text": "tools um that might be something you", "start": 3531.72, "duration": 5.319}, {"text": "could possibly do do with um Insight oh", "start": 3533.96, "duration": 5.399}, {"text": "and I see um eigor weighed in already", "start": 3537.039, "duration": 5.841}, {"text": "with Cam M great thank", "start": 3539.359, "duration": 3.521}, {"text": "you and we have any more any more", "start": 3543.28, "duration": 4.16}, {"text": "questions I know we're just past the", "start": 3545.839, "duration": 4.361}, {"text": "hour few um people are get to drop", "start": 3547.44, "duration": 4.679}, {"text": "off all right if there's no other", "start": 3550.2, "duration": 4.44}, {"text": "further questions for Bob again thank", "start": 3552.119, "duration": 5.281}, {"text": "you Bob for giving this presentation um", "start": 3554.64, "duration": 4.399}, {"text": "uh folks recordings will be available as", "start": 3557.4, "duration": 3.04}, {"text": "soon as possible I will send those", "start": 3559.039, "duration": 2.961}, {"text": "emails and have a great rest of the", "start": 3560.44, "duration": 3.8}, {"text": "weekend weekend coming up thanks again", "start": 3562.0, "duration": 6.119}, {"text": "Bob take everybody thank you everybody", "start": 3564.24, "duration": 3.879}]